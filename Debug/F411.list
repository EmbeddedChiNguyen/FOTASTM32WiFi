
F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08004fb8  08004fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053fc  080053fc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005404  08005404  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005404  08005404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005408  08005408  00015408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800540c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000088c8  20000068  08005474  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008930  08005474  00028930  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b496  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025d8  00000000  00000000  0002b571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d8  00000000  00000000  0002db50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000790  00000000  00000000  0002e528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001663a  00000000  00000000  0002ecb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8ef  00000000  00000000  000452f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086636  00000000  00000000  00052be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ccc  00000000  00000000  000d9218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000dbee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004fa0 	.word	0x08004fa0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004fa0 	.word	0x08004fa0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ESP_Init>:
//#define pc_uart &huart2
char buffer[20];

/*****************************************************************************************************************************************/

void ESP_Init(char *SSID, char *PASSWD) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b098      	sub	sp, #96	; 0x60
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	char data[80];
//hàm wait for trả về giá trị 0 nếu có timeout xảy ra nhưng mà while(!0) thì luôn chạy có nghĩa là
//while (!wait_for()); thì nếu gặp timeout thì sẽ làm lại cho đến khi nhận được chuỗi trong waitfor);
//	Ringbuf_init();
//vì lí do nào đó thêm pc uart vô thì inialized lâu
	Uart_sendstring("AT+RST\r\n", wifi_uart);
 80005b6:	4929      	ldr	r1, [pc, #164]	; (800065c <ESP_Init+0xb0>)
 80005b8:	4829      	ldr	r0, [pc, #164]	; (8000660 <ESP_Init+0xb4>)
 80005ba:	f000 fc1b 	bl	8000df4 <Uart_sendstring>

	for (int i = 0; i < 5; i++) {
 80005be:	2300      	movs	r3, #0
 80005c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005c2:	e00c      	b.n	80005de <ESP_Init+0x32>
		for (int j = 0; j < 1160 * 1000; j++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80005c8:	e002      	b.n	80005d0 <ESP_Init+0x24>
 80005ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005cc:	3301      	adds	r3, #1
 80005ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80005d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005d2:	4a24      	ldr	r2, [pc, #144]	; (8000664 <ESP_Init+0xb8>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	dbf8      	blt.n	80005ca <ESP_Init+0x1e>
	for (int i = 0; i < 5; i++) {
 80005d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005da:	3301      	adds	r3, #1
 80005dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	ddef      	ble.n	80005c4 <ESP_Init+0x18>
			;
	}

	/********* AT **********/
	Uart_flush(wifi_uart);
 80005e4:	481d      	ldr	r0, [pc, #116]	; (800065c <ESP_Init+0xb0>)
 80005e6:	f000 fa4f 	bl	8000a88 <Uart_flush>
	Uart_sendstring("AT\r\n", wifi_uart);
 80005ea:	491c      	ldr	r1, [pc, #112]	; (800065c <ESP_Init+0xb0>)
 80005ec:	481e      	ldr	r0, [pc, #120]	; (8000668 <ESP_Init+0xbc>)
 80005ee:	f000 fc01 	bl	8000df4 <Uart_sendstring>

	while (!(Wait_for("OK\r\n", wifi_uart)))
 80005f2:	bf00      	nop
 80005f4:	4919      	ldr	r1, [pc, #100]	; (800065c <ESP_Init+0xb0>)
 80005f6:	481d      	ldr	r0, [pc, #116]	; (800066c <ESP_Init+0xc0>)
 80005f8:	f000 fd9c 	bl	8001134 <Wait_for>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0f8      	beq.n	80005f4 <ESP_Init+0x48>
		;
	//time wait is 500ms;
//	Uart_sendstring("AT---->OK\n\n", pc_uart);

	/********* AT+CWMODE=1 **********/
	Uart_flush(wifi_uart);
 8000602:	4816      	ldr	r0, [pc, #88]	; (800065c <ESP_Init+0xb0>)
 8000604:	f000 fa40 	bl	8000a88 <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 8000608:	4914      	ldr	r1, [pc, #80]	; (800065c <ESP_Init+0xb0>)
 800060a:	4819      	ldr	r0, [pc, #100]	; (8000670 <ESP_Init+0xc4>)
 800060c:	f000 fbf2 	bl	8000df4 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8000610:	bf00      	nop
 8000612:	4912      	ldr	r1, [pc, #72]	; (800065c <ESP_Init+0xb0>)
 8000614:	4815      	ldr	r0, [pc, #84]	; (800066c <ESP_Init+0xc0>)
 8000616:	f000 fd8d 	bl	8001134 <Wait_for>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f8      	beq.n	8000612 <ESP_Init+0x66>
		;
//	Uart_sendstring("CW MODE---->1\n\n", pc_uart);

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush(wifi_uart);
 8000620:	480e      	ldr	r0, [pc, #56]	; (800065c <ESP_Init+0xb0>)
 8000622:	f000 fa31 	bl	8000a88 <Uart_flush>
//	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
	sprintf(data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000626:	f107 0008 	add.w	r0, r7, #8
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	4911      	ldr	r1, [pc, #68]	; (8000674 <ESP_Init+0xc8>)
 8000630:	f003 fffc 	bl	800462c <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	4908      	ldr	r1, [pc, #32]	; (800065c <ESP_Init+0xb0>)
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fbda 	bl	8000df4 <Uart_sendstring>

	while (!(Wait_for("OK\r\n", wifi_uart)))
 8000640:	bf00      	nop
 8000642:	4906      	ldr	r1, [pc, #24]	; (800065c <ESP_Init+0xb0>)
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <ESP_Init+0xc0>)
 8000646:	f000 fd75 	bl	8001134 <Wait_for>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f8      	beq.n	8000642 <ESP_Init+0x96>
		;
}
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000115c 	.word	0x2000115c
 8000660:	08004fb8 	.word	0x08004fb8
 8000664:	0011b340 	.word	0x0011b340
 8000668:	08004fc4 	.word	0x08004fc4
 800066c:	08004fcc 	.word	0x08004fcc
 8000670:	08004fd4 	.word	0x08004fd4
 8000674:	08004fe4 	.word	0x08004fe4

08000678 <bufclr>:

void bufclr(char *buf) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	int len = strlen(buf);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff fdb7 	bl	80001f4 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < len; i++)
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	e007      	b.n	80006a0 <bufclr+0x28>
		buf[i] = '\0';
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	3301      	adds	r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	dbf3      	blt.n	8000690 <bufclr+0x18>
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <ESP_Get_Latest_Version>:

// Get the latest uploaded FW file name written on "latest_version.txt" file, on the web
void ESP_Get_Latest_Version(uint8_t *bufToPasteInto) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80006c0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80006c4:	6018      	str	r0, [r3, #0]
	char local_buf[500] = { 0 };
 80006c6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80006ca:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	3304      	adds	r3, #4
 80006d4:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 ffe0 	bl	80046a0 <memset>
	char local_buf2[30] = { 0 };
 80006e0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80006e4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	3304      	adds	r3, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	831a      	strh	r2, [r3, #24]
	Uart_flush(wifi_uart);
 80006fe:	4833      	ldr	r0, [pc, #204]	; (80007cc <ESP_Get_Latest_Version+0x118>)
 8000700:	f000 f9c2 	bl	8000a88 <Uart_flush>
	Uart_sendstring(
 8000704:	4931      	ldr	r1, [pc, #196]	; (80007cc <ESP_Get_Latest_Version+0x118>)
 8000706:	4832      	ldr	r0, [pc, #200]	; (80007d0 <ESP_Get_Latest_Version+0x11c>)
 8000708:	f000 fb74 	bl	8000df4 <Uart_sendstring>
			"AT+CIPSTART=\"TCP\",\"nguyenwebstm32.000webhostapp.com\",80\r\n",
			wifi_uart);
	while (!(Wait_for("OK\r\n", wifi_uart)))
 800070c:	bf00      	nop
 800070e:	492f      	ldr	r1, [pc, #188]	; (80007cc <ESP_Get_Latest_Version+0x118>)
 8000710:	4830      	ldr	r0, [pc, #192]	; (80007d4 <ESP_Get_Latest_Version+0x120>)
 8000712:	f000 fd0f 	bl	8001134 <Wait_for>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0f8      	beq.n	800070e <ESP_Get_Latest_Version+0x5a>
		;
	bufclr(local_buf);
 800071c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ffa9 	bl	8000678 <bufclr>
	sprintf(local_buf, "GET /uploads/latest_version_test.txt HTTP/1.1\r\n"
 8000726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072a:	492b      	ldr	r1, [pc, #172]	; (80007d8 <ESP_Get_Latest_Version+0x124>)
 800072c:	4618      	mov	r0, r3
 800072e:	f003 ff7d 	bl	800462c <siprintf>
			"Host: nguyenwebstm32.000webhostapp.com\r\n"
			"Connection: close\r\n\r\n");
	int len = strlen(local_buf); // Get the data length
 8000732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fd5c 	bl	80001f4 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	bufclr(local_buf2); // Make sure it cleared
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff96 	bl	8000678 <bufclr>
	sprintf(local_buf2, "AT+CIPSEND=%d\r\n", len);
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000754:	4921      	ldr	r1, [pc, #132]	; (80007dc <ESP_Get_Latest_Version+0x128>)
 8000756:	4618      	mov	r0, r3
 8000758:	f003 ff68 	bl	800462c <siprintf>
	Uart_sendstring(local_buf2, wifi_uart);
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	491a      	ldr	r1, [pc, #104]	; (80007cc <ESP_Get_Latest_Version+0x118>)
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fb46 	bl	8000df4 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)))
 8000768:	bf00      	nop
 800076a:	4918      	ldr	r1, [pc, #96]	; (80007cc <ESP_Get_Latest_Version+0x118>)
 800076c:	481c      	ldr	r0, [pc, #112]	; (80007e0 <ESP_Get_Latest_Version+0x12c>)
 800076e:	f000 fce1 	bl	8001134 <Wait_for>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d0f8      	beq.n	800076a <ESP_Get_Latest_Version+0xb6>
		;
	Uart_sendstring(local_buf, wifi_uart);
 8000778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077c:	4913      	ldr	r1, [pc, #76]	; (80007cc <ESP_Get_Latest_Version+0x118>)
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fb38 	bl	8000df4 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n", wifi_uart)))
 8000784:	bf00      	nop
 8000786:	4911      	ldr	r1, [pc, #68]	; (80007cc <ESP_Get_Latest_Version+0x118>)
 8000788:	4816      	ldr	r0, [pc, #88]	; (80007e4 <ESP_Get_Latest_Version+0x130>)
 800078a:	f000 fcd3 	bl	8001134 <Wait_for>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0f8      	beq.n	8000786 <ESP_Get_Latest_Version+0xd2>
		;
	while (!(Wait_for("\r\n\r\n", wifi_uart)))
 8000794:	bf00      	nop
 8000796:	490d      	ldr	r1, [pc, #52]	; (80007cc <ESP_Get_Latest_Version+0x118>)
 8000798:	4813      	ldr	r0, [pc, #76]	; (80007e8 <ESP_Get_Latest_Version+0x134>)
 800079a:	f000 fccb 	bl	8001134 <Wait_for>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0f8      	beq.n	8000796 <ESP_Get_Latest_Version+0xe2>
		;
	while (!(Copy_upto_rn("\r\n", bufToPasteInto, wifi_uart)))
 80007a4:	bf00      	nop
 80007a6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80007aa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80007ae:	4a07      	ldr	r2, [pc, #28]	; (80007cc <ESP_Get_Latest_Version+0x118>)
 80007b0:	6819      	ldr	r1, [r3, #0]
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <ESP_Get_Latest_Version+0x138>)
 80007b4:	f000 fb36 	bl	8000e24 <Copy_upto_rn>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0f3      	beq.n	80007a6 <ESP_Get_Latest_Version+0xf2>
		;
}
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000115c 	.word	0x2000115c
 80007d0:	08004ffc 	.word	0x08004ffc
 80007d4:	08004fcc 	.word	0x08004fcc
 80007d8:	08005038 	.word	0x08005038
 80007dc:	080050a8 	.word	0x080050a8
 80007e0:	080050b8 	.word	0x080050b8
 80007e4:	080050bc 	.word	0x080050bc
 80007e8:	080050c8 	.word	0x080050c8
 80007ec:	080050d0 	.word	0x080050d0

080007f0 <GetSector>:
#include "FLASH_SECTOR_F4.h"
#include "stm32f4xx_hal.h"
#include "string.h"
#include "stdio.h"
static uint32_t GetSector(uint32_t Address)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <GetSector+0xc8>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d806      	bhi.n	8000812 <GetSector+0x22>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800080a:	d302      	bcc.n	8000812 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	e04b      	b.n	80008aa <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a29      	ldr	r2, [pc, #164]	; (80008bc <GetSector+0xcc>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d806      	bhi.n	8000828 <GetSector+0x38>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a28      	ldr	r2, [pc, #160]	; (80008c0 <GetSector+0xd0>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d302      	bcc.n	8000828 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000822:	2301      	movs	r3, #1
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	e040      	b.n	80008aa <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a26      	ldr	r2, [pc, #152]	; (80008c4 <GetSector+0xd4>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d806      	bhi.n	800083e <GetSector+0x4e>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <GetSector+0xd8>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d302      	bcc.n	800083e <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000838:	2302      	movs	r3, #2
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	e035      	b.n	80008aa <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a22      	ldr	r2, [pc, #136]	; (80008cc <GetSector+0xdc>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d206      	bcs.n	8000854 <GetSector+0x64>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <GetSector+0xe0>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d302      	bcc.n	8000854 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800084e:	2303      	movs	r3, #3
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	e02a      	b.n	80008aa <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <GetSector+0xe4>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d206      	bcs.n	800086a <GetSector+0x7a>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <GetSector+0xdc>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d902      	bls.n	800086a <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000864:	2304      	movs	r3, #4
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e01f      	b.n	80008aa <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a1a      	ldr	r2, [pc, #104]	; (80008d8 <GetSector+0xe8>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d206      	bcs.n	8000880 <GetSector+0x90>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <GetSector+0xe4>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d902      	bls.n	8000880 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800087a:	2305      	movs	r3, #5
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e014      	b.n	80008aa <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a16      	ldr	r2, [pc, #88]	; (80008dc <GetSector+0xec>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d206      	bcs.n	8000896 <GetSector+0xa6>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <GetSector+0xe8>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d902      	bls.n	8000896 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000890:	2306      	movs	r3, #6
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	e009      	b.n	80008aa <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <GetSector+0xf0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d205      	bcs.n	80008aa <GetSector+0xba>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <GetSector+0xec>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d901      	bls.n	80008aa <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80008a6:	2307      	movs	r3, #7
 80008a8:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	08003ffe 	.word	0x08003ffe
 80008bc:	08007ffe 	.word	0x08007ffe
 80008c0:	08004000 	.word	0x08004000
 80008c4:	0800bffe 	.word	0x0800bffe
 80008c8:	08008000 	.word	0x08008000
 80008cc:	0800ffff 	.word	0x0800ffff
 80008d0:	0800c000 	.word	0x0800c000
 80008d4:	0801ffff 	.word	0x0801ffff
 80008d8:	0803ffff 	.word	0x0803ffff
 80008dc:	0805ffff 	.word	0x0805ffff
 80008e0:	0807ffff 	.word	0x0807ffff

080008e4 <read_data>:
uint32_t read_data(uint32_t Address){
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

	__IO uint32_t read_data = *(__IO uint32_t *)Address;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	60fb      	str	r3, [r7, #12]
	return (uint32_t)read_data;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <Flash_Write_Data_Int>:
uint32_t Flash_Write_Data_Int(uint32_t StartSectorAddress, uint32_t Data) {
 8000900:	b5b0      	push	{r4, r5, r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 800090a:	f002 f977 	bl	8002bfc <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	2200      	movs	r2, #0
 8000912:	461c      	mov	r4, r3
 8000914:	4615      	mov	r5, r2
 8000916:	4622      	mov	r2, r4
 8000918:	462b      	mov	r3, r5
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	2002      	movs	r0, #2
 800091e:	f002 f919 	bl	8002b54 <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 8000922:	f002 f98d 	bl	8002c40 <HAL_FLASH_Lock>
    return 0; // Success
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bdb0      	pop	{r4, r5, r7, pc}

08000930 <Flash_Erase>:
uint8_t bytes_temp[4];

uint32_t Flash_Erase(uint32_t StartSectorAddress) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	static FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SECTORError;
		int sofar=0;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
		  HAL_FLASH_Unlock();
 800093c:	f002 f95e 	bl	8002bfc <HAL_FLASH_Unlock>
		  uint32_t StartSector = GetSector(StartSectorAddress);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff55 	bl	80007f0 <GetSector>
 8000946:	61b8      	str	r0, [r7, #24]
		  uint32_t EndSectorAddress = StartSectorAddress ;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	617b      	str	r3, [r7, #20]
		  uint32_t EndSector = GetSector(EndSectorAddress);
 800094c:	6978      	ldr	r0, [r7, #20]
 800094e:	f7ff ff4f 	bl	80007f0 <GetSector>
 8000952:	6138      	str	r0, [r7, #16]
		  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <Flash_Erase+0x6c>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
		  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <Flash_Erase+0x6c>)
 800095c:	2202      	movs	r2, #2
 800095e:	611a      	str	r2, [r3, #16]
		  EraseInitStruct.Sector        = StartSector;
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <Flash_Erase+0x6c>)
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	6093      	str	r3, [r2, #8]
		  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	3301      	adds	r3, #1
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <Flash_Erase+0x6c>)
 8000970:	60d3      	str	r3, [r2, #12]
		  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4619      	mov	r1, r3
 8000978:	4808      	ldr	r0, [pc, #32]	; (800099c <Flash_Erase+0x6c>)
 800097a:	f002 fabd 	bl	8002ef8 <HAL_FLASHEx_Erase>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d003      	beq.n	800098c <Flash_Erase+0x5c>
		  {
			  return HAL_FLASH_GetError ();
 8000984:	f002 f96c 	bl	8002c60 <HAL_FLASH_GetError>
 8000988:	4603      	mov	r3, r0
 800098a:	e002      	b.n	8000992 <Flash_Erase+0x62>
		  }
		  HAL_FLASH_Lock();
 800098c:	f002 f958 	bl	8002c40 <HAL_FLASH_Lock>
		   return 0;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3720      	adds	r7, #32
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000084 	.word	0x20000084

080009a0 <Ringbuf_init>:
	return 1;
}

void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void) {
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <Ringbuf_init+0x68>)
 80009a6:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <Ringbuf_init+0x6c>)
 80009a8:	601a      	str	r2, [r3, #0]
	_tx_buffer1 = &tx_buffer1;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <Ringbuf_init+0x70>)
 80009ac:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <Ringbuf_init+0x74>)
 80009ae:	601a      	str	r2, [r3, #0]
	_rx_buffer2 = &rx_buffer2;
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <Ringbuf_init+0x78>)
 80009b2:	4a1a      	ldr	r2, [pc, #104]	; (8000a1c <Ringbuf_init+0x7c>)
 80009b4:	601a      	str	r2, [r3, #0]
	_tx_buffer2 = &tx_buffer2;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <Ringbuf_init+0x80>)
 80009b8:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <Ringbuf_init+0x84>)
 80009ba:	601a      	str	r2, [r3, #0]

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <Ringbuf_init+0x88>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	695a      	ldr	r2, [r3, #20]
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <Ringbuf_init+0x88>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f042 0201 	orr.w	r2, r2, #1
 80009ca:	615a      	str	r2, [r3, #20]
	__HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <Ringbuf_init+0x8c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	695a      	ldr	r2, [r3, #20]
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <Ringbuf_init+0x8c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f042 0201 	orr.w	r2, r2, #1
 80009da:	615a      	str	r2, [r3, #20]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <Ringbuf_init+0x88>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	68da      	ldr	r2, [r3, #12]
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <Ringbuf_init+0x88>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f042 0220 	orr.w	r2, r2, #32
 80009ea:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <Ringbuf_init+0x8c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68da      	ldr	r2, [r3, #12]
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <Ringbuf_init+0x8c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f042 0220 	orr.w	r2, r2, #32
 80009fa:	60da      	str	r2, [r3, #12]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20001120 	.word	0x20001120
 8000a0c:	200000a0 	.word	0x200000a0
 8000a10:	20001124 	.word	0x20001124
 8000a14:	200004c0 	.word	0x200004c0
 8000a18:	20001128 	.word	0x20001128
 8000a1c:	200008e0 	.word	0x200008e0
 8000a20:	2000112c 	.word	0x2000112c
 8000a24:	20000d00 	.word	0x20000d00
 8000a28:	2000115c 	.word	0x2000115c
 8000a2c:	200011a0 	.word	0x200011a0

08000a30 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer) {
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
	int i = (unsigned int) (buffer->head + 1) % UART_BUFFER_SIZE;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <store_char+0x54>)
 8000a46:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4a:	0a9b      	lsrs	r3, r3, #10
 8000a4c:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8000a50:	fb01 f303 	mul.w	r3, r1, r3
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	60fb      	str	r3, [r7, #12]

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != buffer->tail) {
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d009      	beq.n	8000a78 <store_char+0x48>
		buffer->buffer[buffer->head] = c;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000a6a:	683a      	ldr	r2, [r7, #0]
 8000a6c:	79f9      	ldrb	r1, [r7, #7]
 8000a6e:	54d1      	strb	r1, [r2, r3]
		buffer->head = i;
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	}
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	fa232cf3 	.word	0xfa232cf3

08000a88 <Uart_flush>:
		buffertocopyinto[indx] = buffertocopyfrom[i];
		indx++;
	}
}

void Uart_flush(UART_HandleTypeDef *uart) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <Uart_flush+0x54>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d10c      	bne.n	8000ab2 <Uart_flush+0x2a>
		memset(_rx_buffer1->buffer, '\0', UART_BUFFER_SIZE);
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <Uart_flush+0x58>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 fdfc 	bl	80046a0 <memset>
		_rx_buffer1->head = 0;
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <Uart_flush+0x58>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	}
	if (uart == pc_uart) {
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <Uart_flush+0x5c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10c      	bne.n	8000ad4 <Uart_flush+0x4c>
		memset(_rx_buffer2->buffer, '\0', UART_BUFFER_SIZE);
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <Uart_flush+0x60>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f003 fdeb 	bl	80046a0 <memset>
		_rx_buffer2->head = 0;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <Uart_flush+0x60>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000115c 	.word	0x2000115c
 8000ae0:	20001120 	.word	0x20001120
 8000ae4:	200011a0 	.word	0x200011a0
 8000ae8:	20001128 	.word	0x20001128

08000aec <Uart_peek>:

int Uart_peek(UART_HandleTypeDef *uart) {
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <Uart_peek+0x7c>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d114      	bne.n	8000b26 <Uart_peek+0x3a>
		if (_rx_buffer1->head == _rx_buffer1->tail) {
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <Uart_peek+0x80>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <Uart_peek+0x80>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d102      	bne.n	8000b16 <Uart_peek+0x2a>
			return -1;
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	e022      	b.n	8000b5c <Uart_peek+0x70>
		} else {
			return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <Uart_peek+0x80>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <Uart_peek+0x80>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000b22:	5cd3      	ldrb	r3, [r2, r3]
 8000b24:	e01a      	b.n	8000b5c <Uart_peek+0x70>
		}
	}

	else if (uart == pc_uart) {
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <Uart_peek+0x84>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d114      	bne.n	8000b58 <Uart_peek+0x6c>
		if (_rx_buffer2->head == _rx_buffer2->tail) {
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <Uart_peek+0x88>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <Uart_peek+0x88>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d102      	bne.n	8000b48 <Uart_peek+0x5c>
			return -1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e009      	b.n	8000b5c <Uart_peek+0x70>
		} else {
			return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <Uart_peek+0x88>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <Uart_peek+0x88>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000b54:	5cd3      	ldrb	r3, [r2, r3]
 8000b56:	e001      	b.n	8000b5c <Uart_peek+0x70>
		}
	}

	return -1;
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	2000115c 	.word	0x2000115c
 8000b6c:	20001120 	.word	0x20001120
 8000b70:	200011a0 	.word	0x200011a0
 8000b74:	20001128 	.word	0x20001128

08000b78 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a30      	ldr	r2, [pc, #192]	; (8000c44 <Uart_read+0xcc>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d128      	bne.n	8000bda <Uart_read+0x62>
		// if the head isn't ahead of the tail, we don't have any characters
		if (_rx_buffer1->head == _rx_buffer1->tail) {
 8000b88:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <Uart_read+0xd0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000b90:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <Uart_read+0xd0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d102      	bne.n	8000ba2 <Uart_read+0x2a>
			return -1;
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	e04a      	b.n	8000c38 <Uart_read+0xc0>
		} else {
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000ba2:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <Uart_read+0xd0>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <Uart_read+0xd0>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000bae:	5cd3      	ldrb	r3, [r2, r3]
 8000bb0:	73bb      	strb	r3, [r7, #14]
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <Uart_read+0xd0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <Uart_read+0xd0>)
 8000bbe:	6819      	ldr	r1, [r3, #0]
					% UART_BUFFER_SIZE;
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <Uart_read+0xd4>)
 8000bc2:	fba3 0302 	umull	r0, r3, r3, r2
 8000bc6:	0a9b      	lsrs	r3, r3, #10
 8000bc8:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000bcc:	fb00 f303 	mul.w	r3, r0, r3
 8000bd0:	1ad3      	subs	r3, r2, r3
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8000bd2:	f8c1 341c 	str.w	r3, [r1, #1052]	; 0x41c
			return c;
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	e02e      	b.n	8000c38 <Uart_read+0xc0>
		}
	}

	else if (uart == pc_uart) {
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <Uart_read+0xd8>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d128      	bne.n	8000c34 <Uart_read+0xbc>
		// if the head isn't ahead of the tail, we don't have any characters
		if (_rx_buffer2->head == _rx_buffer2->tail) {
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <Uart_read+0xdc>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <Uart_read+0xdc>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d102      	bne.n	8000bfc <Uart_read+0x84>
			return -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	e01d      	b.n	8000c38 <Uart_read+0xc0>
		} else {
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <Uart_read+0xdc>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <Uart_read+0xdc>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000c08:	5cd3      	ldrb	r3, [r2, r3]
 8000c0a:	73fb      	strb	r3, [r7, #15]
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <Uart_read+0xdc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <Uart_read+0xdc>)
 8000c18:	6819      	ldr	r1, [r3, #0]
					% UART_BUFFER_SIZE;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <Uart_read+0xd4>)
 8000c1c:	fba3 0302 	umull	r0, r3, r3, r2
 8000c20:	0a9b      	lsrs	r3, r3, #10
 8000c22:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000c26:	fb00 f303 	mul.w	r3, r0, r3
 8000c2a:	1ad3      	subs	r3, r2, r3
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8000c2c:	f8c1 341c 	str.w	r3, [r1, #1052]	; 0x41c
			return c;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	e001      	b.n	8000c38 <Uart_read+0xc0>
		}
	}

	else
		return -1;
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	2000115c 	.word	0x2000115c
 8000c48:	20001120 	.word	0x20001120
 8000c4c:	fa232cf3 	.word	0xfa232cf3
 8000c50:	200011a0 	.word	0x200011a0
 8000c54:	20001128 	.word	0x20001128

08000c58 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
	if (c >= 0) {
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db62      	blt.n	8000d2e <Uart_write+0xd6>
		if (uart == device_uart) {
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	4a34      	ldr	r2, [pc, #208]	; (8000d3c <Uart_write+0xe4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d12d      	bne.n	8000ccc <Uart_write+0x74>
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000c70:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <Uart_write+0xe8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <Uart_write+0xec>)
 8000c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8000c80:	0a9b      	lsrs	r3, r3, #10
 8000c82:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8000c86:	fb01 f303 	mul.w	r3, r1, r3
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	60bb      	str	r3, [r7, #8]

			// If the output buffer is full, there's nothing for it other than to
			// wait for the interrupt handler to empty it a bit
			// ???: return 0 here instead?
			while (i == _tx_buffer1->tail)
 8000c8e:	bf00      	nop
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <Uart_write+0xe8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d0f8      	beq.n	8000c90 <Uart_write+0x38>
				;

			_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t) c;
 8000c9e:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <Uart_write+0xe8>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <Uart_write+0xe8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	b2c9      	uxtb	r1, r1
 8000cae:	54d1      	strb	r1, [r2, r3]
			_tx_buffer1->head = i;
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <Uart_write+0xe8>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

			__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <Uart_write+0xe4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <Uart_write+0xe4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cc8:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
		}
	}
}
 8000cca:	e030      	b.n	8000d2e <Uart_write+0xd6>
		else if (uart == pc_uart) {
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <Uart_write+0xf0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d12c      	bne.n	8000d2e <Uart_write+0xd6>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <Uart_write+0xf4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000cdc:	1c5a      	adds	r2, r3, #1
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <Uart_write+0xec>)
 8000ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ce4:	0a9b      	lsrs	r3, r3, #10
 8000ce6:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8000cea:	fb01 f303 	mul.w	r3, r1, r3
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail)
 8000cf2:	bf00      	nop
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <Uart_write+0xf4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d0f8      	beq.n	8000cf4 <Uart_write+0x9c>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t) c;
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <Uart_write+0xf4>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <Uart_write+0xf4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	b2c9      	uxtb	r1, r1
 8000d12:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <Uart_write+0xf4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <Uart_write+0xf0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <Uart_write+0xf0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d2c:	60da      	str	r2, [r3, #12]
}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000115c 	.word	0x2000115c
 8000d40:	20001124 	.word	0x20001124
 8000d44:	fa232cf3 	.word	0xfa232cf3
 8000d48:	200011a0 	.word	0x200011a0
 8000d4c:	2000112c 	.word	0x2000112c

08000d50 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart) {
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <IsDataAvailable+0x90>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d119      	bne.n	8000d94 <IsDataAvailable+0x44>
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer1->head
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <IsDataAvailable+0x94>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
				- _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <IsDataAvailable+0x94>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	b29b      	uxth	r3, r3
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer1->head
 8000d78:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8000d7c:	b29b      	uxth	r3, r3
				- _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000d7e:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <IsDataAvailable+0x98>)
 8000d80:	fba2 1203 	umull	r1, r2, r2, r3
 8000d84:	0a92      	lsrs	r2, r2, #10
 8000d86:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8000d8a:	fb01 f202 	mul.w	r2, r1, r2
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	e01f      	b.n	8000dd4 <IsDataAvailable+0x84>
	else if (uart == pc_uart)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a15      	ldr	r2, [pc, #84]	; (8000dec <IsDataAvailable+0x9c>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d119      	bne.n	8000dd0 <IsDataAvailable+0x80>
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer2->head
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <IsDataAvailable+0xa0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
				- _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <IsDataAvailable+0xa0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	b29b      	uxth	r3, r3
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer2->head
 8000db4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8000db8:	b29b      	uxth	r3, r3
				- _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <IsDataAvailable+0x98>)
 8000dbc:	fba2 1203 	umull	r1, r2, r2, r3
 8000dc0:	0a92      	lsrs	r2, r2, #10
 8000dc2:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8000dc6:	fb01 f202 	mul.w	r2, r1, r2
 8000dca:	1a9b      	subs	r3, r3, r2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	e001      	b.n	8000dd4 <IsDataAvailable+0x84>
	else
		return -1;
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	2000115c 	.word	0x2000115c
 8000de4:	20001120 	.word	0x20001120
 8000de8:	fa232cf3 	.word	0xfa232cf3
 8000dec:	200011a0 	.word	0x200011a0
 8000df0:	20001128 	.word	0x20001128

08000df4 <Uart_sendstring>:
		buffertosave[indx] = Uart_read(uart);
	}
	return 1;
}

void Uart_sendstring(const char *s, UART_HandleTypeDef *uart) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
	while (*s != '\0')
 8000dfe:	e007      	b.n	8000e10 <Uart_sendstring+0x1c>
		Uart_write(*s++, uart);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	6839      	ldr	r1, [r7, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff24 	bl	8000c58 <Uart_write>
	while (*s != '\0')
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f3      	bne.n	8000e00 <Uart_sendstring+0xc>
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <Copy_upto_rn>:
	while (*s)
		Uart_write(*s++, uart);
}

int Copy_upto_rn(uint8_t *string, uint8_t *buffertocopyinto,
		UART_HandleTypeDef *uart) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	if (strcmp(string, "\r\n") == 0) {
 8000e30:	4955      	ldr	r1, [pc, #340]	; (8000f88 <Copy_upto_rn+0x164>)
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f7ff f9d4 	bl	80001e0 <strcmp>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f040 809f 	bne.w	8000f7e <Copy_upto_rn+0x15a>
		int so_far = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
		int len = strlen(string);
 8000e44:	68f8      	ldr	r0, [r7, #12]
 8000e46:	f7ff f9d5 	bl	80001f4 <strlen>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	617b      	str	r3, [r7, #20]
		int indx = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]

		again: while (!IsDataAvailable(uart))
 8000e52:	bf00      	nop
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff7b 	bl	8000d50 <IsDataAvailable>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0f9      	beq.n	8000e54 <Copy_upto_rn+0x30>
			;
		while (Uart_peek(uart) != string[so_far]) {
 8000e60:	e04c      	b.n	8000efc <Copy_upto_rn+0xd8>
			if (uart == device_uart) {
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a49      	ldr	r2, [pc, #292]	; (8000f8c <Copy_upto_rn+0x168>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d11d      	bne.n	8000ea6 <Copy_upto_rn+0x82>
				buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000e6a:	4b49      	ldr	r3, [pc, #292]	; (8000f90 <Copy_upto_rn+0x16c>)
 8000e6c:	6819      	ldr	r1, [r3, #0]
 8000e6e:	4b48      	ldr	r3, [pc, #288]	; (8000f90 <Copy_upto_rn+0x16c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	68b8      	ldr	r0, [r7, #8]
 8000e7a:	4403      	add	r3, r0
 8000e7c:	5c8a      	ldrb	r2, [r1, r2]
 8000e7e:	701a      	strb	r2, [r3, #0]
				_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8000e80:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <Copy_upto_rn+0x16c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <Copy_upto_rn+0x16c>)
 8000e8c:	6819      	ldr	r1, [r3, #0]
						% UART_BUFFER_SIZE;
 8000e8e:	4b41      	ldr	r3, [pc, #260]	; (8000f94 <Copy_upto_rn+0x170>)
 8000e90:	fba3 0302 	umull	r0, r3, r3, r2
 8000e94:	0a9b      	lsrs	r3, r3, #10
 8000e96:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000e9a:	fb00 f303 	mul.w	r3, r0, r3
 8000e9e:	1ad3      	subs	r3, r2, r3
				_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8000ea0:	f8c1 341c 	str.w	r3, [r1, #1052]	; 0x41c
 8000ea4:	e020      	b.n	8000ee8 <Copy_upto_rn+0xc4>
			}

			else if (uart == pc_uart) {
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a3b      	ldr	r2, [pc, #236]	; (8000f98 <Copy_upto_rn+0x174>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d11c      	bne.n	8000ee8 <Copy_upto_rn+0xc4>
				buffertocopyinto[indx] = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000eae:	4b3b      	ldr	r3, [pc, #236]	; (8000f9c <Copy_upto_rn+0x178>)
 8000eb0:	6819      	ldr	r1, [r3, #0]
 8000eb2:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <Copy_upto_rn+0x178>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	68b8      	ldr	r0, [r7, #8]
 8000ebe:	4403      	add	r3, r0
 8000ec0:	5c8a      	ldrb	r2, [r1, r2]
 8000ec2:	701a      	strb	r2, [r3, #0]
				_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8000ec4:	4b35      	ldr	r3, [pc, #212]	; (8000f9c <Copy_upto_rn+0x178>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <Copy_upto_rn+0x178>)
 8000ed0:	6819      	ldr	r1, [r3, #0]
						% UART_BUFFER_SIZE;
 8000ed2:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <Copy_upto_rn+0x170>)
 8000ed4:	fba3 0302 	umull	r0, r3, r3, r2
 8000ed8:	0a9b      	lsrs	r3, r3, #10
 8000eda:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000ede:	fb00 f303 	mul.w	r3, r0, r3
 8000ee2:	1ad3      	subs	r3, r2, r3
				_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8000ee4:	f8c1 341c 	str.w	r3, [r1, #1052]	; 0x41c
			}
			indx++;
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	3301      	adds	r3, #1
 8000eec:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart))
 8000eee:	bf00      	nop
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff2d 	bl	8000d50 <IsDataAvailable>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f9      	beq.n	8000ef0 <Copy_upto_rn+0xcc>
		while (Uart_peek(uart) != string[so_far]) {
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff fdf5 	bl	8000aec <Uart_peek>
 8000f02:	4601      	mov	r1, r0
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d1a8      	bne.n	8000e62 <Copy_upto_rn+0x3e>
				;
		}
		while (Uart_peek(uart) == string[so_far]) {
 8000f10:	e01b      	b.n	8000f4a <Copy_upto_rn+0x126>
			so_far++;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3301      	adds	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
			buffertocopyinto[indx++] = Uart_read(uart); //
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff fe2d 	bl	8000b78 <Uart_read>
 8000f1e:	4601      	mov	r1, r0
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	61ba      	str	r2, [r7, #24]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b2ca      	uxtb	r2, r1
 8000f2e:	701a      	strb	r2, [r3, #0]
			//chac chan la cho nay
			if (so_far == len)
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d101      	bne.n	8000f3c <Copy_upto_rn+0x118>
				return 1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e020      	b.n	8000f7e <Copy_upto_rn+0x15a>
			while (!IsDataAvailable(uart))
 8000f3c:	bf00      	nop
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ff06 	bl	8000d50 <IsDataAvailable>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f9      	beq.n	8000f3e <Copy_upto_rn+0x11a>
		while (Uart_peek(uart) == string[so_far]) {
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fdce 	bl	8000aec <Uart_peek>
 8000f50:	4601      	mov	r1, r0
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d0d9      	beq.n	8000f12 <Copy_upto_rn+0xee>
				;
		}

		if (so_far != len) {
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d002      	beq.n	8000f6c <Copy_upto_rn+0x148>
			so_far = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
			goto again;
 8000f6a:	e772      	b.n	8000e52 <Copy_upto_rn+0x2e>
		}

		if (so_far == len)
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d101      	bne.n	8000f78 <Copy_upto_rn+0x154>
			return 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e002      	b.n	8000f7e <Copy_upto_rn+0x15a>
		else
			return -1;
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	e7ff      	b.n	8000f7e <Copy_upto_rn+0x15a>
	}
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3720      	adds	r7, #32
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	080050dc 	.word	0x080050dc
 8000f8c:	2000115c 	.word	0x2000115c
 8000f90:	20001120 	.word	0x20001120
 8000f94:	fa232cf3 	.word	0xfa232cf3
 8000f98:	200011a0 	.word	0x200011a0
 8000f9c:	20001128 	.word	0x20001128

08000fa0 <Copy_upto_closed>:
uint32_t address = 0x0800F000;
int Copy_upto_closed(uint8_t *string, uint8_t *buffertocopyinto,
		UART_HandleTypeDef *uart) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
	if (strcmp(string, "CLOSED\r\n") == 0) {
 8000fac:	495a      	ldr	r1, [pc, #360]	; (8001118 <Copy_upto_closed+0x178>)
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f7ff f916 	bl	80001e0 <strcmp>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f040 80a9 	bne.w	800110e <Copy_upto_closed+0x16e>
			int so_far = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
			int len = strlen(string);
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f7ff f917 	bl	80001f4 <strlen>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	617b      	str	r3, [r7, #20]
			int indx = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]

			again: while (!IsDataAvailable(uart))
 8000fce:	bf00      	nop
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff febd 	bl	8000d50 <IsDataAvailable>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f9      	beq.n	8000fd0 <Copy_upto_closed+0x30>
				;
			while (Uart_peek(uart) != string[so_far]) {
 8000fdc:	e056      	b.n	800108c <Copy_upto_closed+0xec>
				if (uart == device_uart) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4e      	ldr	r2, [pc, #312]	; (800111c <Copy_upto_closed+0x17c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d122      	bne.n	800102c <Copy_upto_closed+0x8c>
					dem2++;
 8000fe6:	4b4e      	ldr	r3, [pc, #312]	; (8001120 <Copy_upto_closed+0x180>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	4a4c      	ldr	r2, [pc, #304]	; (8001120 <Copy_upto_closed+0x180>)
 8000fee:	6013      	str	r3, [r2, #0]
					buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000ff0:	4b4c      	ldr	r3, [pc, #304]	; (8001124 <Copy_upto_closed+0x184>)
 8000ff2:	6819      	ldr	r1, [r3, #0]
 8000ff4:	4b4b      	ldr	r3, [pc, #300]	; (8001124 <Copy_upto_closed+0x184>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	68b8      	ldr	r0, [r7, #8]
 8001000:	4403      	add	r3, r0
 8001002:	5c8a      	ldrb	r2, [r1, r2]
 8001004:	701a      	strb	r2, [r3, #0]
					_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001006:	4b47      	ldr	r3, [pc, #284]	; (8001124 <Copy_upto_closed+0x184>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	4b44      	ldr	r3, [pc, #272]	; (8001124 <Copy_upto_closed+0x184>)
 8001012:	6819      	ldr	r1, [r3, #0]
							% UART_BUFFER_SIZE;
 8001014:	4b44      	ldr	r3, [pc, #272]	; (8001128 <Copy_upto_closed+0x188>)
 8001016:	fba3 0302 	umull	r0, r3, r3, r2
 800101a:	0a9b      	lsrs	r3, r3, #10
 800101c:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8001020:	fb00 f303 	mul.w	r3, r0, r3
 8001024:	1ad3      	subs	r3, r2, r3
					_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001026:	f8c1 341c 	str.w	r3, [r1, #1052]	; 0x41c
 800102a:	e025      	b.n	8001078 <Copy_upto_closed+0xd8>
				}

				else if (uart == pc_uart) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a3f      	ldr	r2, [pc, #252]	; (800112c <Copy_upto_closed+0x18c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d121      	bne.n	8001078 <Copy_upto_closed+0xd8>
					dem2++;
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <Copy_upto_closed+0x180>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a39      	ldr	r2, [pc, #228]	; (8001120 <Copy_upto_closed+0x180>)
 800103c:	6013      	str	r3, [r2, #0]
					buffertocopyinto[indx] = _rx_buffer2->buffer[_rx_buffer2->tail];
 800103e:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <Copy_upto_closed+0x190>)
 8001040:	6819      	ldr	r1, [r3, #0]
 8001042:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <Copy_upto_closed+0x190>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	68b8      	ldr	r0, [r7, #8]
 800104e:	4403      	add	r3, r0
 8001050:	5c8a      	ldrb	r2, [r1, r2]
 8001052:	701a      	strb	r2, [r3, #0]
					_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001054:	4b36      	ldr	r3, [pc, #216]	; (8001130 <Copy_upto_closed+0x190>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	4b34      	ldr	r3, [pc, #208]	; (8001130 <Copy_upto_closed+0x190>)
 8001060:	6819      	ldr	r1, [r3, #0]
							% UART_BUFFER_SIZE;
 8001062:	4b31      	ldr	r3, [pc, #196]	; (8001128 <Copy_upto_closed+0x188>)
 8001064:	fba3 0302 	umull	r0, r3, r3, r2
 8001068:	0a9b      	lsrs	r3, r3, #10
 800106a:	f44f 6083 	mov.w	r0, #1048	; 0x418
 800106e:	fb00 f303 	mul.w	r3, r0, r3
 8001072:	1ad3      	subs	r3, r2, r3
					_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001074:	f8c1 341c 	str.w	r3, [r1, #1052]	; 0x41c
				}
				indx++;
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	3301      	adds	r3, #1
 800107c:	61bb      	str	r3, [r7, #24]
				while (!IsDataAvailable(uart))
 800107e:	bf00      	nop
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff fe65 	bl	8000d50 <IsDataAvailable>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f9      	beq.n	8001080 <Copy_upto_closed+0xe0>
			while (Uart_peek(uart) != string[so_far]) {
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fd2d 	bl	8000aec <Uart_peek>
 8001092:	4601      	mov	r1, r0
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4299      	cmp	r1, r3
 800109e:	d19e      	bne.n	8000fde <Copy_upto_closed+0x3e>
					;
			}
			while (Uart_peek(uart) == string[so_far]) {
 80010a0:	e01b      	b.n	80010da <Copy_upto_closed+0x13a>
				so_far++;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3301      	adds	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
				buffertocopyinto[indx++] = Uart_read(uart); //
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff fd65 	bl	8000b78 <Uart_read>
 80010ae:	4601      	mov	r1, r0
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	61ba      	str	r2, [r7, #24]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4413      	add	r3, r2
 80010bc:	b2ca      	uxtb	r2, r1
 80010be:	701a      	strb	r2, [r3, #0]
				//chac chan la cho nay
				if (so_far == len)
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d101      	bne.n	80010cc <Copy_upto_closed+0x12c>
					return 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e020      	b.n	800110e <Copy_upto_closed+0x16e>
				while (!IsDataAvailable(uart))
 80010cc:	bf00      	nop
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fe3e 	bl	8000d50 <IsDataAvailable>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f9      	beq.n	80010ce <Copy_upto_closed+0x12e>
			while (Uart_peek(uart) == string[so_far]) {
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fd06 	bl	8000aec <Uart_peek>
 80010e0:	4601      	mov	r1, r0
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d0d9      	beq.n	80010a2 <Copy_upto_closed+0x102>
					;
			}

			if (so_far != len) {
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d002      	beq.n	80010fc <Copy_upto_closed+0x15c>
				so_far = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
				goto again;
 80010fa:	e768      	b.n	8000fce <Copy_upto_closed+0x2e>
			}

			if (so_far == len)
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	429a      	cmp	r2, r3
 8001102:	d101      	bne.n	8001108 <Copy_upto_closed+0x168>
				return 1;
 8001104:	2301      	movs	r3, #1
 8001106:	e002      	b.n	800110e <Copy_upto_closed+0x16e>
			else
				return -1;
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	e7ff      	b.n	800110e <Copy_upto_closed+0x16e>
		}
	// Trả về -1 nếu không tìm thấy chuỗi "CLOSED\r\n"
}
 800110e:	4618      	mov	r0, r3
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	080050e0 	.word	0x080050e0
 800111c:	2000115c 	.word	0x2000115c
 8001120:	2000009c 	.word	0x2000009c
 8001124:	20001120 	.word	0x20001120
 8001128:	fa232cf3 	.word	0xfa232cf3
 800112c:	200011a0 	.word	0x200011a0
 8001130:	20001128 	.word	0x20001128

08001134 <Wait_for>:

int Wait_for(char *string, UART_HandleTypeDef *uart) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	int so_far = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
	int len = strlen(string);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff f856 	bl	80001f4 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	60bb      	str	r3, [r7, #8]
	again: timeout = TIMEOUT_DEF;
 800114c:	4b65      	ldr	r3, [pc, #404]	; (80012e4 <Wait_for+0x1b0>)
 800114e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001152:	801a      	strh	r2, [r3, #0]
	// let's wait for the data to show up
	while ((!IsDataAvailable(uart)) && timeout)
 8001154:	bf00      	nop
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f7ff fdfa 	bl	8000d50 <IsDataAvailable>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d103      	bne.n	800116a <Wait_for+0x36>
 8001162:	4b60      	ldr	r3, [pc, #384]	; (80012e4 <Wait_for+0x1b0>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f5      	bne.n	8001156 <Wait_for+0x22>
		;
	if (timeout == 0)
 800116a:	4b5e      	ldr	r3, [pc, #376]	; (80012e4 <Wait_for+0x1b0>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d147      	bne.n	8001202 <Wait_for+0xce>
		return 0;
 8001172:	2300      	movs	r3, #0
 8001174:	e0b2      	b.n	80012dc <Wait_for+0x1a8>
	// peek in the rx_buffer to see if we get the string
	while (Uart_peek(uart) != string[so_far]) {
		if (uart == device_uart) {
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	4a5b      	ldr	r2, [pc, #364]	; (80012e8 <Wait_for+0x1b4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d11e      	bne.n	80011bc <Wait_for+0x88>
			if (_rx_buffer1->tail != _rx_buffer1->head) {
 800117e:	4b5b      	ldr	r3, [pc, #364]	; (80012ec <Wait_for+0x1b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8001186:	4b59      	ldr	r3, [pc, #356]	; (80012ec <Wait_for+0x1b8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800118e:	429a      	cmp	r2, r3
 8001190:	d012      	beq.n	80011b8 <Wait_for+0x84>
				_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001192:	4b56      	ldr	r3, [pc, #344]	; (80012ec <Wait_for+0x1b8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	4b53      	ldr	r3, [pc, #332]	; (80012ec <Wait_for+0x1b8>)
 800119e:	6819      	ldr	r1, [r3, #0]
						% UART_BUFFER_SIZE;  // increment the tail
 80011a0:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <Wait_for+0x1bc>)
 80011a2:	fba3 0302 	umull	r0, r3, r3, r2
 80011a6:	0a9b      	lsrs	r3, r3, #10
 80011a8:	f44f 6083 	mov.w	r0, #1048	; 0x418
 80011ac:	fb00 f303 	mul.w	r3, r0, r3
 80011b0:	1ad3      	subs	r3, r2, r3
				_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 80011b2:	f8c1 341c 	str.w	r3, [r1, #1052]	; 0x41c
 80011b6:	e001      	b.n	80011bc <Wait_for+0x88>
			} else
				return 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e08f      	b.n	80012dc <Wait_for+0x1a8>
		}
		if (uart == pc_uart) {
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	4a4d      	ldr	r2, [pc, #308]	; (80012f4 <Wait_for+0x1c0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d11e      	bne.n	8001202 <Wait_for+0xce>
			if (_rx_buffer2->tail != _rx_buffer2->head) {
 80011c4:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <Wait_for+0x1c4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80011cc:	4b4a      	ldr	r3, [pc, #296]	; (80012f8 <Wait_for+0x1c4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d012      	beq.n	80011fe <Wait_for+0xca>
				_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 80011d8:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <Wait_for+0x1c4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	4b45      	ldr	r3, [pc, #276]	; (80012f8 <Wait_for+0x1c4>)
 80011e4:	6819      	ldr	r1, [r3, #0]
						% UART_BUFFER_SIZE;  // increment the tail
 80011e6:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <Wait_for+0x1bc>)
 80011e8:	fba3 0302 	umull	r0, r3, r3, r2
 80011ec:	0a9b      	lsrs	r3, r3, #10
 80011ee:	f44f 6083 	mov.w	r0, #1048	; 0x418
 80011f2:	fb00 f303 	mul.w	r3, r0, r3
 80011f6:	1ad3      	subs	r3, r2, r3
				_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 80011f8:	f8c1 341c 	str.w	r3, [r1, #1052]	; 0x41c
 80011fc:	e001      	b.n	8001202 <Wait_for+0xce>
			} else
				return 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	e06c      	b.n	80012dc <Wait_for+0x1a8>
	while (Uart_peek(uart) != string[so_far]) {
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f7ff fc72 	bl	8000aec <Uart_peek>
 8001208:	4601      	mov	r1, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4299      	cmp	r1, r3
 8001214:	d1af      	bne.n	8001176 <Wait_for+0x42>
		}
	}
	// if we got the first letter of the string
	while (Uart_peek(uart) == string[so_far]) {
 8001216:	e049      	b.n	80012ac <Wait_for+0x178>
		// now we will peek for the other letters too
		so_far++;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3301      	adds	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
		if (uart == device_uart) {
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	4a31      	ldr	r2, [pc, #196]	; (80012e8 <Wait_for+0x1b4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d111      	bne.n	800124a <Wait_for+0x116>
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <Wait_for+0x1b8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <Wait_for+0x1b8>)
 8001232:	6819      	ldr	r1, [r3, #0]
					% UART_BUFFER_SIZE;  // increment the tail
 8001234:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <Wait_for+0x1bc>)
 8001236:	fba3 0302 	umull	r0, r3, r3, r2
 800123a:	0a9b      	lsrs	r3, r3, #10
 800123c:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8001240:	fb00 f303 	mul.w	r3, r0, r3
 8001244:	1ad3      	subs	r3, r2, r3
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001246:	f8c1 341c 	str.w	r3, [r1, #1052]	; 0x41c
		}
		if (uart == pc_uart) {
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <Wait_for+0x1c0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d111      	bne.n	8001276 <Wait_for+0x142>
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <Wait_for+0x1c4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <Wait_for+0x1c4>)
 800125e:	6819      	ldr	r1, [r3, #0]
					% UART_BUFFER_SIZE;  // increment the tail
 8001260:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <Wait_for+0x1bc>)
 8001262:	fba3 0302 	umull	r0, r3, r3, r2
 8001266:	0a9b      	lsrs	r3, r3, #10
 8001268:	f44f 6083 	mov.w	r0, #1048	; 0x418
 800126c:	fb00 f303 	mul.w	r3, r0, r3
 8001270:	1ad3      	subs	r3, r2, r3
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001272:	f8c1 341c 	str.w	r3, [r1, #1052]	; 0x41c
		}
		if (so_far == len)
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	429a      	cmp	r2, r3
 800127c:	d101      	bne.n	8001282 <Wait_for+0x14e>
			return 1;
 800127e:	2301      	movs	r3, #1
 8001280:	e02c      	b.n	80012dc <Wait_for+0x1a8>
		timeout = TIMEOUT_DEF;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <Wait_for+0x1b0>)
 8001284:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001288:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable(uart)) && timeout)
 800128a:	bf00      	nop
 800128c:	6838      	ldr	r0, [r7, #0]
 800128e:	f7ff fd5f 	bl	8000d50 <IsDataAvailable>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d103      	bne.n	80012a0 <Wait_for+0x16c>
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <Wait_for+0x1b0>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f5      	bne.n	800128c <Wait_for+0x158>
			;
		if (timeout == 0)
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <Wait_for+0x1b0>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <Wait_for+0x178>
			return 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	e017      	b.n	80012dc <Wait_for+0x1a8>
	while (Uart_peek(uart) == string[so_far]) {
 80012ac:	6838      	ldr	r0, [r7, #0]
 80012ae:	f7ff fc1d 	bl	8000aec <Uart_peek>
 80012b2:	4601      	mov	r1, r0
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4299      	cmp	r1, r3
 80012be:	d0ab      	beq.n	8001218 <Wait_for+0xe4>
	}
	if (so_far != len) {
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d002      	beq.n	80012ce <Wait_for+0x19a>
		so_far = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
		goto again;
 80012cc:	e73e      	b.n	800114c <Wait_for+0x18>
	}
	if (so_far == len)
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d101      	bne.n	80012da <Wait_for+0x1a6>
		return 1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <Wait_for+0x1a8>
	else
		return 0;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000098 	.word	0x20000098
 80012e8:	2000115c 	.word	0x2000115c
 80012ec:	20001120 	.word	0x20001120
 80012f0:	fa232cf3 	.word	0xfa232cf3
 80012f4:	200011a0 	.word	0x200011a0
 80012f8:	20001128 	.word	0x20001128

080012fc <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	2b00      	cmp	r3, #0
 800131c:	d023      	beq.n	8001366 <Uart_isr+0x6a>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	2b00      	cmp	r3, #0
 8001326:	d01e      	beq.n	8001366 <Uart_isr+0x6a>
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.

		 *********************/
		huart->Instance->SR; /* Read status register */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	73fb      	strb	r3, [r7, #15]
		if (huart == device_uart) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a46      	ldr	r2, [pc, #280]	; (8001454 <Uart_isr+0x158>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d107      	bne.n	800134e <Uart_isr+0x52>
			store_char(c, _rx_buffer1);  // store data in buffer
 800133e:	4b46      	ldr	r3, [pc, #280]	; (8001458 <Uart_isr+0x15c>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fb72 	bl	8000a30 <store_char>

		else if (huart == pc_uart) {
			store_char(c, _rx_buffer2);  // store data in buffer
		}

		return;
 800134c:	e07b      	b.n	8001446 <Uart_isr+0x14a>
		else if (huart == pc_uart) {
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a42      	ldr	r2, [pc, #264]	; (800145c <Uart_isr+0x160>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d177      	bne.n	8001446 <Uart_isr+0x14a>
			store_char(c, _rx_buffer2);  // store data in buffer
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <Uart_isr+0x164>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fb66 	bl	8000a30 <store_char>
		return;
 8001364:	e06f      	b.n	8001446 <Uart_isr+0x14a>
	}

	/*If interrupt is caused due to Transmit Data Register Empty */
	if (((isrflags & USART_SR_TXE) != RESET)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136c:	2b00      	cmp	r3, #0
 800136e:	d06d      	beq.n	800144c <Uart_isr+0x150>
			&& ((cr1its & USART_CR1_TXEIE) != RESET)) {
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001376:	2b00      	cmp	r3, #0
 8001378:	d068      	beq.n	800144c <Uart_isr+0x150>
		if (huart == device_uart) {
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a35      	ldr	r2, [pc, #212]	; (8001454 <Uart_isr+0x158>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12e      	bne.n	80013e0 <Uart_isr+0xe4>
			if (tx_buffer1.head == tx_buffer1.tail) {
 8001382:	4b38      	ldr	r3, [pc, #224]	; (8001464 <Uart_isr+0x168>)
 8001384:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <Uart_isr+0x168>)
 800138a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800138e:	429a      	cmp	r2, r3
 8001390:	d108      	bne.n	80013a4 <Uart_isr+0xa8>
				// Buffer empty, so disable interrupts
				__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a0:	60da      	str	r2, [r3, #12]
				huart->Instance->SR;
				huart->Instance->DR = c;

			}
		}
		return;
 80013a2:	e052      	b.n	800144a <Uart_isr+0x14e>
				unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 80013a4:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <Uart_isr+0x168>)
 80013a6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80013aa:	4a2e      	ldr	r2, [pc, #184]	; (8001464 <Uart_isr+0x168>)
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	737b      	strb	r3, [r7, #13]
				tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 80013b0:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <Uart_isr+0x168>)
 80013b2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <Uart_isr+0x16c>)
 80013ba:	fba3 1302 	umull	r1, r3, r3, r2
 80013be:	0a9b      	lsrs	r3, r3, #10
 80013c0:	f44f 6183 	mov.w	r1, #1048	; 0x418
 80013c4:	fb01 f303 	mul.w	r3, r1, r3
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	4a26      	ldr	r2, [pc, #152]	; (8001464 <Uart_isr+0x168>)
 80013cc:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
				huart->Instance->SR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
				huart->Instance->DR = c;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	7b7a      	ldrb	r2, [r7, #13]
 80013dc:	605a      	str	r2, [r3, #4]
		return;
 80013de:	e034      	b.n	800144a <Uart_isr+0x14e>
		else if (huart == pc_uart) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a1e      	ldr	r2, [pc, #120]	; (800145c <Uart_isr+0x160>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d130      	bne.n	800144a <Uart_isr+0x14e>
			if (tx_buffer2.head == tx_buffer2.tail) {
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <Uart_isr+0x170>)
 80013ea:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <Uart_isr+0x170>)
 80013f0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d108      	bne.n	800140a <Uart_isr+0x10e>
				__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001406:	60da      	str	r2, [r3, #12]
		return;
 8001408:	e01f      	b.n	800144a <Uart_isr+0x14e>
				unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <Uart_isr+0x170>)
 800140c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8001410:	4a16      	ldr	r2, [pc, #88]	; (800146c <Uart_isr+0x170>)
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	73bb      	strb	r3, [r7, #14]
				tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <Uart_isr+0x170>)
 8001418:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <Uart_isr+0x16c>)
 8001420:	fba3 1302 	umull	r1, r3, r3, r2
 8001424:	0a9b      	lsrs	r3, r3, #10
 8001426:	f44f 6183 	mov.w	r1, #1048	; 0x418
 800142a:	fb01 f303 	mul.w	r3, r1, r3
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <Uart_isr+0x170>)
 8001432:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
				huart->Instance->SR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
				huart->Instance->DR = c;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	7bba      	ldrb	r2, [r7, #14]
 8001442:	605a      	str	r2, [r3, #4]
		return;
 8001444:	e001      	b.n	800144a <Uart_isr+0x14e>
		return;
 8001446:	bf00      	nop
 8001448:	e000      	b.n	800144c <Uart_isr+0x150>
		return;
 800144a:	bf00      	nop
	}
}
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000115c 	.word	0x2000115c
 8001458:	20001120 	.word	0x20001120
 800145c:	200011a0 	.word	0x200011a0
 8001460:	20001128 	.word	0x20001128
 8001464:	200004c0 	.word	0x200004c0
 8001468:	fa232cf3 	.word	0xfa232cf3
 800146c:	20000d00 	.word	0x20000d00

08001470 <jump_to_app>:

}
*/

void jump_to_app(uint32_t ADDRESS)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

	uint32_t reset_handler_add = *((volatile uint32_t *) (ADDRESS+4));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3304      	adds	r3, #4
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	617b      	str	r3, [r7, #20]
	void (*app_reset_handler)(void) = (void*) reset_handler_add;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
	HAL_RCC_DeInit();
 8001484:	f002 fc36 	bl	8003cf4 <HAL_RCC_DeInit>
	HAL_DeInit();
 8001488:	f001 f9aa 	bl	80027e0 <HAL_DeInit>
	SysTick->CTRL = 0x0;
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <jump_to_app+0x54>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
	SysTick->LOAD=0;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <jump_to_app+0x54>)
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
	SysTick->VAL=0;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <jump_to_app+0x54>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
	SCB->VTOR = ADDRESS;
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <jump_to_app+0x58>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6093      	str	r3, [r2, #8]
	uint32_t msp_value = *((volatile uint32_t *)ADDRESS);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	f383 8808 	msr	MSP, r3
}
 80014b4:	bf00      	nop
	__set_MSP(msp_value);
	app_reset_handler();
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4798      	blx	r3

}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <removeAndShift>:
	while (str[count] != '\0') {
		count++;
	}
	return count;
}
void removeAndShift(char *str, char *substr) {
 80014cc:	b5b0      	push	{r4, r5, r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
	char *found = strstr(str, substr);
 80014d6:	6839      	ldr	r1, [r7, #0]
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f003 f8e9 	bl	80046b0 <strstr>
 80014de:	6178      	str	r0, [r7, #20]
	if (found == NULL) {
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d03b      	beq.n	800155e <removeAndShift+0x92>
		return;
	}

	// Calculate the length of the substring
	size_t subLen = strlen(substr);
 80014e6:	6838      	ldr	r0, [r7, #0]
 80014e8:	f7fe fe84 	bl	80001f4 <strlen>
 80014ec:	6138      	str	r0, [r7, #16]

	// Remove the substring by shifting the rest of the string
	memmove(found, found + subLen, strlen(found + subLen) + 1);
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	18d4      	adds	r4, r2, r3
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4413      	add	r3, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe fe7a 	bl	80001f4 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	3301      	adds	r3, #1
 8001504:	461a      	mov	r2, r3
 8001506:	4621      	mov	r1, r4
 8001508:	6978      	ldr	r0, [r7, #20]
 800150a:	f003 f8af 	bl	800466c <memmove>

	// Remove any trailing spaces or characters after the substring
	size_t startIndex = found - str + subLen;
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	461a      	mov	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4413      	add	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
	while (str[startIndex] == ' ' || str[startIndex] == '\0') {
 800151c:	e012      	b.n	8001544 <removeAndShift+0x78>
		memmove(str + startIndex, str + startIndex + 1,
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	18d4      	adds	r4, r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3301      	adds	r3, #1
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	18d5      	adds	r5, r2, r3
				strlen(str + startIndex));
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
		memmove(str + startIndex, str + startIndex + 1,
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe fe5e 	bl	80001f4 <strlen>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4629      	mov	r1, r5
 800153e:	4620      	mov	r0, r4
 8001540:	f003 f894 	bl	800466c <memmove>
	while (str[startIndex] == ' ' || str[startIndex] == '\0') {
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4413      	add	r3, r2
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b20      	cmp	r3, #32
 800154e:	d0e6      	beq.n	800151e <removeAndShift+0x52>
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4413      	add	r3, r2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0e0      	beq.n	800151e <removeAndShift+0x52>
 800155c:	e000      	b.n	8001560 <removeAndShift+0x94>
		return;
 800155e:	bf00      	nop
	}
}
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bdb0      	pop	{r4, r5, r7, pc}

08001566 <convert_uint8_to_int>:

uint32_t convert_uint8_to_int(uint8_t *data) {
 8001566:	b580      	push	{r7, lr}
 8001568:	b088      	sub	sp, #32
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	char str[9] = { '\0' };
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	711a      	strb	r2, [r3, #4]
	if (data[0] == '0' && (data[1] == 'x' || data[1] == 'X')) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b30      	cmp	r3, #48	; 0x30
 8001582:	d10c      	bne.n	800159e <convert_uint8_to_int+0x38>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3301      	adds	r3, #1
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b78      	cmp	r3, #120	; 0x78
 800158c:	d004      	beq.n	8001598 <convert_uint8_to_int+0x32>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3301      	adds	r3, #1
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b58      	cmp	r3, #88	; 0x58
 8001596:	d102      	bne.n	800159e <convert_uint8_to_int+0x38>
		data += 2;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3302      	adds	r3, #2
 800159c:	607b      	str	r3, [r7, #4]
	}
	for (int i = 0; i < 8; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e00c      	b.n	80015be <convert_uint8_to_int+0x58>
		str[i] = data[i];
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	7819      	ldrb	r1, [r3, #0]
 80015ac:	f107 020c 	add.w	r2, r7, #12
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	4413      	add	r3, r2
 80015b4:	460a      	mov	r2, r1
 80015b6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	3301      	adds	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	2b07      	cmp	r3, #7
 80015c2:	ddef      	ble.n	80015a4 <convert_uint8_to_int+0x3e>
	}
	uint32_t result = strtoul(str, NULL, 16);
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2210      	movs	r2, #16
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 f823 	bl	8004618 <strtoul>
 80015d2:	61b8      	str	r0, [r7, #24]
	return result;
 80015d4:	69bb      	ldr	r3, [r7, #24]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <hexPairToInt>:
	} else {
		result = -1;
	}
	return result;
}
int hexPairToInt(char hex1, char hex2) {
 80015de:	b480      	push	{r7}
 80015e0:	b085      	sub	sp, #20
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	460a      	mov	r2, r1
 80015e8:	71fb      	strb	r3, [r7, #7]
 80015ea:	4613      	mov	r3, r2
 80015ec:	71bb      	strb	r3, [r7, #6]
	int result1, result2;
	// Chuyển đổi ký tự hex1 thành giá trị int
	if (hex1 >= '0' && hex1 <= '9') {
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b2f      	cmp	r3, #47	; 0x2f
 80015f2:	d906      	bls.n	8001602 <hexPairToInt+0x24>
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b39      	cmp	r3, #57	; 0x39
 80015f8:	d803      	bhi.n	8001602 <hexPairToInt+0x24>
		result1 = hex1 - '0';
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	3b30      	subs	r3, #48	; 0x30
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	e016      	b.n	8001630 <hexPairToInt+0x52>
	} else if (hex1 >= 'A' && hex1 <= 'F') {
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b40      	cmp	r3, #64	; 0x40
 8001606:	d906      	bls.n	8001616 <hexPairToInt+0x38>
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2b46      	cmp	r3, #70	; 0x46
 800160c:	d803      	bhi.n	8001616 <hexPairToInt+0x38>
		result1 = hex1 - 'A' + 10;
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	3b37      	subs	r3, #55	; 0x37
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e00c      	b.n	8001630 <hexPairToInt+0x52>
	} else if (hex1 >= 'a' && hex1 <= 'f') {
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2b60      	cmp	r3, #96	; 0x60
 800161a:	d906      	bls.n	800162a <hexPairToInt+0x4c>
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	2b66      	cmp	r3, #102	; 0x66
 8001620:	d803      	bhi.n	800162a <hexPairToInt+0x4c>
		result1 = hex1 - 'a' + 10;
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	3b57      	subs	r3, #87	; 0x57
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e002      	b.n	8001630 <hexPairToInt+0x52>
	} else {
		// Xử lý ký tự không hợp lệ
		return -1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	e024      	b.n	800167a <hexPairToInt+0x9c>
	}
	// Chuyển đổi ký tự hex2 thành giá trị int
	if (hex2 >= '0' && hex2 <= '9') {
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	2b2f      	cmp	r3, #47	; 0x2f
 8001634:	d906      	bls.n	8001644 <hexPairToInt+0x66>
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	2b39      	cmp	r3, #57	; 0x39
 800163a:	d803      	bhi.n	8001644 <hexPairToInt+0x66>
		result2 = hex2 - '0';
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	3b30      	subs	r3, #48	; 0x30
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	e016      	b.n	8001672 <hexPairToInt+0x94>
	} else if (hex2 >= 'A' && hex2 <= 'F') {
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	2b40      	cmp	r3, #64	; 0x40
 8001648:	d906      	bls.n	8001658 <hexPairToInt+0x7a>
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	2b46      	cmp	r3, #70	; 0x46
 800164e:	d803      	bhi.n	8001658 <hexPairToInt+0x7a>
		result2 = hex2 - 'A' + 10;
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	3b37      	subs	r3, #55	; 0x37
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	e00c      	b.n	8001672 <hexPairToInt+0x94>
	} else if (hex2 >= 'a' && hex2 <= 'f') {
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	2b60      	cmp	r3, #96	; 0x60
 800165c:	d906      	bls.n	800166c <hexPairToInt+0x8e>
 800165e:	79bb      	ldrb	r3, [r7, #6]
 8001660:	2b66      	cmp	r3, #102	; 0x66
 8001662:	d803      	bhi.n	800166c <hexPairToInt+0x8e>
		result2 = hex2 - 'a' + 10;
 8001664:	79bb      	ldrb	r3, [r7, #6]
 8001666:	3b57      	subs	r3, #87	; 0x57
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	e002      	b.n	8001672 <hexPairToInt+0x94>
	} else {
		return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	e003      	b.n	800167a <hexPairToInt+0x9c>
	}
	return result1 * 16 + result2;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	011a      	lsls	r2, r3, #4
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	4413      	add	r3, r2
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <print_pc>:
void print_pc(const char *str) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	Uart_sendstring(str, &huart2);
 8001690:	4903      	ldr	r1, [pc, #12]	; (80016a0 <print_pc+0x18>)
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fbae 	bl	8000df4 <Uart_sendstring>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200011a0 	.word	0x200011a0

080016a4 <print_pc_version>:
void print_pc_version() {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	sprintf(version_buf, "%d.%d\n", BL_Version[0], BL_Version[1]);
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <print_pc_version+0x20>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <print_pc_version+0x20>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4905      	ldr	r1, [pc, #20]	; (80016c8 <print_pc_version+0x24>)
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <print_pc_version+0x28>)
 80016b4:	f002 ffba 	bl	800462c <siprintf>
	print_pc(version_buf);
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <print_pc_version+0x28>)
 80016ba:	f7ff ffe5 	bl	8001688 <print_pc>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20008784 	.word	0x20008784
 80016c8:	080050ec 	.word	0x080050ec
 80016cc:	20008764 	.word	0x20008764

080016d0 <count_string>:
int count_string(char *string, char search) {
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
	int count = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
	while (*string != search) {
 80016e0:	e005      	b.n	80016ee <count_string+0x1e>
		count++;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
		string++;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3301      	adds	r3, #1
 80016ec:	607b      	str	r3, [r7, #4]
	while (*string != search) {
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1f4      	bne.n	80016e2 <count_string+0x12>
	}
	return count;
 80016f8:	68fb      	ldr	r3, [r7, #12]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <count_string2>:
int count_string2(char *string, char search) {
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
	static int countForChar2 = 0;
	while (*string != search) {
 8001714:	e007      	b.n	8001726 <count_string2+0x1e>
		countForChar2++;
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <count_string2+0x44>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	4a0b      	ldr	r2, [pc, #44]	; (800174c <count_string2+0x44>)
 800171e:	6013      	str	r3, [r2, #0]
		string++;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3301      	adds	r3, #1
 8001724:	607b      	str	r3, [r7, #4]
	while (*string != search) {
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	429a      	cmp	r2, r3
 800172e:	d1f2      	bne.n	8001716 <count_string2+0xe>
	}
	countForChar2++;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <count_string2+0x44>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <count_string2+0x44>)
 8001738:	6013      	str	r3, [r2, #0]
	return countForChar2;
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <count_string2+0x44>)
 800173c:	681b      	ldr	r3, [r3, #0]
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	200087b8 	.word	0x200087b8

08001750 <count_string3>:
int count_string3(char *string, char search) {
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
	static int countForChar3 = 0;
	while (*string != search) {
 800175c:	e008      	b.n	8001770 <count_string3+0x20>
		AGAIN: countForChar3++;
 800175e:	bf00      	nop
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <count_string3+0x58>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <count_string3+0x58>)
 8001768:	6013      	str	r3, [r2, #0]
		string++;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3301      	adds	r3, #1
 800176e:	607b      	str	r3, [r7, #4]
	while (*string != search) {
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	78fa      	ldrb	r2, [r7, #3]
 8001776:	429a      	cmp	r2, r3
 8001778:	d1f1      	bne.n	800175e <count_string3+0xe>
	}
	if (*(string + 1) == '+') {
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3301      	adds	r3, #1
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b2b      	cmp	r3, #43	; 0x2b
 8001782:	d103      	bne.n	800178c <count_string3+0x3c>
		ToggleForErrorString = 1;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <count_string3+0x5c>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
		goto AGAIN;
 800178a:	e7e9      	b.n	8001760 <count_string3+0x10>
	}
	countForChar3++;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <count_string3+0x58>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <count_string3+0x58>)
 8001794:	6013      	str	r3, [r2, #0]
	return countForChar3;
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <count_string3+0x58>)
 8001798:	681b      	ldr	r3, [r3, #0]
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	200087bc 	.word	0x200087bc
 80017ac:	200087b4 	.word	0x200087b4

080017b0 <count_where_error>:
int count_where_error(char *string) {
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	int countPositionOfError = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
	while (*string != '+') {
 80017bc:	e005      	b.n	80017ca <count_where_error+0x1a>
		countPositionOfError++;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3301      	adds	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
		string++;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3301      	adds	r3, #1
 80017c8:	607b      	str	r3, [r7, #4]
	while (*string != '+') {
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b2b      	cmp	r3, #43	; 0x2b
 80017d0:	d1f5      	bne.n	80017be <count_where_error+0xe>
	}
	countPositionOfError++;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
	return countPositionOfError;
 80017d8:	68fb      	ldr	r3, [r7, #12]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <count_string4>:
int count_string4(char *string, char search) {
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
	int countForChar4 = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
	while (*string != search) {
 80017f8:	e006      	b.n	8001808 <count_string4+0x20>
		AGAIN: countForChar4++;
 80017fa:	bf00      	nop
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3301      	adds	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
		string++;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3301      	adds	r3, #1
 8001806:	607b      	str	r3, [r7, #4]
	while (*string != search) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	429a      	cmp	r2, r3
 8001810:	d1f3      	bne.n	80017fa <count_string4+0x12>
	}
	if (*(string + 1) == '+') {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3301      	adds	r3, #1
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b2b      	cmp	r3, #43	; 0x2b
 800181a:	d103      	bne.n	8001824 <count_string4+0x3c>
		ToggleForErrorString = 1;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <count_string4+0x50>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
		goto AGAIN;
 8001822:	e7eb      	b.n	80017fc <count_string4+0x14>
	}
	countForChar4++;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3301      	adds	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
	return countForChar4;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	200087b4 	.word	0x200087b4

0800183c <ReadAllLine>:
StatusReadHexFile ReadAllLine(char *pBufferData) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	uint8_t u16CaculChecksum;
	FieldHexFile State;
	int u32Count = 0u;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
	int u32DataCount = 0u;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
	int addressInt1 = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
	int addressInt2 = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
	int test1 = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
	int test2 = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
	uint16_t test3 = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	827b      	strh	r3, [r7, #18]
	for (u32DataCount = 0; u32DataCount < strlen(hexStruct.u8Data);
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
 8001864:	e008      	b.n	8001878 <ReadAllLine+0x3c>
			u32DataCount++) {
		hexStruct.u8Data[u32DataCount] = '\0';
 8001866:	4a97      	ldr	r2, [pc, #604]	; (8001ac4 <ReadAllLine+0x288>)
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	4413      	add	r3, r2
 800186c:	3307      	adds	r3, #7
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
			u32DataCount++) {
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	3301      	adds	r3, #1
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
	for (u32DataCount = 0; u32DataCount < strlen(hexStruct.u8Data);
 8001878:	4893      	ldr	r0, [pc, #588]	; (8001ac8 <ReadAllLine+0x28c>)
 800187a:	f7fe fcbb 	bl	80001f4 <strlen>
 800187e:	4602      	mov	r2, r0
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	429a      	cmp	r2, r3
 8001884:	d8ef      	bhi.n	8001866 <ReadAllLine+0x2a>
	}
	State = START_CODE;
 8001886:	2300      	movs	r3, #0
 8001888:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (u32Count = 0; u32Count < strlen(pBufferData); u32Count++) {
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001890:	e10b      	b.n	8001aaa <ReadAllLine+0x26e>
		switch (State) {
 8001892:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001896:	2b06      	cmp	r3, #6
 8001898:	f200 8102 	bhi.w	8001aa0 <ReadAllLine+0x264>
 800189c:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <ReadAllLine+0x68>)
 800189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a2:	bf00      	nop
 80018a4:	080018c1 	.word	0x080018c1
 80018a8:	080018d9 	.word	0x080018d9
 80018ac:	08001903 	.word	0x08001903
 80018b0:	0800195b 	.word	0x0800195b
 80018b4:	08001997 	.word	0x08001997
 80018b8:	080019d7 	.word	0x080019d7
 80018bc:	08001a23 	.word	0x08001a23
		case START_CODE: {
			if (pBufferData[u32Count] != ':') {
 80018c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b3a      	cmp	r3, #58	; 0x3a
 80018ca:	d001      	beq.n	80018d0 <ReadAllLine+0x94>
				return READ_FAILED;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0f5      	b.n	8001abc <ReadAllLine+0x280>
			} else {
				State = BYTE_COUNT;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			}
			break;
 80018d6:	e0e5      	b.n	8001aa4 <ReadAllLine+0x268>
		}
		case BYTE_COUNT: {
			test1 = hexPairToInt(pBufferData[1], pBufferData[2]);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3301      	adds	r3, #1
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3302      	adds	r3, #2
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f7ff fe79 	bl	80015de <hexPairToInt>
 80018ec:	61b8      	str	r0, [r7, #24]
			hexStruct.u8ByteCount = test1;
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b74      	ldr	r3, [pc, #464]	; (8001ac4 <ReadAllLine+0x288>)
 80018f4:	701a      	strb	r2, [r3, #0]
			u32Count = 2u;
 80018f6:	2302      	movs	r3, #2
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
			State = ADDRESS;
 80018fa:	2302      	movs	r3, #2
 80018fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8001900:	e0d0      	b.n	8001aa4 <ReadAllLine+0x268>
		}
		case ADDRESS: {
			hexStruct.u8Addr[0] = pBufferData[3];
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3303      	adds	r3, #3
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	4b6e      	ldr	r3, [pc, #440]	; (8001ac4 <ReadAllLine+0x288>)
 800190a:	705a      	strb	r2, [r3, #1]
			hexStruct.u8Addr[1] = pBufferData[4];
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	781a      	ldrb	r2, [r3, #0]
 8001912:	4b6c      	ldr	r3, [pc, #432]	; (8001ac4 <ReadAllLine+0x288>)
 8001914:	709a      	strb	r2, [r3, #2]
			hexStruct.u8Addr[2] = pBufferData[5];
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3305      	adds	r3, #5
 800191a:	781a      	ldrb	r2, [r3, #0]
 800191c:	4b69      	ldr	r3, [pc, #420]	; (8001ac4 <ReadAllLine+0x288>)
 800191e:	70da      	strb	r2, [r3, #3]
			hexStruct.u8Addr[3] = pBufferData[6];
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3306      	adds	r3, #6
 8001924:	781a      	ldrb	r2, [r3, #0]
 8001926:	4b67      	ldr	r3, [pc, #412]	; (8001ac4 <ReadAllLine+0x288>)
 8001928:	711a      	strb	r2, [r3, #4]
			addressInt1 = hexPairToInt(hexStruct.u8Addr[0],
 800192a:	4b66      	ldr	r3, [pc, #408]	; (8001ac4 <ReadAllLine+0x288>)
 800192c:	785b      	ldrb	r3, [r3, #1]
					hexStruct.u8Addr[1]);
 800192e:	4a65      	ldr	r2, [pc, #404]	; (8001ac4 <ReadAllLine+0x288>)
 8001930:	7892      	ldrb	r2, [r2, #2]
			addressInt1 = hexPairToInt(hexStruct.u8Addr[0],
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fe52 	bl	80015de <hexPairToInt>
 800193a:	6238      	str	r0, [r7, #32]
			addressInt2 = hexPairToInt(hexStruct.u8Addr[2],
 800193c:	4b61      	ldr	r3, [pc, #388]	; (8001ac4 <ReadAllLine+0x288>)
 800193e:	78db      	ldrb	r3, [r3, #3]
					hexStruct.u8Addr[3]);
 8001940:	4a60      	ldr	r2, [pc, #384]	; (8001ac4 <ReadAllLine+0x288>)
 8001942:	7912      	ldrb	r2, [r2, #4]
			addressInt2 = hexPairToInt(hexStruct.u8Addr[2],
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fe49 	bl	80015de <hexPairToInt>
 800194c:	61f8      	str	r0, [r7, #28]
			u32Count = 6u;
 800194e:	2306      	movs	r3, #6
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
			State = RECORD_TYPE;
 8001952:	2303      	movs	r3, #3
 8001954:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8001958:	e0a4      	b.n	8001aa4 <ReadAllLine+0x268>
		}
		case RECORD_TYPE: {
			hexStruct.u8RecordType[0] = pBufferData[7];
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3307      	adds	r3, #7
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <ReadAllLine+0x288>)
 8001962:	715a      	strb	r2, [r3, #5]
			hexStruct.u8RecordType[1] = pBufferData[8];
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3308      	adds	r3, #8
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	4b56      	ldr	r3, [pc, #344]	; (8001ac4 <ReadAllLine+0x288>)
 800196c:	719a      	strb	r2, [r3, #6]
			test2 = hexPairToInt(hexStruct.u8RecordType[0],
 800196e:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <ReadAllLine+0x288>)
 8001970:	795b      	ldrb	r3, [r3, #5]
					hexStruct.u8RecordType[1]);
 8001972:	4a54      	ldr	r2, [pc, #336]	; (8001ac4 <ReadAllLine+0x288>)
 8001974:	7992      	ldrb	r2, [r2, #6]
			test2 = hexPairToInt(hexStruct.u8RecordType[0],
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fe30 	bl	80015de <hexPairToInt>
 800197e:	6178      	str	r0, [r7, #20]
			if (test2 == 1) {
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <ReadAllLine+0x14e>
				return READ_FAILED;
 8001986:	2301      	movs	r3, #1
 8001988:	e098      	b.n	8001abc <ReadAllLine+0x280>
			}
			u32Count = 8u;
 800198a:	2308      	movs	r3, #8
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
			State = DATA;
 800198e:	2304      	movs	r3, #4
 8001990:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8001994:	e086      	b.n	8001aa4 <ReadAllLine+0x268>
		}
		case DATA: {
			for (int i = 9; i < (hexStruct.u8ByteCount) * 2 + 9; i++) {
 8001996:	2309      	movs	r3, #9
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e00c      	b.n	80019b6 <ReadAllLine+0x17a>
				hexStruct.u8Data[i - 9] = pBufferData[i];
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	441a      	add	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3b09      	subs	r3, #9
 80019a6:	7811      	ldrb	r1, [r2, #0]
 80019a8:	4a46      	ldr	r2, [pc, #280]	; (8001ac4 <ReadAllLine+0x288>)
 80019aa:	4413      	add	r3, r2
 80019ac:	460a      	mov	r2, r1
 80019ae:	71da      	strb	r2, [r3, #7]
			for (int i = 9; i < (hexStruct.u8ByteCount) * 2 + 9; i++) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <ReadAllLine+0x288>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	3304      	adds	r3, #4
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	ddeb      	ble.n	800199c <ReadAllLine+0x160>
				if (test2 == 0) {
				}
			}
			u32Count = 8u + (hexStruct.u8ByteCount) * 2;
 80019c4:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <ReadAllLine+0x288>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	3308      	adds	r3, #8
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
			State = CHECKSUM;
 80019ce:	2305      	movs	r3, #5
 80019d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 80019d4:	e066      	b.n	8001aa4 <ReadAllLine+0x268>
		}
		case CHECKSUM: {
			hexStruct.u8Checksum[0] =
					pBufferData[9 + hexStruct.u8ByteCount * 2];
 80019d6:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <ReadAllLine+0x288>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	3309      	adds	r3, #9
 80019de:	461a      	mov	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	781a      	ldrb	r2, [r3, #0]
			hexStruct.u8Checksum[0] =
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <ReadAllLine+0x288>)
 80019e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hexStruct.u8Checksum[1] =
					pBufferData[10 + hexStruct.u8ByteCount * 2];
 80019ec:	4b35      	ldr	r3, [pc, #212]	; (8001ac4 <ReadAllLine+0x288>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	3305      	adds	r3, #5
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	461a      	mov	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	781a      	ldrb	r2, [r3, #0]
			hexStruct.u8Checksum[1] =
 80019fc:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <ReadAllLine+0x288>)
 80019fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			test3 = hexPairToInt(hexStruct.u8Checksum[0],
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <ReadAllLine+0x288>)
 8001a04:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
					hexStruct.u8Checksum[1]);
 8001a08:	4a2e      	ldr	r2, [pc, #184]	; (8001ac4 <ReadAllLine+0x288>)
 8001a0a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
			test3 = hexPairToInt(hexStruct.u8Checksum[0],
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fde4 	bl	80015de <hexPairToInt>
 8001a16:	4603      	mov	r3, r0
 8001a18:	827b      	strh	r3, [r7, #18]
			State = DONE;
 8001a1a:	2306      	movs	r3, #6
 8001a1c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8001a20:	e040      	b.n	8001aa4 <ReadAllLine+0x268>
		}
		case DONE: {   //printf ("byte count : %d\n", test1);
					   //printf ("address:%02d-%02d\n ", addressInt1, addressInt2);
					   //printf ("record type : %d", test2);
			u16CaculChecksum = test1 + addressInt1 + addressInt2 + test2;
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (u32DataCount = 0; u32DataCount < hexStruct.u8ByteCount * 2;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
 8001a44:	e017      	b.n	8001a76 <ReadAllLine+0x23a>
					u32DataCount += 2) {
				u16CaculChecksum = u16CaculChecksum
						+ hexPairToInt(hexStruct.u8Data[u32DataCount],
 8001a46:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <ReadAllLine+0x288>)
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3307      	adds	r3, #7
 8001a4e:	781a      	ldrb	r2, [r3, #0]
								hexStruct.u8Data[u32DataCount + 1]);
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	3301      	adds	r3, #1
 8001a54:	491b      	ldr	r1, [pc, #108]	; (8001ac4 <ReadAllLine+0x288>)
 8001a56:	440b      	add	r3, r1
 8001a58:	79db      	ldrb	r3, [r3, #7]
						+ hexPairToInt(hexStruct.u8Data[u32DataCount],
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	f7ff fdbe 	bl	80015de <hexPairToInt>
 8001a62:	4603      	mov	r3, r0
 8001a64:	b2da      	uxtb	r2, r3
				u16CaculChecksum = u16CaculChecksum
 8001a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					u32DataCount += 2) {
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	3302      	adds	r3, #2
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
			for (u32DataCount = 0; u32DataCount < hexStruct.u8ByteCount * 2;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <ReadAllLine+0x288>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	dbe1      	blt.n	8001a46 <ReadAllLine+0x20a>
			}
			u16CaculChecksum = ~u16CaculChecksum + 1;
 8001a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a86:	425b      	negs	r3, r3
 8001a88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (u16CaculChecksum == test3) {
 8001a8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	8a7a      	ldrh	r2, [r7, #18]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d101      	bne.n	8001a9c <ReadAllLine+0x260>
				return READ_SUCCESFULLY;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e00f      	b.n	8001abc <ReadAllLine+0x280>
			} else {
				return READ_FAILED;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e00d      	b.n	8001abc <ReadAllLine+0x280>
			}
			break;
		}
		default: {
			return READ_FAILED;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e00b      	b.n	8001abc <ReadAllLine+0x280>
	for (u32Count = 0; u32Count < strlen(pBufferData); u32Count++) {
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fba2 	bl	80001f4 <strlen>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	f63f aeec 	bhi.w	8001892 <ReadAllLine+0x56>
			break;
		}
		}
	}
	return READ_SUCCESFULLY;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3730      	adds	r7, #48	; 0x30
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20001130 	.word	0x20001130
 8001ac8:	20001137 	.word	0x20001137

08001acc <CopyandFlash>:
void CopyandFlash(char *arrayCopy, char *arrayTransfered, uint32_t address) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b0a0      	sub	sp, #128	; 0x80
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
	int test3 = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	67fb      	str	r3, [r7, #124]	; 0x7c
	int test4 = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	67bb      	str	r3, [r7, #120]	; 0x78
	int i = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	677b      	str	r3, [r7, #116]	; 0x74
	int indexTest = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	673b      	str	r3, [r7, #112]	; 0x70
	int indexNumber = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	66fb      	str	r3, [r7, #108]	; 0x6c
	int toggle = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	66bb      	str	r3, [r7, #104]	; 0x68
	int indexOld = count_string2(arrayCopy + indexTest, '\n');
 8001af0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	210a      	movs	r1, #10
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fe05 	bl	8001708 <count_string2>
 8001afe:	6678      	str	r0, [r7, #100]	; 0x64
	uint32_t addRess = address;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	663b      	str	r3, [r7, #96]	; 0x60
	Flash_Erase(addRess);
 8001b04:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001b06:	f7fe ff13 	bl	8000930 <Flash_Erase>
	while (1) {
		if (test4 == 1) {
 8001b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d10b      	bne.n	8001b28 <CopyandFlash+0x5c>
			indexNumber = indexNumber - test3;
 8001b10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	66fb      	str	r3, [r7, #108]	; 0x6c
			line--;
 8001b18:	4b93      	ldr	r3, [pc, #588]	; (8001d68 <CopyandFlash+0x29c>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b91      	ldr	r3, [pc, #580]	; (8001d68 <CopyandFlash+0x29c>)
 8001b22:	801a      	strh	r2, [r3, #0]
			test4 = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	67bb      	str	r3, [r7, #120]	; 0x78
		}
		indexNumber = count_string3(arrayCopy + indexTest, '\n');
 8001b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	210a      	movs	r1, #10
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fe0d 	bl	8001750 <count_string3>
 8001b36:	66f8      	str	r0, [r7, #108]	; 0x6c
		if (toggle == 0) {
 8001b38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <CopyandFlash+0x7a>
			toggle++;
 8001b3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b40:	3301      	adds	r3, #1
 8001b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b44:	e003      	b.n	8001b4e <CopyandFlash+0x82>
		} else {
			indexOld = indexNumber - indexTest;
 8001b46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	667b      	str	r3, [r7, #100]	; 0x64
		}
		for (int j = 0; j < indexOld; j++) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b52:	e00d      	b.n	8001b70 <CopyandFlash+0xa4>
			arrayTransfered[j] = arrayCopy[i++];
 8001b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	677a      	str	r2, [r7, #116]	; 0x74
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	441a      	add	r2, r3
 8001b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	440b      	add	r3, r1
 8001b66:	7812      	ldrb	r2, [r2, #0]
 8001b68:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < indexOld; j++) {
 8001b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbed      	blt.n	8001b54 <CopyandFlash+0x88>
		}
		indexTest = indexNumber;
 8001b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b7a:	673b      	str	r3, [r7, #112]	; 0x70
		test3 = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
		line++;
 8001b80:	4b79      	ldr	r3, [pc, #484]	; (8001d68 <CopyandFlash+0x29c>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b77      	ldr	r3, [pc, #476]	; (8001d68 <CopyandFlash+0x29c>)
 8001b8a:	801a      	strh	r2, [r3, #0]

		if (ToggleForErrorString == 1) {
 8001b8c:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <CopyandFlash+0x2a0>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d144      	bne.n	8001c1e <CopyandFlash+0x152>
			char errorBuff[30] = { 0 };
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
 8001ba8:	615a      	str	r2, [r3, #20]
 8001baa:	831a      	strh	r2, [r3, #24]
			int test = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	65bb      	str	r3, [r7, #88]	; 0x58
			int test1 = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	657b      	str	r3, [r7, #84]	; 0x54
			for (test = count_where_error(arrayTransfered) - 3;
 8001bb4:	68b8      	ldr	r0, [r7, #8]
 8001bb6:	f7ff fdfb 	bl	80017b0 <count_where_error>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bc0:	e024      	b.n	8001c0c <CopyandFlash+0x140>
					test < count_string4(arrayTransfered, '\n'); test++) {
				errorBuff[test1] = arrayTransfered[test];
 8001bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	7819      	ldrb	r1, [r3, #0]
 8001bca:	f107 0210 	add.w	r2, r7, #16
 8001bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd0:	4413      	add	r3, r2
 8001bd2:	460a      	mov	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
				if (errorBuff[test1] == ':') { // 58 equal :
 8001bd6:	f107 0210 	add.w	r2, r7, #16
 8001bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bdc:	4413      	add	r3, r2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b3a      	cmp	r3, #58	; 0x3a
 8001be2:	d10d      	bne.n	8001c00 <CopyandFlash+0x134>
					ToggleForErrorString = 0;
 8001be4:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <CopyandFlash+0x2a0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
					test3 = test1;
 8001bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bec:	67fb      	str	r3, [r7, #124]	; 0x7c
					removeAndShift(arrayTransfered, errorBuff);
 8001bee:	f107 0310 	add.w	r3, r7, #16
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	68b8      	ldr	r0, [r7, #8]
 8001bf6:	f7ff fc69 	bl	80014cc <removeAndShift>
					test4 = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bfe:	e00f      	b.n	8001c20 <CopyandFlash+0x154>
					goto BEGIN;
				}
				test1++;
 8001c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c02:	3301      	adds	r3, #1
 8001c04:	657b      	str	r3, [r7, #84]	; 0x54
					test < count_string4(arrayTransfered, '\n'); test++) {
 8001c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c08:	3301      	adds	r3, #1
 8001c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c0c:	210a      	movs	r1, #10
 8001c0e:	68b8      	ldr	r0, [r7, #8]
 8001c10:	f7ff fdea 	bl	80017e8 <count_string4>
 8001c14:	4602      	mov	r2, r0
 8001c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	dbd2      	blt.n	8001bc2 <CopyandFlash+0xf6>
 8001c1c:	e000      	b.n	8001c20 <CopyandFlash+0x154>
			}

			//xuliloi
		}
		BEGIN: if (ReadAllLine(arrayTransfered) != READ_SUCCESFULLY) {
 8001c1e:	bf00      	nop
 8001c20:	68b8      	ldr	r0, [r7, #8]
 8001c22:	f7ff fe0b 	bl	800183c <ReadAllLine>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 8117 	bne.w	8001e5c <CopyandFlash+0x390>
			break;
		} else {
			tempfordata[0] = hexStruct.u8Data[6];
 8001c2e:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c30:	7b5a      	ldrb	r2, [r3, #13]
 8001c32:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c34:	701a      	strb	r2, [r3, #0]
			tempfordata[1] = hexStruct.u8Data[7];
 8001c36:	4b4e      	ldr	r3, [pc, #312]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c38:	7b9a      	ldrb	r2, [r3, #14]
 8001c3a:	4b4e      	ldr	r3, [pc, #312]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c3c:	705a      	strb	r2, [r3, #1]
			tempfordata[2] = hexStruct.u8Data[4];
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c40:	7ada      	ldrb	r2, [r3, #11]
 8001c42:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c44:	709a      	strb	r2, [r3, #2]
			tempfordata[3] = hexStruct.u8Data[5];
 8001c46:	4b4a      	ldr	r3, [pc, #296]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c48:	7b1a      	ldrb	r2, [r3, #12]
 8001c4a:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c4c:	70da      	strb	r2, [r3, #3]
			tempfordata[4] = hexStruct.u8Data[2];
 8001c4e:	4b48      	ldr	r3, [pc, #288]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c50:	7a5a      	ldrb	r2, [r3, #9]
 8001c52:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c54:	711a      	strb	r2, [r3, #4]
			tempfordata[5] = hexStruct.u8Data[3];
 8001c56:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c58:	7a9a      	ldrb	r2, [r3, #10]
 8001c5a:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c5c:	715a      	strb	r2, [r3, #5]
			tempfordata[6] = hexStruct.u8Data[0];
 8001c5e:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c60:	79da      	ldrb	r2, [r3, #7]
 8001c62:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c64:	719a      	strb	r2, [r3, #6]
			tempfordata[7] = hexStruct.u8Data[1];
 8001c66:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c68:	7a1a      	ldrb	r2, [r3, #8]
 8001c6a:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c6c:	71da      	strb	r2, [r3, #7]
			tempfordata[8] = hexStruct.u8Data[14];
 8001c6e:	4b40      	ldr	r3, [pc, #256]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c70:	7d5a      	ldrb	r2, [r3, #21]
 8001c72:	4b40      	ldr	r3, [pc, #256]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c74:	721a      	strb	r2, [r3, #8]
			tempfordata[9] = hexStruct.u8Data[15];
 8001c76:	4b3e      	ldr	r3, [pc, #248]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c78:	7d9a      	ldrb	r2, [r3, #22]
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c7c:	725a      	strb	r2, [r3, #9]
			tempfordata[10] = hexStruct.u8Data[12];
 8001c7e:	4b3c      	ldr	r3, [pc, #240]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c80:	7cda      	ldrb	r2, [r3, #19]
 8001c82:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c84:	729a      	strb	r2, [r3, #10]
			tempfordata[11] = hexStruct.u8Data[13];
 8001c86:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c88:	7d1a      	ldrb	r2, [r3, #20]
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c8c:	72da      	strb	r2, [r3, #11]
			tempfordata[12] = hexStruct.u8Data[10];
 8001c8e:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c90:	7c5a      	ldrb	r2, [r3, #17]
 8001c92:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c94:	731a      	strb	r2, [r3, #12]
			tempfordata[13] = hexStruct.u8Data[11];
 8001c96:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <CopyandFlash+0x2a4>)
 8001c98:	7c9a      	ldrb	r2, [r3, #18]
 8001c9a:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <CopyandFlash+0x2a8>)
 8001c9c:	735a      	strb	r2, [r3, #13]
			tempfordata[14] = hexStruct.u8Data[8];
 8001c9e:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <CopyandFlash+0x2a4>)
 8001ca0:	7bda      	ldrb	r2, [r3, #15]
 8001ca2:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <CopyandFlash+0x2a8>)
 8001ca4:	739a      	strb	r2, [r3, #14]
			tempfordata[15] = hexStruct.u8Data[9];
 8001ca6:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <CopyandFlash+0x2a4>)
 8001ca8:	7c1a      	ldrb	r2, [r3, #16]
 8001caa:	4b32      	ldr	r3, [pc, #200]	; (8001d74 <CopyandFlash+0x2a8>)
 8001cac:	73da      	strb	r2, [r3, #15]
			tempfordata[16] = hexStruct.u8Data[22];
 8001cae:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <CopyandFlash+0x2a4>)
 8001cb0:	7f5a      	ldrb	r2, [r3, #29]
 8001cb2:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <CopyandFlash+0x2a8>)
 8001cb4:	741a      	strb	r2, [r3, #16]
			tempfordata[17] = hexStruct.u8Data[23];
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <CopyandFlash+0x2a4>)
 8001cb8:	7f9a      	ldrb	r2, [r3, #30]
 8001cba:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <CopyandFlash+0x2a8>)
 8001cbc:	745a      	strb	r2, [r3, #17]
			tempfordata[18] = hexStruct.u8Data[20];
 8001cbe:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <CopyandFlash+0x2a4>)
 8001cc0:	7eda      	ldrb	r2, [r3, #27]
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <CopyandFlash+0x2a8>)
 8001cc4:	749a      	strb	r2, [r3, #18]
			tempfordata[19] = hexStruct.u8Data[21];
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <CopyandFlash+0x2a4>)
 8001cc8:	7f1a      	ldrb	r2, [r3, #28]
 8001cca:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <CopyandFlash+0x2a8>)
 8001ccc:	74da      	strb	r2, [r3, #19]
			tempfordata[20] = hexStruct.u8Data[18];
 8001cce:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <CopyandFlash+0x2a4>)
 8001cd0:	7e5a      	ldrb	r2, [r3, #25]
 8001cd2:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <CopyandFlash+0x2a8>)
 8001cd4:	751a      	strb	r2, [r3, #20]
			tempfordata[21] = hexStruct.u8Data[19];
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <CopyandFlash+0x2a4>)
 8001cd8:	7e9a      	ldrb	r2, [r3, #26]
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <CopyandFlash+0x2a8>)
 8001cdc:	755a      	strb	r2, [r3, #21]
			tempfordata[22] = hexStruct.u8Data[16];
 8001cde:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <CopyandFlash+0x2a4>)
 8001ce0:	7dda      	ldrb	r2, [r3, #23]
 8001ce2:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <CopyandFlash+0x2a8>)
 8001ce4:	759a      	strb	r2, [r3, #22]
			tempfordata[23] = hexStruct.u8Data[17];
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <CopyandFlash+0x2a4>)
 8001ce8:	7e1a      	ldrb	r2, [r3, #24]
 8001cea:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <CopyandFlash+0x2a8>)
 8001cec:	75da      	strb	r2, [r3, #23]
			tempfordata[24] = hexStruct.u8Data[30];
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <CopyandFlash+0x2a4>)
 8001cf0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <CopyandFlash+0x2a8>)
 8001cf6:	761a      	strb	r2, [r3, #24]
			tempfordata[25] = hexStruct.u8Data[31];
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <CopyandFlash+0x2a4>)
 8001cfa:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <CopyandFlash+0x2a8>)
 8001d00:	765a      	strb	r2, [r3, #25]
			tempfordata[26] = hexStruct.u8Data[28];
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <CopyandFlash+0x2a4>)
 8001d04:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001d08:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <CopyandFlash+0x2a8>)
 8001d0a:	769a      	strb	r2, [r3, #26]
			tempfordata[27] = hexStruct.u8Data[29];
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <CopyandFlash+0x2a4>)
 8001d0e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <CopyandFlash+0x2a8>)
 8001d14:	76da      	strb	r2, [r3, #27]
			tempfordata[28] = hexStruct.u8Data[26];
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <CopyandFlash+0x2a4>)
 8001d18:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <CopyandFlash+0x2a8>)
 8001d1e:	771a      	strb	r2, [r3, #28]
			tempfordata[29] = hexStruct.u8Data[27];
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <CopyandFlash+0x2a4>)
 8001d22:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <CopyandFlash+0x2a8>)
 8001d28:	775a      	strb	r2, [r3, #29]
			tempfordata[30] = hexStruct.u8Data[24];
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <CopyandFlash+0x2a4>)
 8001d2c:	7fda      	ldrb	r2, [r3, #31]
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <CopyandFlash+0x2a8>)
 8001d30:	779a      	strb	r2, [r3, #30]
			tempfordata[31] = hexStruct.u8Data[25];
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <CopyandFlash+0x2a4>)
 8001d34:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <CopyandFlash+0x2a8>)
 8001d3a:	77da      	strb	r2, [r3, #31]
			uint16_t test2 = hexPairToInt(hexStruct.u8RecordType[0],
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <CopyandFlash+0x2a4>)
 8001d3e:	795b      	ldrb	r3, [r3, #5]
					hexStruct.u8RecordType[1]);
 8001d40:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <CopyandFlash+0x2a4>)
 8001d42:	7992      	ldrb	r2, [r2, #6]
			uint16_t test2 = hexPairToInt(hexStruct.u8RecordType[0],
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fc49 	bl	80015de <hexPairToInt>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			if (test2 != 0) {
 8001d52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d176      	bne.n	8001e48 <CopyandFlash+0x37c>

			} else {
				if (hexStruct.u8ByteCount == 0x10) {
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <CopyandFlash+0x2a4>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d11f      	bne.n	8001da2 <CopyandFlash+0x2d6>
					for (int i = 0; i < 32; i = i + 8) {
 8001d62:	2300      	movs	r3, #0
 8001d64:	653b      	str	r3, [r7, #80]	; 0x50
 8001d66:	e018      	b.n	8001d9a <CopyandFlash+0x2ce>
 8001d68:	200011e4 	.word	0x200011e4
 8001d6c:	200087b4 	.word	0x200087b4
 8001d70:	20001130 	.word	0x20001130
 8001d74:	20008794 	.word	0x20008794
						uint32_t result = convert_uint8_to_int(tempfordata + i);
 8001d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d7a:	4a3b      	ldr	r2, [pc, #236]	; (8001e68 <CopyandFlash+0x39c>)
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fbf1 	bl	8001566 <convert_uint8_to_int>
 8001d84:	6338      	str	r0, [r7, #48]	; 0x30
						Flash_Write_Data_Int(addRess, result);
 8001d86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d88:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001d8a:	f7fe fdb9 	bl	8000900 <Flash_Write_Data_Int>
						addRess += 4;
 8001d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d90:	3304      	adds	r3, #4
 8001d92:	663b      	str	r3, [r7, #96]	; 0x60
					for (int i = 0; i < 32; i = i + 8) {
 8001d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d96:	3308      	adds	r3, #8
 8001d98:	653b      	str	r3, [r7, #80]	; 0x50
 8001d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d9c:	2b1f      	cmp	r3, #31
 8001d9e:	ddeb      	ble.n	8001d78 <CopyandFlash+0x2ac>
 8001da0:	e052      	b.n	8001e48 <CopyandFlash+0x37c>
					}
				} else if (hexStruct.u8ByteCount == 0x8) {
 8001da2:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <CopyandFlash+0x3a0>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d117      	bne.n	8001dda <CopyandFlash+0x30e>
					for (int i = 0; i < 16; i = i + 8) {
 8001daa:	2300      	movs	r3, #0
 8001dac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dae:	e010      	b.n	8001dd2 <CopyandFlash+0x306>
						uint32_t result = convert_uint8_to_int(tempfordata + i);
 8001db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db2:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <CopyandFlash+0x39c>)
 8001db4:	4413      	add	r3, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fbd5 	bl	8001566 <convert_uint8_to_int>
 8001dbc:	6378      	str	r0, [r7, #52]	; 0x34
						Flash_Write_Data_Int(addRess, result);
 8001dbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001dc0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001dc2:	f7fe fd9d 	bl	8000900 <Flash_Write_Data_Int>
						addRess += 4;
 8001dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dc8:	3304      	adds	r3, #4
 8001dca:	663b      	str	r3, [r7, #96]	; 0x60
					for (int i = 0; i < 16; i = i + 8) {
 8001dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dce:	3308      	adds	r3, #8
 8001dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	ddeb      	ble.n	8001db0 <CopyandFlash+0x2e4>
 8001dd8:	e036      	b.n	8001e48 <CopyandFlash+0x37c>
					}
				} else if (hexStruct.u8ByteCount == 0xC) {
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <CopyandFlash+0x3a0>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d117      	bne.n	8001e12 <CopyandFlash+0x346>
					for (int i = 0; i < 24; i = i + 8) {
 8001de2:	2300      	movs	r3, #0
 8001de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001de6:	e010      	b.n	8001e0a <CopyandFlash+0x33e>
						uint32_t result = convert_uint8_to_int(tempfordata + i);
 8001de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dea:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <CopyandFlash+0x39c>)
 8001dec:	4413      	add	r3, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fbb9 	bl	8001566 <convert_uint8_to_int>
 8001df4:	63b8      	str	r0, [r7, #56]	; 0x38
						Flash_Write_Data_Int(addRess, result);
 8001df6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001df8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001dfa:	f7fe fd81 	bl	8000900 <Flash_Write_Data_Int>
						addRess += 4;
 8001dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e00:	3304      	adds	r3, #4
 8001e02:	663b      	str	r3, [r7, #96]	; 0x60
					for (int i = 0; i < 24; i = i + 8) {
 8001e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e06:	3308      	adds	r3, #8
 8001e08:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e0c:	2b17      	cmp	r3, #23
 8001e0e:	ddeb      	ble.n	8001de8 <CopyandFlash+0x31c>
 8001e10:	e01a      	b.n	8001e48 <CopyandFlash+0x37c>
					}

				} else if (hexStruct.u8ByteCount == 0x4) {
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <CopyandFlash+0x3a0>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d116      	bne.n	8001e48 <CopyandFlash+0x37c>
					for (int i = 0; i < 8; i = i + 8) {
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e1e:	e010      	b.n	8001e42 <CopyandFlash+0x376>
						uint32_t result = convert_uint8_to_int(tempfordata + i);
 8001e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e22:	4a11      	ldr	r2, [pc, #68]	; (8001e68 <CopyandFlash+0x39c>)
 8001e24:	4413      	add	r3, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fb9d 	bl	8001566 <convert_uint8_to_int>
 8001e2c:	63f8      	str	r0, [r7, #60]	; 0x3c
						Flash_Write_Data_Int(addRess, result);
 8001e2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e30:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001e32:	f7fe fd65 	bl	8000900 <Flash_Write_Data_Int>
						addRess += 4;
 8001e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e38:	3304      	adds	r3, #4
 8001e3a:	663b      	str	r3, [r7, #96]	; 0x60
					for (int i = 0; i < 8; i = i + 8) {
 8001e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e3e:	3308      	adds	r3, #8
 8001e40:	647b      	str	r3, [r7, #68]	; 0x44
 8001e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e44:	2b07      	cmp	r3, #7
 8001e46:	ddeb      	ble.n	8001e20 <CopyandFlash+0x354>
					}
				}
			}
		}

		memset(arrayTransfered, '\0', strlen(arrayTransfered));
 8001e48:	68b8      	ldr	r0, [r7, #8]
 8001e4a:	f7fe f9d3 	bl	80001f4 <strlen>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	2100      	movs	r1, #0
 8001e54:	68b8      	ldr	r0, [r7, #8]
 8001e56:	f002 fc23 	bl	80046a0 <memset>
		if (test4 == 1) {
 8001e5a:	e656      	b.n	8001b0a <CopyandFlash+0x3e>
			break;
 8001e5c:	bf00      	nop
	}
}
 8001e5e:	bf00      	nop
 8001e60:	3780      	adds	r7, #128	; 0x80
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20008794 	.word	0x20008794
 8001e6c:	20001130 	.word	0x20001130

08001e70 <parse_character_strings>:
void parse_character_strings() {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0
	int number_of_major = count_string(recv_buf, '.');
 8001e76:	212e      	movs	r1, #46	; 0x2e
 8001e78:	4829      	ldr	r0, [pc, #164]	; (8001f20 <parse_character_strings+0xb0>)
 8001e7a:	f7ff fc29 	bl	80016d0 <count_string>
 8001e7e:	61f8      	str	r0, [r7, #28]
	int number_of_minor = count_string(&recv_buf[number_of_major + 1], 'C');
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4a26      	ldr	r2, [pc, #152]	; (8001f20 <parse_character_strings+0xb0>)
 8001e86:	4413      	add	r3, r2
 8001e88:	2143      	movs	r1, #67	; 0x43
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fc20 	bl	80016d0 <count_string>
 8001e90:	61b8      	str	r0, [r7, #24]
	char temp1[10];
	for (int i = 0; i < number_of_major; i++) {
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
 8001e96:	e00c      	b.n	8001eb2 <parse_character_strings+0x42>
		temp1[i] = recv_buf[i];
 8001e98:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <parse_character_strings+0xb0>)
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	4413      	add	r3, r2
 8001e9e:	7819      	ldrb	r1, [r3, #0]
 8001ea0:	f107 020c 	add.w	r2, r7, #12
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	4413      	add	r3, r2
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < number_of_major; i++) {
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	3301      	adds	r3, #1
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbee      	blt.n	8001e98 <parse_character_strings+0x28>
	}
	temp1[number_of_major] = '\0';
 8001eba:	f107 020c 	add.w	r2, r7, #12
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
	char temp2[10];
	for (int i = 0; i < number_of_minor; i++) {
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
 8001eca:	e00d      	b.n	8001ee8 <parse_character_strings+0x78>
		temp2[i] = recv_buf[i + number_of_major + 1];
 8001ecc:	6a3a      	ldr	r2, [r7, #32]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <parse_character_strings+0xb0>)
 8001ed6:	5cd1      	ldrb	r1, [r2, r3]
 8001ed8:	463a      	mov	r2, r7
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	4413      	add	r3, r2
 8001ede:	460a      	mov	r2, r1
 8001ee0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < number_of_minor; i++) {
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	623b      	str	r3, [r7, #32]
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbed      	blt.n	8001ecc <parse_character_strings+0x5c>
	}
	temp2[number_of_minor] = '\0';
 8001ef0:	463a      	mov	r2, r7
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
	lat_ver0 = atoi(temp1);
 8001efa:	f107 030c 	add.w	r3, r7, #12
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 fa88 	bl	8004414 <atoi>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <parse_character_strings+0xb4>)
 8001f08:	6013      	str	r3, [r2, #0]
	lat_ver2 = atoi(temp2);
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 fa81 	bl	8004414 <atoi>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <parse_character_strings+0xb8>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200011e8 	.word	0x200011e8
 8001f24:	2000875c 	.word	0x2000875c
 8001f28:	20008760 	.word	0x20008760

08001f2c <compare_version>:
void compare_version() {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	if (read_data(0x08008000) > 100 && read_data(0x08008010) > 100) {
 8001f30:	4846      	ldr	r0, [pc, #280]	; (800204c <compare_version+0x120>)
 8001f32:	f7fe fcd7 	bl	80008e4 <read_data>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b64      	cmp	r3, #100	; 0x64
 8001f3a:	d910      	bls.n	8001f5e <compare_version+0x32>
 8001f3c:	4844      	ldr	r0, [pc, #272]	; (8002050 <compare_version+0x124>)
 8001f3e:	f7fe fcd1 	bl	80008e4 <read_data>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b64      	cmp	r3, #100	; 0x64
 8001f46:	d90a      	bls.n	8001f5e <compare_version+0x32>
		Flash_Erase(SECTOR_2);
 8001f48:	4840      	ldr	r0, [pc, #256]	; (800204c <compare_version+0x120>)
 8001f4a:	f7fe fcf1 	bl	8000930 <Flash_Erase>
		Flash_Write_Data_Int(0x08008000, 0);
 8001f4e:	2100      	movs	r1, #0
 8001f50:	483e      	ldr	r0, [pc, #248]	; (800204c <compare_version+0x120>)
 8001f52:	f7fe fcd5 	bl	8000900 <Flash_Write_Data_Int>
		Flash_Write_Data_Int(0x08008010, 0);
 8001f56:	2100      	movs	r1, #0
 8001f58:	483d      	ldr	r0, [pc, #244]	; (8002050 <compare_version+0x124>)
 8001f5a:	f7fe fcd1 	bl	8000900 <Flash_Write_Data_Int>
	}
	BL_Version[0] = read_data(0x08008000);
 8001f5e:	483b      	ldr	r0, [pc, #236]	; (800204c <compare_version+0x120>)
 8001f60:	f7fe fcc0 	bl	80008e4 <read_data>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <compare_version+0x128>)
 8001f6a:	601a      	str	r2, [r3, #0]
	BL_Version[1] = read_data(0x08008010);
 8001f6c:	4838      	ldr	r0, [pc, #224]	; (8002050 <compare_version+0x124>)
 8001f6e:	f7fe fcb9 	bl	80008e4 <read_data>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b37      	ldr	r3, [pc, #220]	; (8002054 <compare_version+0x128>)
 8001f78:	605a      	str	r2, [r3, #4]
	parse_character_strings();
 8001f7a:	f7ff ff79 	bl	8001e70 <parse_character_strings>
	if (lat_ver0 > BL_Version[0]) {
 8001f7e:	4b35      	ldr	r3, [pc, #212]	; (8002054 <compare_version+0x128>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b35      	ldr	r3, [pc, #212]	; (8002058 <compare_version+0x12c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	da17      	bge.n	8001fba <compare_version+0x8e>
		BL_Version[0] = lat_ver0;
 8001f8a:	4b33      	ldr	r3, [pc, #204]	; (8002058 <compare_version+0x12c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a31      	ldr	r2, [pc, #196]	; (8002054 <compare_version+0x128>)
 8001f90:	6013      	str	r3, [r2, #0]
		Flash_Erase(SECTOR_2);
 8001f92:	482e      	ldr	r0, [pc, #184]	; (800204c <compare_version+0x120>)
 8001f94:	f7fe fccc 	bl	8000930 <Flash_Erase>
		Flash_Write_Data_Int(0x08008010, BL_Version[1]);
 8001f98:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <compare_version+0x128>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	482c      	ldr	r0, [pc, #176]	; (8002050 <compare_version+0x124>)
 8001fa0:	f7fe fcae 	bl	8000900 <Flash_Write_Data_Int>
		Flash_Write_Data_Int(0x08008000, BL_Version[0]);
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <compare_version+0x128>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4828      	ldr	r0, [pc, #160]	; (800204c <compare_version+0x120>)
 8001fac:	f7fe fca8 	bl	8000900 <Flash_Write_Data_Int>
		VarCountCompare++;
 8001fb0:	4b2a      	ldr	r3, [pc, #168]	; (800205c <compare_version+0x130>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4a29      	ldr	r2, [pc, #164]	; (800205c <compare_version+0x130>)
 8001fb8:	6013      	str	r3, [r2, #0]
	}
	if (lat_ver2 > BL_Version[1]) {
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <compare_version+0x128>)
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	4b28      	ldr	r3, [pc, #160]	; (8002060 <compare_version+0x134>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	da17      	bge.n	8001ff6 <compare_version+0xca>
		BL_Version[1] = lat_ver2;
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <compare_version+0x134>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a22      	ldr	r2, [pc, #136]	; (8002054 <compare_version+0x128>)
 8001fcc:	6053      	str	r3, [r2, #4]
		Flash_Erase(SECTOR_2);
 8001fce:	481f      	ldr	r0, [pc, #124]	; (800204c <compare_version+0x120>)
 8001fd0:	f7fe fcae 	bl	8000930 <Flash_Erase>
		Flash_Write_Data_Int(0x08008000, BL_Version[0]);
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <compare_version+0x128>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	481c      	ldr	r0, [pc, #112]	; (800204c <compare_version+0x120>)
 8001fdc:	f7fe fc90 	bl	8000900 <Flash_Write_Data_Int>
		Flash_Write_Data_Int(0x08008010, BL_Version[1]);
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <compare_version+0x128>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	481a      	ldr	r0, [pc, #104]	; (8002050 <compare_version+0x124>)
 8001fe8:	f7fe fc8a 	bl	8000900 <Flash_Write_Data_Int>
		VarCountCompare++;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <compare_version+0x130>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	4a1a      	ldr	r2, [pc, #104]	; (800205c <compare_version+0x130>)
 8001ff4:	6013      	str	r3, [r2, #0]
	}
	if (VarCountCompare > 0) {
 8001ff6:	4b19      	ldr	r3, [pc, #100]	; (800205c <compare_version+0x130>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	dd10      	ble.n	8002020 <compare_version+0xf4>
		HAL_Delay(1000);
 8001ffe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002002:	f000 fc71 	bl	80028e8 <HAL_Delay>
		print_pc("Got higher version\n");
 8002006:	4817      	ldr	r0, [pc, #92]	; (8002064 <compare_version+0x138>)
 8002008:	f7ff fb3e 	bl	8001688 <print_pc>
		print_pc("Version:");
 800200c:	4816      	ldr	r0, [pc, #88]	; (8002068 <compare_version+0x13c>)
 800200e:	f7ff fb3b 	bl	8001688 <print_pc>
		print_pc_version();
 8002012:	f7ff fb47 	bl	80016a4 <print_pc_version>
		CountFirmwareSlot++;
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <compare_version+0x140>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3301      	adds	r3, #1
 800201c:	4a13      	ldr	r2, [pc, #76]	; (800206c <compare_version+0x140>)
 800201e:	6013      	str	r3, [r2, #0]
	}
	if (VarCountCompare == 0) {
 8002020:	4b0e      	ldr	r3, [pc, #56]	; (800205c <compare_version+0x130>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10e      	bne.n	8002046 <compare_version+0x11a>
		HAL_Delay(1000);
 8002028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800202c:	f000 fc5c 	bl	80028e8 <HAL_Delay>
		print_pc("Version on the server is not higher\n");
 8002030:	480f      	ldr	r0, [pc, #60]	; (8002070 <compare_version+0x144>)
 8002032:	f7ff fb29 	bl	8001688 <print_pc>
		print_pc("Returning to application program...");
 8002036:	480f      	ldr	r0, [pc, #60]	; (8002074 <compare_version+0x148>)
 8002038:	f7ff fb26 	bl	8001688 <print_pc>
		TriggerBase++;
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <compare_version+0x14c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <compare_version+0x14c>)
 8002044:	6013      	str	r3, [r2, #0]
	}
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	08008000 	.word	0x08008000
 8002050:	08008010 	.word	0x08008010
 8002054:	20008784 	.word	0x20008784
 8002058:	2000875c 	.word	0x2000875c
 800205c:	20008790 	.word	0x20008790
 8002060:	20008760 	.word	0x20008760
 8002064:	080050f4 	.word	0x080050f4
 8002068:	08005108 	.word	0x08005108
 800206c:	20000000 	.word	0x20000000
 8002070:	08005114 	.word	0x08005114
 8002074:	0800513c 	.word	0x0800513c
 8002078:	20000004 	.word	0x20000004

0800207c <ESP_Get_Firmware>:
//
void ESP_Get_Firmware(uint8_t *buffer) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b0be      	sub	sp, #248	; 0xf8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	char local_buf[200] = { 0 };
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002088:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800208c:	22c4      	movs	r2, #196	; 0xc4
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f002 fb05 	bl	80046a0 <memset>
	char local_buf2[30] = { 0 };
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	615a      	str	r2, [r3, #20]
 80020ac:	831a      	strh	r2, [r3, #24]
	Uart_flush(wifi_uart);
 80020ae:	4830      	ldr	r0, [pc, #192]	; (8002170 <ESP_Get_Firmware+0xf4>)
 80020b0:	f7fe fcea 	bl	8000a88 <Uart_flush>
	Uart_sendstring(
 80020b4:	492e      	ldr	r1, [pc, #184]	; (8002170 <ESP_Get_Firmware+0xf4>)
 80020b6:	482f      	ldr	r0, [pc, #188]	; (8002174 <ESP_Get_Firmware+0xf8>)
 80020b8:	f7fe fe9c 	bl	8000df4 <Uart_sendstring>
			"AT+CIPSTART=\"TCP\",\"nguyenwebstm32.000webhostapp.com\",80\r\n",
			wifi_uart);
	while (!(Wait_for("OK\r\n", wifi_uart)))
 80020bc:	bf00      	nop
 80020be:	492c      	ldr	r1, [pc, #176]	; (8002170 <ESP_Get_Firmware+0xf4>)
 80020c0:	482d      	ldr	r0, [pc, #180]	; (8002178 <ESP_Get_Firmware+0xfc>)
 80020c2:	f7ff f837 	bl	8001134 <Wait_for>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f8      	beq.n	80020be <ESP_Get_Firmware+0x42>
		;
	bufclr(local_buf); // Make sure it cleared
 80020cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fad1 	bl	8000678 <bufclr>
	sprintf(local_buf, "GET /uploads/1.0.hex HTTP/1.1\r\n"
 80020d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020da:	4928      	ldr	r1, [pc, #160]	; (800217c <ESP_Get_Firmware+0x100>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 faa5 	bl	800462c <siprintf>
			"Host: nguyenwebstm32.000webhostapp.com\r\n"
			"Connection: close\r\n\r\n");
	int len = strlen(local_buf);
 80020e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe f884 	bl	80001f4 <strlen>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bufclr(local_buf2);
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fabe 	bl	8000678 <bufclr>
	sprintf(local_buf2, "AT+CIPSEND=%d\r\n", len);
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002104:	491e      	ldr	r1, [pc, #120]	; (8002180 <ESP_Get_Firmware+0x104>)
 8002106:	4618      	mov	r0, r3
 8002108:	f002 fa90 	bl	800462c <siprintf>
	Uart_sendstring(local_buf2, wifi_uart);
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	4917      	ldr	r1, [pc, #92]	; (8002170 <ESP_Get_Firmware+0xf4>)
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fe6e 	bl	8000df4 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)))
 8002118:	bf00      	nop
 800211a:	4915      	ldr	r1, [pc, #84]	; (8002170 <ESP_Get_Firmware+0xf4>)
 800211c:	4819      	ldr	r0, [pc, #100]	; (8002184 <ESP_Get_Firmware+0x108>)
 800211e:	f7ff f809 	bl	8001134 <Wait_for>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f8      	beq.n	800211a <ESP_Get_Firmware+0x9e>
		;
	Uart_sendstring(local_buf, wifi_uart);
 8002128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800212c:	4910      	ldr	r1, [pc, #64]	; (8002170 <ESP_Get_Firmware+0xf4>)
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fe60 	bl	8000df4 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n", wifi_uart))) {
 8002134:	bf00      	nop
 8002136:	490e      	ldr	r1, [pc, #56]	; (8002170 <ESP_Get_Firmware+0xf4>)
 8002138:	4813      	ldr	r0, [pc, #76]	; (8002188 <ESP_Get_Firmware+0x10c>)
 800213a:	f7fe fffb 	bl	8001134 <Wait_for>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f8      	beq.n	8002136 <ESP_Get_Firmware+0xba>
	}
	while (!(Wait_for("\r\n\r\n", wifi_uart))) {
 8002144:	bf00      	nop
 8002146:	490a      	ldr	r1, [pc, #40]	; (8002170 <ESP_Get_Firmware+0xf4>)
 8002148:	4810      	ldr	r0, [pc, #64]	; (800218c <ESP_Get_Firmware+0x110>)
 800214a:	f7fe fff3 	bl	8001134 <Wait_for>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f8      	beq.n	8002146 <ESP_Get_Firmware+0xca>
	}
	while (!(Copy_upto_closed("CLOSED\r\n", buffer, wifi_uart))) {
 8002154:	bf00      	nop
 8002156:	4a06      	ldr	r2, [pc, #24]	; (8002170 <ESP_Get_Firmware+0xf4>)
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	480d      	ldr	r0, [pc, #52]	; (8002190 <ESP_Get_Firmware+0x114>)
 800215c:	f7fe ff20 	bl	8000fa0 <Copy_upto_closed>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f7      	beq.n	8002156 <ESP_Get_Firmware+0xda>
	}
}
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	37f8      	adds	r7, #248	; 0xf8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	2000115c 	.word	0x2000115c
 8002174:	08005160 	.word	0x08005160
 8002178:	0800519c 	.word	0x0800519c
 800217c:	080051a4 	.word	0x080051a4
 8002180:	08005204 	.word	0x08005204
 8002184:	08005214 	.word	0x08005214
 8002188:	08005218 	.word	0x08005218
 800218c:	08005224 	.word	0x08005224
 8002190:	0800522c 	.word	0x0800522c

08002194 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800219a:	f000 faff 	bl	800279c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800219e:	f000 f8c7 	bl	8002330 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80021a2:	f000 f977 	bl	8002494 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80021a6:	f000 f921 	bl	80023ec <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80021aa:	f000 f949 	bl	8002440 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	Ringbuf_init();
 80021ae:	f7fe fbf7 	bl	80009a0 <Ringbuf_init>
	print_pc("\r\nBootloader initiated\r\n");
 80021b2:	484e      	ldr	r0, [pc, #312]	; (80022ec <main+0x158>)
 80021b4:	f7ff fa68 	bl	8001688 <print_pc>
	ESP_Init(SSID, PASSWORD);
 80021b8:	494d      	ldr	r1, [pc, #308]	; (80022f0 <main+0x15c>)
 80021ba:	484e      	ldr	r0, [pc, #312]	; (80022f4 <main+0x160>)
 80021bc:	f7fe f9f6 	bl	80005ac <ESP_Init>
	print_pc("Connected to wifi\r\n");
 80021c0:	484d      	ldr	r0, [pc, #308]	; (80022f8 <main+0x164>)
 80021c2:	f7ff fa61 	bl	8001688 <print_pc>
	//get version
	memset(recv_buf, 0, sizeof(recv_buf));
 80021c6:	f247 5230 	movw	r2, #30000	; 0x7530
 80021ca:	2100      	movs	r1, #0
 80021cc:	484b      	ldr	r0, [pc, #300]	; (80022fc <main+0x168>)
 80021ce:	f002 fa67 	bl	80046a0 <memset>
	ESP_Get_Latest_Version((uint8_t*) recv_buf);
 80021d2:	484a      	ldr	r0, [pc, #296]	; (80022fc <main+0x168>)
 80021d4:	f7fe fa6e 	bl	80006b4 <ESP_Get_Latest_Version>
	print_pc("Got latest file name\r\n");
 80021d8:	4849      	ldr	r0, [pc, #292]	; (8002300 <main+0x16c>)
 80021da:	f7ff fa55 	bl	8001688 <print_pc>
	compare_version();
 80021de:	f7ff fea5 	bl	8001f2c <compare_version>
	memset(recv_buf, 0, sizeof(recv_buf));
 80021e2:	f247 5230 	movw	r2, #30000	; 0x7530
 80021e6:	2100      	movs	r1, #0
 80021e8:	4844      	ldr	r0, [pc, #272]	; (80022fc <main+0x168>)
 80021ea:	f002 fa59 	bl	80046a0 <memset>
	//uint32_t *FirmwareSlot = (uint32_t*) 0x0800C000;
	//uint32_t *FWSelect = (uint32_t*) 0x08010000;

	if (read_data(0x0800C000) == 0xFFFFFFFF) {
 80021ee:	4845      	ldr	r0, [pc, #276]	; (8002304 <main+0x170>)
 80021f0:	f7fe fb78 	bl	80008e4 <read_data>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fa:	d103      	bne.n	8002204 <main+0x70>
		Flash_Write_Data_Int(0x0800C000, 0x00000001);
 80021fc:	2101      	movs	r1, #1
 80021fe:	4841      	ldr	r0, [pc, #260]	; (8002304 <main+0x170>)
 8002200:	f7fe fb7e 	bl	8000900 <Flash_Write_Data_Int>
	}
	if (CountFirmwareSlot == 2) {
 8002204:	4b40      	ldr	r3, [pc, #256]	; (8002308 <main+0x174>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d10f      	bne.n	800222c <main+0x98>
		CountFirmwareSlot = 1;
 800220c:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <main+0x174>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]
		uint32_t check = read_data(0x0800C000) + 1;
 8002212:	483c      	ldr	r0, [pc, #240]	; (8002304 <main+0x170>)
 8002214:	f7fe fb66 	bl	80008e4 <read_data>
 8002218:	4603      	mov	r3, r0
 800221a:	3301      	adds	r3, #1
 800221c:	607b      	str	r3, [r7, #4]
		Flash_Erase(SECTOR_3);
 800221e:	4839      	ldr	r0, [pc, #228]	; (8002304 <main+0x170>)
 8002220:	f7fe fb86 	bl	8000930 <Flash_Erase>
		Flash_Write_Data_Int(0x0800C000, check);
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4837      	ldr	r0, [pc, #220]	; (8002304 <main+0x170>)
 8002228:	f7fe fb6a 	bl	8000900 <Flash_Write_Data_Int>
	}
	if (read_data(0x0800C000) % 2 == 0) {
 800222c:	4835      	ldr	r0, [pc, #212]	; (8002304 <main+0x170>)
 800222e:	f7fe fb59 	bl	80008e4 <read_data>
 8002232:	4603      	mov	r3, r0
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <main+0xb8>
		Flash_Erase(SECTOR_4);
 800223c:	4833      	ldr	r0, [pc, #204]	; (800230c <main+0x178>)
 800223e:	f7fe fb77 	bl	8000930 <Flash_Erase>
		Flash_Write_Data_Int(0x08010000, 0x00000002);
 8002242:	2102      	movs	r1, #2
 8002244:	4831      	ldr	r0, [pc, #196]	; (800230c <main+0x178>)
 8002246:	f7fe fb5b 	bl	8000900 <Flash_Write_Data_Int>
 800224a:	e00e      	b.n	800226a <main+0xd6>
	} else if (read_data(0x0800C000) % 2 != 0) {
 800224c:	482d      	ldr	r0, [pc, #180]	; (8002304 <main+0x170>)
 800224e:	f7fe fb49 	bl	80008e4 <read_data>
 8002252:	4603      	mov	r3, r0
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <main+0xd6>
		Flash_Erase(SECTOR_4);
 800225c:	482b      	ldr	r0, [pc, #172]	; (800230c <main+0x178>)
 800225e:	f7fe fb67 	bl	8000930 <Flash_Erase>
		Flash_Write_Data_Int(0x08010000, 0x00000001);
 8002262:	2101      	movs	r1, #1
 8002264:	4829      	ldr	r0, [pc, #164]	; (800230c <main+0x178>)
 8002266:	f7fe fb4b 	bl	8000900 <Flash_Write_Data_Int>
	}
	if (TriggerBase == 2) {
 800226a:	4b29      	ldr	r3, [pc, #164]	; (8002310 <main+0x17c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d106      	bne.n	8002280 <main+0xec>
		Flash_Erase(SECTOR_4);
 8002272:	4826      	ldr	r0, [pc, #152]	; (800230c <main+0x178>)
 8002274:	f7fe fb5c 	bl	8000930 <Flash_Erase>
		Flash_Write_Data_Int(0x08010000, 0x00000000);
 8002278:	2100      	movs	r1, #0
 800227a:	4824      	ldr	r0, [pc, #144]	; (800230c <main+0x178>)
 800227c:	f7fe fb40 	bl	8000900 <Flash_Write_Data_Int>
	}
	if (*FWSelect == 0x00000001) {
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <main+0x180>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d102      	bne.n	8002290 <main+0xfc>
		current_sector = SECTOR_5; // app1
 800228a:	4b23      	ldr	r3, [pc, #140]	; (8002318 <main+0x184>)
 800228c:	4a23      	ldr	r2, [pc, #140]	; (800231c <main+0x188>)
 800228e:	601a      	str	r2, [r3, #0]
	}
	if (*FWSelect == 0x00000002) {
 8002290:	4b20      	ldr	r3, [pc, #128]	; (8002314 <main+0x180>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d102      	bne.n	80022a0 <main+0x10c>
		current_sector = SECTOR_6; // ap2
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <main+0x184>)
 800229c:	4a20      	ldr	r2, [pc, #128]	; (8002320 <main+0x18c>)
 800229e:	601a      	str	r2, [r3, #0]
	}
	if (*FWSelect == 0x00000000) {
 80022a0:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <main+0x180>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <main+0x11c>
		current_sector = SECTOR_7; // current
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <main+0x184>)
 80022ac:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <main+0x190>)
 80022ae:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(1000);
 80022b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022b4:	f000 fb18 	bl	80028e8 <HAL_Delay>
	memset(recv_buf, 0, sizeof(recv_buf));
 80022b8:	f247 5230 	movw	r2, #30000	; 0x7530
 80022bc:	2100      	movs	r1, #0
 80022be:	480f      	ldr	r0, [pc, #60]	; (80022fc <main+0x168>)
 80022c0:	f002 f9ee 	bl	80046a0 <memset>
	ESP_Get_Firmware((uint8_t*) recv_buf);
 80022c4:	480d      	ldr	r0, [pc, #52]	; (80022fc <main+0x168>)
 80022c6:	f7ff fed9 	bl	800207c <ESP_Get_Firmware>
	print_pc("Downloaded firmware file\r\n");
 80022ca:	4817      	ldr	r0, [pc, #92]	; (8002328 <main+0x194>)
 80022cc:	f7ff f9dc 	bl	8001688 <print_pc>
	CopyandFlash(recv_buf, firmware_buf, current_sector);
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <main+0x184>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4915      	ldr	r1, [pc, #84]	; (800232c <main+0x198>)
 80022d8:	4808      	ldr	r0, [pc, #32]	; (80022fc <main+0x168>)
 80022da:	f7ff fbf7 	bl	8001acc <CopyandFlash>
	jump_to_app(current_sector);
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <main+0x184>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f8c4 	bl	8001470 <jump_to_app>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80022e8:	e7fe      	b.n	80022e8 <main+0x154>
 80022ea:	bf00      	nop
 80022ec:	08005238 	.word	0x08005238
 80022f0:	08005254 	.word	0x08005254
 80022f4:	08005260 	.word	0x08005260
 80022f8:	08005268 	.word	0x08005268
 80022fc:	200011e8 	.word	0x200011e8
 8002300:	0800527c 	.word	0x0800527c
 8002304:	0800c000 	.word	0x0800c000
 8002308:	20000000 	.word	0x20000000
 800230c:	08010000 	.word	0x08010000
 8002310:	20000004 	.word	0x20000004
 8002314:	20000008 	.word	0x20000008
 8002318:	2000878c 	.word	0x2000878c
 800231c:	08020000 	.word	0x08020000
 8002320:	08040000 	.word	0x08040000
 8002324:	08060000 	.word	0x08060000
 8002328:	08005294 	.word	0x08005294
 800232c:	20008718 	.word	0x20008718

08002330 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b094      	sub	sp, #80	; 0x50
 8002334:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002336:	f107 0320 	add.w	r3, r7, #32
 800233a:	2230      	movs	r2, #48	; 0x30
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f002 f9ae 	bl	80046a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002344:	f107 030c 	add.w	r3, r7, #12
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <SystemClock_Config+0xb4>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	4a21      	ldr	r2, [pc, #132]	; (80023e4 <SystemClock_Config+0xb4>)
 800235e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002362:	6413      	str	r3, [r2, #64]	; 0x40
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <SystemClock_Config+0xb4>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002370:	2300      	movs	r3, #0
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <SystemClock_Config+0xb8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <SystemClock_Config+0xb8>)
 800237a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <SystemClock_Config+0xb8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800238c:	2302      	movs	r3, #2
 800238e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002390:	2301      	movs	r3, #1
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002394:	2310      	movs	r3, #16
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002398:	2300      	movs	r3, #0
 800239a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800239c:	f107 0320 	add.w	r3, r7, #32
 80023a0:	4618      	mov	r0, r3
 80023a2:	f001 f84f 	bl	8003444 <HAL_RCC_OscConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <SystemClock_Config+0x80>
		Error_Handler();
 80023ac:	f000 f88c 	bl	80024c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80023b0:	230f      	movs	r3, #15
 80023b2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 fab2 	bl	8003934 <HAL_RCC_ClockConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0xaa>
		Error_Handler();
 80023d6:	f000 f877 	bl	80024c8 <Error_Handler>
	}
}
 80023da:	bf00      	nop
 80023dc:	3750      	adds	r7, #80	; 0x50
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40007000 	.word	0x40007000

080023ec <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 80023f2:	4a12      	ldr	r2, [pc, #72]	; (800243c <MX_USART1_UART_Init+0x50>)
 80023f4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 80023f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023fc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002412:	220c      	movs	r2, #12
 8002414:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002424:	f001 fd34 	bl	8003e90 <HAL_UART_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800242e:	f000 f84b 	bl	80024c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	2000115c 	.word	0x2000115c
 800243c:	40011000 	.word	0x40011000

08002440 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <MX_USART2_UART_Init+0x50>)
 8002448:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <MX_USART2_UART_Init+0x4c>)
 800244c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002450:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <MX_USART2_UART_Init+0x4c>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002466:	220c      	movs	r2, #12
 8002468:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <MX_USART2_UART_Init+0x4c>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002472:	2200      	movs	r2, #0
 8002474:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002476:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002478:	f001 fd0a 	bl	8003e90 <HAL_UART_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002482:	f000 f821 	bl	80024c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200011a0 	.word	0x200011a0
 8002490:	40004400 	.word	0x40004400

08002494 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <MX_GPIO_Init+0x30>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <MX_GPIO_Init+0x30>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <MX_GPIO_Init+0x30>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800

080024c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80024cc:	b672      	cpsid	i
}
 80024ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80024d0:	e7fe      	b.n	80024d0 <Error_Handler+0x8>
	...

080024d4 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_MspInit+0x4c>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <HAL_MspInit+0x4c>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_MspInit+0x4c>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_MspInit+0x4c>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a08      	ldr	r2, [pc, #32]	; (8002520 <HAL_MspInit+0x4c>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_MspInit+0x4c>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800

08002524 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b08c      	sub	sp, #48	; 0x30
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
	if (huart->Instance == USART1) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a3a      	ldr	r2, [pc, #232]	; (800262c <HAL_UART_MspInit+0x108>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d135      	bne.n	80025b2 <HAL_UART_MspInit+0x8e>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	4b39      	ldr	r3, [pc, #228]	; (8002630 <HAL_UART_MspInit+0x10c>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a38      	ldr	r2, [pc, #224]	; (8002630 <HAL_UART_MspInit+0x10c>)
 8002550:	f043 0310 	orr.w	r3, r3, #16
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_UART_MspInit+0x10c>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	4b32      	ldr	r3, [pc, #200]	; (8002630 <HAL_UART_MspInit+0x10c>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a31      	ldr	r2, [pc, #196]	; (8002630 <HAL_UART_MspInit+0x10c>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_UART_MspInit+0x10c>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697b      	ldr	r3, [r7, #20]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 800257e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002582:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	2303      	movs	r3, #3
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002590:	2307      	movs	r3, #7
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002594:	f107 031c 	add.w	r3, r7, #28
 8002598:	4619      	mov	r1, r3
 800259a:	4826      	ldr	r0, [pc, #152]	; (8002634 <HAL_UART_MspInit+0x110>)
 800259c:	f000 fdce 	bl	800313c <HAL_GPIO_Init>

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2100      	movs	r1, #0
 80025a4:	2025      	movs	r0, #37	; 0x25
 80025a6:	f000 fa9e 	bl	8002ae6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025aa:	2025      	movs	r0, #37	; 0x25
 80025ac:	f000 fab7 	bl	8002b1e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 80025b0:	e038      	b.n	8002624 <HAL_UART_MspInit+0x100>
	} else if (huart->Instance == USART2) {
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a20      	ldr	r2, [pc, #128]	; (8002638 <HAL_UART_MspInit+0x114>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d133      	bne.n	8002624 <HAL_UART_MspInit+0x100>
		__HAL_RCC_USART2_CLK_ENABLE();
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_UART_MspInit+0x10c>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	4a1a      	ldr	r2, [pc, #104]	; (8002630 <HAL_UART_MspInit+0x10c>)
 80025c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ca:	6413      	str	r3, [r2, #64]	; 0x40
 80025cc:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_UART_MspInit+0x10c>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_UART_MspInit+0x10c>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	4a13      	ldr	r2, [pc, #76]	; (8002630 <HAL_UART_MspInit+0x10c>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6313      	str	r3, [r2, #48]	; 0x30
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_UART_MspInit+0x10c>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80025f4:	230c      	movs	r3, #12
 80025f6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002604:	2307      	movs	r3, #7
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	4809      	ldr	r0, [pc, #36]	; (8002634 <HAL_UART_MspInit+0x110>)
 8002610:	f000 fd94 	bl	800313c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	2026      	movs	r0, #38	; 0x26
 800261a:	f000 fa64 	bl	8002ae6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 800261e:	2026      	movs	r0, #38	; 0x26
 8002620:	f000 fa7d 	bl	8002b1e <HAL_NVIC_EnableIRQ>
}
 8002624:	bf00      	nop
 8002626:	3730      	adds	r7, #48	; 0x30
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40011000 	.word	0x40011000
 8002630:	40023800 	.word	0x40023800
 8002634:	40020000 	.word	0x40020000
 8002638:	40004400 	.word	0x40004400

0800263c <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002640:	e7fe      	b.n	8002640 <NMI_Handler+0x4>

08002642 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8002646:	e7fe      	b.n	8002646 <HardFault_Handler+0x4>

08002648 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 800264c:	e7fe      	b.n	800264c <MemManage_Handler+0x4>

0800264e <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8002652:	e7fe      	b.n	8002652 <BusFault_Handler+0x4>

08002654 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8002658:	e7fe      	b.n	8002658 <UsageFault_Handler+0x4>

0800265a <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002688:	f000 f90e 	bl	80028a8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}

08002690 <USART1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <USART1_IRQHandler+0x10>)
 8002696:	f7fe fe31 	bl	80012fc <Uart_isr>
	/* USER CODE END USART1_IRQn 0 */
	// HAL_UART_IRQHandler(&huart1);
	/* USER CODE BEGIN USART1_IRQn 1 */
	/* USER CODE END USART1_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2000115c 	.word	0x2000115c

080026a4 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <USART2_IRQHandler+0x10>)
 80026aa:	f7fe fe27 	bl	80012fc <Uart_isr>
	/* USER CODE END USART2_IRQn 0 */
	//HAL_UART_IRQHandler(&huart2);
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200011a0 	.word	0x200011a0

080026b8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <_sbrk+0x64>)
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <_sbrk+0x68>)
 80026d8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d207      	bcs.n	80026f8 <_sbrk+0x40>
		errno = ENOMEM;
 80026e8:	f001 fff8 	bl	80046dc <__errno>
 80026ec:	4603      	mov	r3, r0
 80026ee:	220c      	movs	r2, #12
 80026f0:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	e009      	b.n	800270c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <_sbrk+0x64>)
 8002708:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20020000 	.word	0x20020000
 8002718:	00000400 	.word	0x00000400
 800271c:	200087c0 	.word	0x200087c0
 8002720:	20008930 	.word	0x20008930

08002724 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <SystemInit+0x20>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <SystemInit+0x20>)
 8002730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800274c:	480d      	ldr	r0, [pc, #52]	; (8002784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800274e:	490e      	ldr	r1, [pc, #56]	; (8002788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002750:	4a0e      	ldr	r2, [pc, #56]	; (800278c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002754:	e002      	b.n	800275c <LoopCopyDataInit>

08002756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800275a:	3304      	adds	r3, #4

0800275c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800275c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800275e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002760:	d3f9      	bcc.n	8002756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002762:	4a0b      	ldr	r2, [pc, #44]	; (8002790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002764:	4c0b      	ldr	r4, [pc, #44]	; (8002794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002768:	e001      	b.n	800276e <LoopFillZerobss>

0800276a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800276a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800276c:	3204      	adds	r2, #4

0800276e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800276e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002770:	d3fb      	bcc.n	800276a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002772:	f7ff ffd7 	bl	8002724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002776:	f001 ffb7 	bl	80046e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800277a:	f7ff fd0b 	bl	8002194 <main>
  bx  lr    
 800277e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002788:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800278c:	0800540c 	.word	0x0800540c
  ldr r2, =_sbss
 8002790:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002794:	20008930 	.word	0x20008930

08002798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002798:	e7fe      	b.n	8002798 <ADC_IRQHandler>
	...

0800279c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <HAL_Init+0x40>)
 80027a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_Init+0x40>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_Init+0x40>)
 80027b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_Init+0x40>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a07      	ldr	r2, [pc, #28]	; (80027dc <HAL_Init+0x40>)
 80027be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c4:	2003      	movs	r0, #3
 80027c6:	f000 f983 	bl	8002ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ca:	200f      	movs	r0, #15
 80027cc:	f000 f83c 	bl	8002848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d0:	f7ff fe80 	bl	80024d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023c00 	.word	0x40023c00

080027e0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80027e4:	4b13      	ldr	r3, [pc, #76]	; (8002834 <HAL_DeInit+0x54>)
 80027e6:	f04f 32ff 	mov.w	r2, #4294967295
 80027ea:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_DeInit+0x54>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_DeInit+0x54>)
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_DeInit+0x54>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <HAL_DeInit+0x54>)
 8002802:	f04f 32ff 	mov.w	r2, #4294967295
 8002806:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_DeInit+0x54>)
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_DeInit+0x54>)
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_DeInit+0x54>)
 8002818:	2200      	movs	r2, #0
 800281a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_DeInit+0x54>)
 800281e:	f04f 32ff 	mov.w	r2, #4294967295
 8002822:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_DeInit+0x54>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800282a:	f000 f805 	bl	8002838 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800

08002838 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_InitTick+0x54>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_InitTick+0x58>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800285e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f967 	bl	8002b3a <HAL_SYSTICK_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e00e      	b.n	8002894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b0f      	cmp	r3, #15
 800287a:	d80a      	bhi.n	8002892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800287c:	2200      	movs	r2, #0
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f000 f92f 	bl	8002ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002888:	4a06      	ldr	r2, [pc, #24]	; (80028a4 <HAL_InitTick+0x5c>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	2000000c 	.word	0x2000000c
 80028a0:	20000014 	.word	0x20000014
 80028a4:	20000010 	.word	0x20000010

080028a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_IncTick+0x20>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_IncTick+0x24>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	4a04      	ldr	r2, [pc, #16]	; (80028cc <HAL_IncTick+0x24>)
 80028ba:	6013      	str	r3, [r2, #0]
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000014 	.word	0x20000014
 80028cc:	200087c4 	.word	0x200087c4

080028d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return uwTick;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_GetTick+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	200087c4 	.word	0x200087c4

080028e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff ffee 	bl	80028d0 <HAL_GetTick>
 80028f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d005      	beq.n	800290e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_Delay+0x44>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800290e:	bf00      	nop
 8002910:	f7ff ffde 	bl	80028d0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	429a      	cmp	r2, r3
 800291e:	d8f7      	bhi.n	8002910 <HAL_Delay+0x28>
  {
  }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000014 	.word	0x20000014

08002930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800294c:	4013      	ands	r3, r2
 800294e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800295c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002962:	4a04      	ldr	r2, [pc, #16]	; (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	60d3      	str	r3, [r2, #12]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800297c:	4b04      	ldr	r3, [pc, #16]	; (8002990 <__NVIC_GetPriorityGrouping+0x18>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	f003 0307 	and.w	r3, r3, #7
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	db0b      	blt.n	80029be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	4907      	ldr	r1, [pc, #28]	; (80029cc <__NVIC_EnableIRQ+0x38>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	2001      	movs	r0, #1
 80029b6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000e100 	.word	0xe000e100

080029d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	db0a      	blt.n	80029fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	490c      	ldr	r1, [pc, #48]	; (8002a1c <__NVIC_SetPriority+0x4c>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	0112      	lsls	r2, r2, #4
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	440b      	add	r3, r1
 80029f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f8:	e00a      	b.n	8002a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4908      	ldr	r1, [pc, #32]	; (8002a20 <__NVIC_SetPriority+0x50>)
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	3b04      	subs	r3, #4
 8002a08:	0112      	lsls	r2, r2, #4
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	761a      	strb	r2, [r3, #24]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000e100 	.word	0xe000e100
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f1c3 0307 	rsb	r3, r3, #7
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	bf28      	it	cs
 8002a42:	2304      	movcs	r3, #4
 8002a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	2b06      	cmp	r3, #6
 8002a4c:	d902      	bls.n	8002a54 <NVIC_EncodePriority+0x30>
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3b03      	subs	r3, #3
 8002a52:	e000      	b.n	8002a56 <NVIC_EncodePriority+0x32>
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	f04f 32ff 	mov.w	r2, #4294967295
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43da      	mvns	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	401a      	ands	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	43d9      	mvns	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	4313      	orrs	r3, r2
         );
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3724      	adds	r7, #36	; 0x24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a9c:	d301      	bcc.n	8002aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00f      	b.n	8002ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <SysTick_Config+0x40>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aaa:	210f      	movs	r1, #15
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab0:	f7ff ff8e 	bl	80029d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <SysTick_Config+0x40>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aba:	4b04      	ldr	r3, [pc, #16]	; (8002acc <SysTick_Config+0x40>)
 8002abc:	2207      	movs	r2, #7
 8002abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	e000e010 	.word	0xe000e010

08002ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ff29 	bl	8002930 <__NVIC_SetPriorityGrouping>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b086      	sub	sp, #24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	4603      	mov	r3, r0
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af8:	f7ff ff3e 	bl	8002978 <__NVIC_GetPriorityGrouping>
 8002afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	6978      	ldr	r0, [r7, #20]
 8002b04:	f7ff ff8e 	bl	8002a24 <NVIC_EncodePriority>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff5d 	bl	80029d0 <__NVIC_SetPriority>
}
 8002b16:	bf00      	nop
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff31 	bl	8002994 <__NVIC_EnableIRQ>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ffa2 	bl	8002a8c <SysTick_Config>
 8002b48:	4603      	mov	r3, r0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b66:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <HAL_FLASH_Program+0xa0>)
 8002b68:	7e1b      	ldrb	r3, [r3, #24]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_FLASH_Program+0x1e>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e03b      	b.n	8002bea <HAL_FLASH_Program+0x96>
 8002b72:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_FLASH_Program+0xa0>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b7c:	f000 f87c 	bl	8002c78 <FLASH_WaitForLastOperation>
 8002b80:	4603      	mov	r3, r0
 8002b82:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d12b      	bne.n	8002be2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002b90:	783b      	ldrb	r3, [r7, #0]
 8002b92:	4619      	mov	r1, r3
 8002b94:	68b8      	ldr	r0, [r7, #8]
 8002b96:	f000 f927 	bl	8002de8 <FLASH_Program_Byte>
 8002b9a:	e016      	b.n	8002bca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d105      	bne.n	8002bae <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002ba2:	883b      	ldrh	r3, [r7, #0]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	68b8      	ldr	r0, [r7, #8]
 8002ba8:	f000 f8fa 	bl	8002da0 <FLASH_Program_HalfWord>
 8002bac:	e00d      	b.n	8002bca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d105      	bne.n	8002bc0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	68b8      	ldr	r0, [r7, #8]
 8002bba:	f000 f8cf 	bl	8002d5c <FLASH_Program_Word>
 8002bbe:	e004      	b.n	8002bca <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bc4:	68b8      	ldr	r0, [r7, #8]
 8002bc6:	f000 f897 	bl	8002cf8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bce:	f000 f853 	bl	8002c78 <FLASH_WaitForLastOperation>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_FLASH_Program+0xa4>)
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <HAL_FLASH_Program+0xa4>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <HAL_FLASH_Program+0xa0>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200087c8 	.word	0x200087c8
 8002bf8:	40023c00 	.word	0x40023c00

08002bfc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_FLASH_Unlock+0x38>)
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	da0b      	bge.n	8002c26 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <HAL_FLASH_Unlock+0x38>)
 8002c10:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <HAL_FLASH_Unlock+0x3c>)
 8002c12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <HAL_FLASH_Unlock+0x38>)
 8002c16:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <HAL_FLASH_Unlock+0x40>)
 8002c18:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_FLASH_Unlock+0x38>)
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	da01      	bge.n	8002c26 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002c26:	79fb      	ldrb	r3, [r7, #7]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40023c00 	.word	0x40023c00
 8002c38:	45670123 	.word	0x45670123
 8002c3c:	cdef89ab 	.word	0xcdef89ab

08002c40 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_FLASH_Lock+0x1c>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <HAL_FLASH_Lock+0x1c>)
 8002c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c4e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	40023c00 	.word	0x40023c00

08002c60 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <HAL_FLASH_GetError+0x14>)
 8002c66:	69db      	ldr	r3, [r3, #28]
}  
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	200087c8 	.word	0x200087c8

08002c78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c84:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <FLASH_WaitForLastOperation+0x78>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002c8a:	f7ff fe21 	bl	80028d0 <HAL_GetTick>
 8002c8e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002c90:	e010      	b.n	8002cb4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d00c      	beq.n	8002cb4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <FLASH_WaitForLastOperation+0x38>
 8002ca0:	f7ff fe16 	bl	80028d0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d201      	bcs.n	8002cb4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e019      	b.n	8002ce8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <FLASH_WaitForLastOperation+0x7c>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e8      	bne.n	8002c92 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <FLASH_WaitForLastOperation+0x7c>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <FLASH_WaitForLastOperation+0x7c>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <FLASH_WaitForLastOperation+0x7c>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002cde:	f000 f8a5 	bl	8002e2c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
  
}  
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	200087c8 	.word	0x200087c8
 8002cf4:	40023c00 	.word	0x40023c00

08002cf8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d04:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <FLASH_Program_DoubleWord+0x60>)
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <FLASH_Program_DoubleWord+0x60>)
 8002d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <FLASH_Program_DoubleWord+0x60>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	4a10      	ldr	r2, [pc, #64]	; (8002d58 <FLASH_Program_DoubleWord+0x60>)
 8002d16:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002d1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <FLASH_Program_DoubleWord+0x60>)
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	4a0d      	ldr	r2, [pc, #52]	; (8002d58 <FLASH_Program_DoubleWord+0x60>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002d2e:	f3bf 8f6f 	isb	sy
}
 8002d32:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002d34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	000a      	movs	r2, r1
 8002d42:	2300      	movs	r3, #0
 8002d44:	68f9      	ldr	r1, [r7, #12]
 8002d46:	3104      	adds	r1, #4
 8002d48:	4613      	mov	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	40023c00 	.word	0x40023c00

08002d5c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <FLASH_Program_Word+0x40>)
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <FLASH_Program_Word+0x40>)
 8002d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <FLASH_Program_Word+0x40>)
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	4a09      	ldr	r2, [pc, #36]	; (8002d9c <FLASH_Program_Word+0x40>)
 8002d78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <FLASH_Program_Word+0x40>)
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	4a06      	ldr	r2, [pc, #24]	; (8002d9c <FLASH_Program_Word+0x40>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	601a      	str	r2, [r3, #0]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40023c00 	.word	0x40023c00

08002da0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002dac:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <FLASH_Program_HalfWord+0x44>)
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	4a0c      	ldr	r2, [pc, #48]	; (8002de4 <FLASH_Program_HalfWord+0x44>)
 8002db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <FLASH_Program_HalfWord+0x44>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <FLASH_Program_HalfWord+0x44>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002dc4:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <FLASH_Program_HalfWord+0x44>)
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	4a06      	ldr	r2, [pc, #24]	; (8002de4 <FLASH_Program_HalfWord+0x44>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	801a      	strh	r2, [r3, #0]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40023c00 	.word	0x40023c00

08002de8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <FLASH_Program_Byte+0x40>)
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	4a0b      	ldr	r2, [pc, #44]	; (8002e28 <FLASH_Program_Byte+0x40>)
 8002dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <FLASH_Program_Byte+0x40>)
 8002e02:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <FLASH_Program_Byte+0x40>)
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e08:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <FLASH_Program_Byte+0x40>)
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <FLASH_Program_Byte+0x40>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	701a      	strb	r2, [r3, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40023c00 	.word	0x40023c00

08002e2c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002e30:	4b2f      	ldr	r3, [pc, #188]	; (8002ef0 <FLASH_SetErrorCode+0xc4>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <FLASH_SetErrorCode+0xc8>)
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f043 0310 	orr.w	r3, r3, #16
 8002e44:	4a2b      	ldr	r2, [pc, #172]	; (8002ef4 <FLASH_SetErrorCode+0xc8>)
 8002e46:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002e48:	4b29      	ldr	r3, [pc, #164]	; (8002ef0 <FLASH_SetErrorCode+0xc4>)
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <FLASH_SetErrorCode+0xc4>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <FLASH_SetErrorCode+0xc8>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f043 0308 	orr.w	r3, r3, #8
 8002e62:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <FLASH_SetErrorCode+0xc8>)
 8002e64:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002e66:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <FLASH_SetErrorCode+0xc4>)
 8002e68:	2220      	movs	r2, #32
 8002e6a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002e6c:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <FLASH_SetErrorCode+0xc4>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002e78:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <FLASH_SetErrorCode+0xc8>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f043 0304 	orr.w	r3, r3, #4
 8002e80:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <FLASH_SetErrorCode+0xc8>)
 8002e82:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002e84:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <FLASH_SetErrorCode+0xc4>)
 8002e86:	2240      	movs	r2, #64	; 0x40
 8002e88:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002e8a:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <FLASH_SetErrorCode+0xc4>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <FLASH_SetErrorCode+0xc8>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <FLASH_SetErrorCode+0xc8>)
 8002ea0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002ea2:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <FLASH_SetErrorCode+0xc4>)
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <FLASH_SetErrorCode+0xc4>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <FLASH_SetErrorCode+0xc8>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <FLASH_SetErrorCode+0xc8>)
 8002ebe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <FLASH_SetErrorCode+0xc4>)
 8002ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ec6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <FLASH_SetErrorCode+0xc4>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <FLASH_SetErrorCode+0xc8>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f043 0320 	orr.w	r3, r3, #32
 8002edc:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <FLASH_SetErrorCode+0xc8>)
 8002ede:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <FLASH_SetErrorCode+0xc4>)
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	60da      	str	r2, [r3, #12]
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40023c00 	.word	0x40023c00
 8002ef4:	200087c8 	.word	0x200087c8

08002ef8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f0a:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <HAL_FLASHEx_Erase+0xd8>)
 8002f0c:	7e1b      	ldrb	r3, [r3, #24]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_FLASHEx_Erase+0x1e>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e058      	b.n	8002fc8 <HAL_FLASHEx_Erase+0xd0>
 8002f16:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <HAL_FLASHEx_Erase+0xd8>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f20:	f7ff feaa 	bl	8002c78 <FLASH_WaitForLastOperation>
 8002f24:	4603      	mov	r3, r0
 8002f26:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d148      	bne.n	8002fc0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295
 8002f34:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d115      	bne.n	8002f6a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f000 f844 	bl	8002fd8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f54:	f7ff fe90 	bl	8002c78 <FLASH_WaitForLastOperation>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <HAL_FLASHEx_Erase+0xdc>)
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	4a1c      	ldr	r2, [pc, #112]	; (8002fd4 <HAL_FLASHEx_Erase+0xdc>)
 8002f62:	f023 0304 	bic.w	r3, r3, #4
 8002f66:	6113      	str	r3, [r2, #16]
 8002f68:	e028      	b.n	8002fbc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	e01c      	b.n	8002fac <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	4619      	mov	r1, r3
 8002f7a:	68b8      	ldr	r0, [r7, #8]
 8002f7c:	f000 f850 	bl	8003020 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f84:	f7ff fe78 	bl	8002c78 <FLASH_WaitForLastOperation>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_FLASHEx_Erase+0xdc>)
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <HAL_FLASHEx_Erase+0xdc>)
 8002f92:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002f96:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	601a      	str	r2, [r3, #0]
          break;
 8002fa4:	e00a      	b.n	8002fbc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d3da      	bcc.n	8002f72 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002fbc:	f000 f878 	bl	80030b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <HAL_FLASHEx_Erase+0xd8>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	761a      	strb	r2, [r3, #24]

  return status;
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	200087c8 	.word	0x200087c8
 8002fd4:	40023c00 	.word	0x40023c00

08002fd8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6039      	str	r1, [r7, #0]
 8002fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002fe4:	4b0d      	ldr	r3, [pc, #52]	; (800301c <FLASH_MassErase+0x44>)
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	4a0c      	ldr	r2, [pc, #48]	; (800301c <FLASH_MassErase+0x44>)
 8002fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <FLASH_MassErase+0x44>)
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	4a09      	ldr	r2, [pc, #36]	; (800301c <FLASH_MassErase+0x44>)
 8002ff6:	f043 0304 	orr.w	r3, r3, #4
 8002ffa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <FLASH_MassErase+0x44>)
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	4313      	orrs	r3, r2
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <FLASH_MassErase+0x44>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	6113      	str	r3, [r2, #16]
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40023c00 	.word	0x40023c00

08003020 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	e010      	b.n	800305e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d103      	bne.n	800304a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e009      	b.n	800305e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d103      	bne.n	8003058 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e002      	b.n	800305e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003058:	f44f 7340 	mov.w	r3, #768	; 0x300
 800305c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800305e:	4b13      	ldr	r3, [pc, #76]	; (80030ac <FLASH_Erase_Sector+0x8c>)
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	4a12      	ldr	r2, [pc, #72]	; (80030ac <FLASH_Erase_Sector+0x8c>)
 8003064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003068:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <FLASH_Erase_Sector+0x8c>)
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	490f      	ldr	r1, [pc, #60]	; (80030ac <FLASH_Erase_Sector+0x8c>)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003076:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <FLASH_Erase_Sector+0x8c>)
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	4a0c      	ldr	r2, [pc, #48]	; (80030ac <FLASH_Erase_Sector+0x8c>)
 800307c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003080:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <FLASH_Erase_Sector+0x8c>)
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4313      	orrs	r3, r2
 800308c:	4a07      	ldr	r2, [pc, #28]	; (80030ac <FLASH_Erase_Sector+0x8c>)
 800308e:	f043 0302 	orr.w	r3, r3, #2
 8003092:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <FLASH_Erase_Sector+0x8c>)
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <FLASH_Erase_Sector+0x8c>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309e:	6113      	str	r3, [r2, #16]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	40023c00 	.word	0x40023c00

080030b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <FLASH_FlushCaches+0x88>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d017      	beq.n	80030f0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <FLASH_FlushCaches+0x88>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <FLASH_FlushCaches+0x88>)
 80030c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030ca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80030cc:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <FLASH_FlushCaches+0x88>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a19      	ldr	r2, [pc, #100]	; (8003138 <FLASH_FlushCaches+0x88>)
 80030d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b17      	ldr	r3, [pc, #92]	; (8003138 <FLASH_FlushCaches+0x88>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a16      	ldr	r2, [pc, #88]	; (8003138 <FLASH_FlushCaches+0x88>)
 80030de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030e2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030e4:	4b14      	ldr	r3, [pc, #80]	; (8003138 <FLASH_FlushCaches+0x88>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a13      	ldr	r2, [pc, #76]	; (8003138 <FLASH_FlushCaches+0x88>)
 80030ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <FLASH_FlushCaches+0x88>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d017      	beq.n	800312c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80030fc:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <FLASH_FlushCaches+0x88>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <FLASH_FlushCaches+0x88>)
 8003102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003106:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <FLASH_FlushCaches+0x88>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <FLASH_FlushCaches+0x88>)
 800310e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <FLASH_FlushCaches+0x88>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a07      	ldr	r2, [pc, #28]	; (8003138 <FLASH_FlushCaches+0x88>)
 800311a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800311e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <FLASH_FlushCaches+0x88>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a04      	ldr	r2, [pc, #16]	; (8003138 <FLASH_FlushCaches+0x88>)
 8003126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800312a:	6013      	str	r3, [r2, #0]
  }
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40023c00 	.word	0x40023c00

0800313c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	e159      	b.n	800340c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003158:	2201      	movs	r2, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	429a      	cmp	r2, r3
 8003172:	f040 8148 	bne.w	8003406 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d005      	beq.n	800318e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800318a:	2b02      	cmp	r3, #2
 800318c:	d130      	bne.n	80031f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	2203      	movs	r2, #3
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c4:	2201      	movs	r2, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 0201 	and.w	r2, r3, #1
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d017      	beq.n	800322c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d123      	bne.n	8003280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	08da      	lsrs	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3208      	adds	r2, #8
 8003240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	220f      	movs	r2, #15
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	08da      	lsrs	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3208      	adds	r2, #8
 800327a:	69b9      	ldr	r1, [r7, #24]
 800327c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0203 	and.w	r2, r3, #3
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80a2 	beq.w	8003406 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	4b57      	ldr	r3, [pc, #348]	; (8003424 <HAL_GPIO_Init+0x2e8>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	4a56      	ldr	r2, [pc, #344]	; (8003424 <HAL_GPIO_Init+0x2e8>)
 80032cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d0:	6453      	str	r3, [r2, #68]	; 0x44
 80032d2:	4b54      	ldr	r3, [pc, #336]	; (8003424 <HAL_GPIO_Init+0x2e8>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032de:	4a52      	ldr	r2, [pc, #328]	; (8003428 <HAL_GPIO_Init+0x2ec>)
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	089b      	lsrs	r3, r3, #2
 80032e4:	3302      	adds	r3, #2
 80032e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	220f      	movs	r2, #15
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a49      	ldr	r2, [pc, #292]	; (800342c <HAL_GPIO_Init+0x2f0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d019      	beq.n	800333e <HAL_GPIO_Init+0x202>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a48      	ldr	r2, [pc, #288]	; (8003430 <HAL_GPIO_Init+0x2f4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <HAL_GPIO_Init+0x1fe>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a47      	ldr	r2, [pc, #284]	; (8003434 <HAL_GPIO_Init+0x2f8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00d      	beq.n	8003336 <HAL_GPIO_Init+0x1fa>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a46      	ldr	r2, [pc, #280]	; (8003438 <HAL_GPIO_Init+0x2fc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <HAL_GPIO_Init+0x1f6>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a45      	ldr	r2, [pc, #276]	; (800343c <HAL_GPIO_Init+0x300>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_GPIO_Init+0x1f2>
 800332a:	2304      	movs	r3, #4
 800332c:	e008      	b.n	8003340 <HAL_GPIO_Init+0x204>
 800332e:	2307      	movs	r3, #7
 8003330:	e006      	b.n	8003340 <HAL_GPIO_Init+0x204>
 8003332:	2303      	movs	r3, #3
 8003334:	e004      	b.n	8003340 <HAL_GPIO_Init+0x204>
 8003336:	2302      	movs	r3, #2
 8003338:	e002      	b.n	8003340 <HAL_GPIO_Init+0x204>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <HAL_GPIO_Init+0x204>
 800333e:	2300      	movs	r3, #0
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	f002 0203 	and.w	r2, r2, #3
 8003346:	0092      	lsls	r2, r2, #2
 8003348:	4093      	lsls	r3, r2
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003350:	4935      	ldr	r1, [pc, #212]	; (8003428 <HAL_GPIO_Init+0x2ec>)
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	3302      	adds	r3, #2
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <HAL_GPIO_Init+0x304>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003382:	4a2f      	ldr	r2, [pc, #188]	; (8003440 <HAL_GPIO_Init+0x304>)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003388:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <HAL_GPIO_Init+0x304>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033ac:	4a24      	ldr	r2, [pc, #144]	; (8003440 <HAL_GPIO_Init+0x304>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033b2:	4b23      	ldr	r3, [pc, #140]	; (8003440 <HAL_GPIO_Init+0x304>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033d6:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <HAL_GPIO_Init+0x304>)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033dc:	4b18      	ldr	r3, [pc, #96]	; (8003440 <HAL_GPIO_Init+0x304>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003400:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <HAL_GPIO_Init+0x304>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3301      	adds	r3, #1
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	f67f aea2 	bls.w	8003158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	3724      	adds	r7, #36	; 0x24
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	40013800 	.word	0x40013800
 800342c:	40020000 	.word	0x40020000
 8003430:	40020400 	.word	0x40020400
 8003434:	40020800 	.word	0x40020800
 8003438:	40020c00 	.word	0x40020c00
 800343c:	40021000 	.word	0x40021000
 8003440:	40013c00 	.word	0x40013c00

08003444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e267      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d075      	beq.n	800354e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003462:	4b88      	ldr	r3, [pc, #544]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b04      	cmp	r3, #4
 800346c:	d00c      	beq.n	8003488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346e:	4b85      	ldr	r3, [pc, #532]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003476:	2b08      	cmp	r3, #8
 8003478:	d112      	bne.n	80034a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347a:	4b82      	ldr	r3, [pc, #520]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003486:	d10b      	bne.n	80034a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	4b7e      	ldr	r3, [pc, #504]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d05b      	beq.n	800354c <HAL_RCC_OscConfig+0x108>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d157      	bne.n	800354c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e242      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d106      	bne.n	80034b8 <HAL_RCC_OscConfig+0x74>
 80034aa:	4b76      	ldr	r3, [pc, #472]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a75      	ldr	r2, [pc, #468]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	e01d      	b.n	80034f4 <HAL_RCC_OscConfig+0xb0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c0:	d10c      	bne.n	80034dc <HAL_RCC_OscConfig+0x98>
 80034c2:	4b70      	ldr	r3, [pc, #448]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a6f      	ldr	r2, [pc, #444]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	4b6d      	ldr	r3, [pc, #436]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a6c      	ldr	r2, [pc, #432]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e00b      	b.n	80034f4 <HAL_RCC_OscConfig+0xb0>
 80034dc:	4b69      	ldr	r3, [pc, #420]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a68      	ldr	r2, [pc, #416]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b66      	ldr	r3, [pc, #408]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a65      	ldr	r2, [pc, #404]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d013      	beq.n	8003524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7ff f9e8 	bl	80028d0 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003504:	f7ff f9e4 	bl	80028d0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	; 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e207      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	4b5b      	ldr	r3, [pc, #364]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0xc0>
 8003522:	e014      	b.n	800354e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7ff f9d4 	bl	80028d0 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800352c:	f7ff f9d0 	bl	80028d0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e1f3      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353e:	4b51      	ldr	r3, [pc, #324]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0xe8>
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800354c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d063      	beq.n	8003622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800355a:	4b4a      	ldr	r3, [pc, #296]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00b      	beq.n	800357e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800356e:	2b08      	cmp	r3, #8
 8003570:	d11c      	bne.n	80035ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003572:	4b44      	ldr	r3, [pc, #272]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d116      	bne.n	80035ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357e:	4b41      	ldr	r3, [pc, #260]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_RCC_OscConfig+0x152>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d001      	beq.n	8003596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e1c7      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003596:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4937      	ldr	r1, [pc, #220]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035aa:	e03a      	b.n	8003622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d020      	beq.n	80035f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b4:	4b34      	ldr	r3, [pc, #208]	; (8003688 <HAL_RCC_OscConfig+0x244>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7ff f989 	bl	80028d0 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c2:	f7ff f985 	bl	80028d0 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e1a8      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d4:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e0:	4b28      	ldr	r3, [pc, #160]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4925      	ldr	r1, [pc, #148]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	600b      	str	r3, [r1, #0]
 80035f4:	e015      	b.n	8003622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCC_OscConfig+0x244>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7ff f968 	bl	80028d0 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003604:	f7ff f964 	bl	80028d0 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e187      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003616:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d036      	beq.n	800369c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d016      	beq.n	8003664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <HAL_RCC_OscConfig+0x248>)
 8003638:	2201      	movs	r2, #1
 800363a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7ff f948 	bl	80028d0 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003644:	f7ff f944 	bl	80028d0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e167      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x200>
 8003662:	e01b      	b.n	800369c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <HAL_RCC_OscConfig+0x248>)
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366a:	f7ff f931 	bl	80028d0 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003670:	e00e      	b.n	8003690 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003672:	f7ff f92d 	bl	80028d0 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d907      	bls.n	8003690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e150      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
 8003684:	40023800 	.word	0x40023800
 8003688:	42470000 	.word	0x42470000
 800368c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003690:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ea      	bne.n	8003672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8097 	beq.w	80037d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036aa:	2300      	movs	r3, #0
 80036ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ae:	4b81      	ldr	r3, [pc, #516]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10f      	bne.n	80036da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	4b7d      	ldr	r3, [pc, #500]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	4a7c      	ldr	r2, [pc, #496]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ca:	4b7a      	ldr	r3, [pc, #488]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036da:	4b77      	ldr	r3, [pc, #476]	; (80038b8 <HAL_RCC_OscConfig+0x474>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d118      	bne.n	8003718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036e6:	4b74      	ldr	r3, [pc, #464]	; (80038b8 <HAL_RCC_OscConfig+0x474>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a73      	ldr	r2, [pc, #460]	; (80038b8 <HAL_RCC_OscConfig+0x474>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f2:	f7ff f8ed 	bl	80028d0 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fa:	f7ff f8e9 	bl	80028d0 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e10c      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370c:	4b6a      	ldr	r3, [pc, #424]	; (80038b8 <HAL_RCC_OscConfig+0x474>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d106      	bne.n	800372e <HAL_RCC_OscConfig+0x2ea>
 8003720:	4b64      	ldr	r3, [pc, #400]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	4a63      	ldr	r2, [pc, #396]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6713      	str	r3, [r2, #112]	; 0x70
 800372c:	e01c      	b.n	8003768 <HAL_RCC_OscConfig+0x324>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b05      	cmp	r3, #5
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0x30c>
 8003736:	4b5f      	ldr	r3, [pc, #380]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	4a5e      	ldr	r2, [pc, #376]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 800373c:	f043 0304 	orr.w	r3, r3, #4
 8003740:	6713      	str	r3, [r2, #112]	; 0x70
 8003742:	4b5c      	ldr	r3, [pc, #368]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a5b      	ldr	r2, [pc, #364]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	e00b      	b.n	8003768 <HAL_RCC_OscConfig+0x324>
 8003750:	4b58      	ldr	r3, [pc, #352]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	4a57      	ldr	r2, [pc, #348]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	6713      	str	r3, [r2, #112]	; 0x70
 800375c:	4b55      	ldr	r3, [pc, #340]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	4a54      	ldr	r2, [pc, #336]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003762:	f023 0304 	bic.w	r3, r3, #4
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d015      	beq.n	800379c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003770:	f7ff f8ae 	bl	80028d0 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003776:	e00a      	b.n	800378e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003778:	f7ff f8aa 	bl	80028d0 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e0cb      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378e:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0ee      	beq.n	8003778 <HAL_RCC_OscConfig+0x334>
 800379a:	e014      	b.n	80037c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379c:	f7ff f898 	bl	80028d0 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7ff f894 	bl	80028d0 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e0b5      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ba:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ee      	bne.n	80037a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d105      	bne.n	80037d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037cc:	4b39      	ldr	r3, [pc, #228]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	4a38      	ldr	r2, [pc, #224]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80a1 	beq.w	8003924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037e2:	4b34      	ldr	r3, [pc, #208]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d05c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d141      	bne.n	800387a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f6:	4b31      	ldr	r3, [pc, #196]	; (80038bc <HAL_RCC_OscConfig+0x478>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7ff f868 	bl	80028d0 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003804:	f7ff f864 	bl	80028d0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e087      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003816:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	019b      	lsls	r3, r3, #6
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	085b      	lsrs	r3, r3, #1
 800383a:	3b01      	subs	r3, #1
 800383c:	041b      	lsls	r3, r3, #16
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	491b      	ldr	r1, [pc, #108]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800384c:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <HAL_RCC_OscConfig+0x478>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7ff f83d 	bl	80028d0 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385a:	f7ff f839 	bl	80028d0 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e05c      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x416>
 8003878:	e054      	b.n	8003924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <HAL_RCC_OscConfig+0x478>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7ff f826 	bl	80028d0 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003888:	f7ff f822 	bl	80028d0 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e045      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x444>
 80038a6:	e03d      	b.n	8003924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e038      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40007000 	.word	0x40007000
 80038bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <HAL_RCC_OscConfig+0x4ec>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d028      	beq.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d121      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d11a      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038f0:	4013      	ands	r3, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d111      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	3b01      	subs	r3, #1
 800390a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d107      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800

08003934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0cc      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003948:	4b68      	ldr	r3, [pc, #416]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d90c      	bls.n	8003970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b65      	ldr	r3, [pc, #404]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b63      	ldr	r3, [pc, #396]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0b8      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003988:	4b59      	ldr	r3, [pc, #356]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a58      	ldr	r2, [pc, #352]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a0:	4b53      	ldr	r3, [pc, #332]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4a52      	ldr	r2, [pc, #328]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ac:	4b50      	ldr	r3, [pc, #320]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	494d      	ldr	r1, [pc, #308]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d044      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b47      	ldr	r3, [pc, #284]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d119      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e07f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d003      	beq.n	80039f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d107      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f2:	4b3f      	ldr	r3, [pc, #252]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e06f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a02:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e067      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a12:	4b37      	ldr	r3, [pc, #220]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f023 0203 	bic.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4934      	ldr	r1, [pc, #208]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a24:	f7fe ff54 	bl	80028d0 <HAL_GetTick>
 8003a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a2c:	f7fe ff50 	bl	80028d0 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e04f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a42:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 020c 	and.w	r2, r3, #12
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d1eb      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d20c      	bcs.n	8003a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b22      	ldr	r3, [pc, #136]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e032      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4916      	ldr	r1, [pc, #88]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aa6:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	490e      	ldr	r1, [pc, #56]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aba:	f000 f821 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	490a      	ldr	r1, [pc, #40]	; (8003af4 <HAL_RCC_ClockConfig+0x1c0>)
 8003acc:	5ccb      	ldrb	r3, [r1, r3]
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	4a09      	ldr	r2, [pc, #36]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HAL_RCC_ClockConfig+0x1c8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe feb4 	bl	8002848 <HAL_InitTick>

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40023c00 	.word	0x40023c00
 8003af0:	40023800 	.word	0x40023800
 8003af4:	080052b0 	.word	0x080052b0
 8003af8:	2000000c 	.word	0x2000000c
 8003afc:	20000010 	.word	0x20000010

08003b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b04:	b090      	sub	sp, #64	; 0x40
 8003b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b10:	2300      	movs	r3, #0
 8003b12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b18:	4b59      	ldr	r3, [pc, #356]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d00d      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x40>
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	f200 80a1 	bhi.w	8003c6c <HAL_RCC_GetSysClockFreq+0x16c>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x34>
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d003      	beq.n	8003b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b32:	e09b      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b38:	e09b      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b3a:	4b53      	ldr	r3, [pc, #332]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b3e:	e098      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b40:	4b4f      	ldr	r3, [pc, #316]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b4a:	4b4d      	ldr	r3, [pc, #308]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d028      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b56:	4b4a      	ldr	r3, [pc, #296]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	099b      	lsrs	r3, r3, #6
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	623b      	str	r3, [r7, #32]
 8003b60:	627a      	str	r2, [r7, #36]	; 0x24
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4b47      	ldr	r3, [pc, #284]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b6c:	fb03 f201 	mul.w	r2, r3, r1
 8003b70:	2300      	movs	r3, #0
 8003b72:	fb00 f303 	mul.w	r3, r0, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	4a43      	ldr	r2, [pc, #268]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b7a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b80:	460a      	mov	r2, r1
 8003b82:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b86:	4413      	add	r3, r2
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	61fa      	str	r2, [r7, #28]
 8003b92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b9a:	f7fc fb89 	bl	80002b0 <__aeabi_uldivmod>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba6:	e053      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba8:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	099b      	lsrs	r3, r3, #6
 8003bae:	2200      	movs	r2, #0
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	617a      	str	r2, [r7, #20]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bba:	f04f 0b00 	mov.w	fp, #0
 8003bbe:	4652      	mov	r2, sl
 8003bc0:	465b      	mov	r3, fp
 8003bc2:	f04f 0000 	mov.w	r0, #0
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	0159      	lsls	r1, r3, #5
 8003bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd0:	0150      	lsls	r0, r2, #5
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	ebb2 080a 	subs.w	r8, r2, sl
 8003bda:	eb63 090b 	sbc.w	r9, r3, fp
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bf2:	ebb2 0408 	subs.w	r4, r2, r8
 8003bf6:	eb63 0509 	sbc.w	r5, r3, r9
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	00eb      	lsls	r3, r5, #3
 8003c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c08:	00e2      	lsls	r2, r4, #3
 8003c0a:	4614      	mov	r4, r2
 8003c0c:	461d      	mov	r5, r3
 8003c0e:	eb14 030a 	adds.w	r3, r4, sl
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	eb45 030b 	adc.w	r3, r5, fp
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c26:	4629      	mov	r1, r5
 8003c28:	028b      	lsls	r3, r1, #10
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c30:	4621      	mov	r1, r4
 8003c32:	028a      	lsls	r2, r1, #10
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	60fa      	str	r2, [r7, #12]
 8003c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c44:	f7fc fb34 	bl	80002b0 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c6a:	e002      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3740      	adds	r7, #64	; 0x40
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	00f42400 	.word	0x00f42400
 8003c88:	017d7840 	.word	0x017d7840

08003c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	2000000c 	.word	0x2000000c

08003ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ca8:	f7ff fff0 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	0a9b      	lsrs	r3, r3, #10
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	4903      	ldr	r1, [pc, #12]	; (8003cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cba:	5ccb      	ldrb	r3, [r1, r3]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	080052c0 	.word	0x080052c0

08003ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cd0:	f7ff ffdc 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0b5b      	lsrs	r3, r3, #13
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4903      	ldr	r1, [pc, #12]	; (8003cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ce2:	5ccb      	ldrb	r3, [r1, r3]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	080052c0 	.word	0x080052c0

08003cf4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003cfa:	f7fe fde9 	bl	80028d0 <HAL_GetTick>
 8003cfe:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003d00:	4b5d      	ldr	r3, [pc, #372]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a5c      	ldr	r2, [pc, #368]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7fe fddf 	bl	80028d0 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e0a7      	b.n	8003e70 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003d20:	4b55      	ldr	r3, [pc, #340]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003d2c:	4b52      	ldr	r3, [pc, #328]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a51      	ldr	r2, [pc, #324]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d36:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003d38:	f7fe fdca 	bl	80028d0 <HAL_GetTick>
 8003d3c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003d3e:	4b4e      	ldr	r3, [pc, #312]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003d44:	e00a      	b.n	8003d5c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d46:	f7fe fdc3 	bl	80028d0 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e089      	b.n	8003e70 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003d5c:	4b46      	ldr	r3, [pc, #280]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1ee      	bne.n	8003d46 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003d68:	f7fe fdb2 	bl	80028d0 <HAL_GetTick>
 8003d6c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003d6e:	4b42      	ldr	r3, [pc, #264]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a41      	ldr	r2, [pc, #260]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003d74:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003d78:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7fe fda8 	bl	80028d0 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	; 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e070      	b.n	8003e70 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003d8e:	4b3a      	ldr	r3, [pc, #232]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003d9a:	f7fe fd99 	bl	80028d0 <HAL_GetTick>
 8003d9e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003da0:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a34      	ldr	r2, [pc, #208]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003daa:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dae:	f7fe fd8f 	bl	80028d0 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e057      	b.n	8003e70 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003dc0:	4b2d      	ldr	r3, [pc, #180]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f0      	bne.n	8003dae <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003dcc:	f7fe fd80 	bl	80028d0 <HAL_GetTick>
 8003dd0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003dd2:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a28      	ldr	r2, [pc, #160]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003dd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ddc:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003de0:	f7fe fd76 	bl	80028d0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e03e      	b.n	8003e70 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003df2:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e00:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <HAL_RCC_DeInit+0x188>)
 8003e02:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003e04:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e06:	4a1e      	ldr	r2, [pc, #120]	; (8003e80 <HAL_RCC_DeInit+0x18c>)
 8003e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a19      	ldr	r2, [pc, #100]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e12:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003e16:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003e18:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4a16      	ldr	r2, [pc, #88]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e22:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003e24:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a13      	ldr	r2, [pc, #76]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e2a:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003e2e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a10      	ldr	r2, [pc, #64]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e3a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003e3c:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e40:	4a0d      	ldr	r2, [pc, #52]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4c:	4a0a      	ldr	r2, [pc, #40]	; (8003e78 <HAL_RCC_DeInit+0x184>)
 8003e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e52:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_RCC_DeInit+0x190>)
 8003e56:	4a0c      	ldr	r2, [pc, #48]	; (8003e88 <HAL_RCC_DeInit+0x194>)
 8003e58:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <HAL_RCC_DeInit+0x198>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fcf2 	bl	8002848 <HAL_InitTick>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	04003010 	.word	0x04003010
 8003e80:	20003010 	.word	0x20003010
 8003e84:	2000000c 	.word	0x2000000c
 8003e88:	00f42400 	.word	0x00f42400
 8003e8c:	20000010 	.word	0x20000010

08003e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e03f      	b.n	8003f22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fe fb34 	bl	8002524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2224      	movs	r2, #36	; 0x24
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f829 	bl	8003f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f30:	b0c0      	sub	sp, #256	; 0x100
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f48:	68d9      	ldr	r1, [r3, #12]
 8003f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	ea40 0301 	orr.w	r3, r0, r1
 8003f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f84:	f021 010c 	bic.w	r1, r1, #12
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f92:	430b      	orrs	r3, r1
 8003f94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa6:	6999      	ldr	r1, [r3, #24]
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	ea40 0301 	orr.w	r3, r0, r1
 8003fb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b8f      	ldr	r3, [pc, #572]	; (80041f8 <UART_SetConfig+0x2cc>)
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d005      	beq.n	8003fcc <UART_SetConfig+0xa0>
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b8d      	ldr	r3, [pc, #564]	; (80041fc <UART_SetConfig+0x2d0>)
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d104      	bne.n	8003fd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fcc:	f7ff fe7e 	bl	8003ccc <HAL_RCC_GetPCLK2Freq>
 8003fd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fd4:	e003      	b.n	8003fde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fd6:	f7ff fe65 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 8003fda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe8:	f040 810c 	bne.w	8004204 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ff6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ffa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ffe:	4622      	mov	r2, r4
 8004000:	462b      	mov	r3, r5
 8004002:	1891      	adds	r1, r2, r2
 8004004:	65b9      	str	r1, [r7, #88]	; 0x58
 8004006:	415b      	adcs	r3, r3
 8004008:	65fb      	str	r3, [r7, #92]	; 0x5c
 800400a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800400e:	4621      	mov	r1, r4
 8004010:	eb12 0801 	adds.w	r8, r2, r1
 8004014:	4629      	mov	r1, r5
 8004016:	eb43 0901 	adc.w	r9, r3, r1
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800402a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800402e:	4690      	mov	r8, r2
 8004030:	4699      	mov	r9, r3
 8004032:	4623      	mov	r3, r4
 8004034:	eb18 0303 	adds.w	r3, r8, r3
 8004038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800403c:	462b      	mov	r3, r5
 800403e:	eb49 0303 	adc.w	r3, r9, r3
 8004042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004052:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004056:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800405a:	460b      	mov	r3, r1
 800405c:	18db      	adds	r3, r3, r3
 800405e:	653b      	str	r3, [r7, #80]	; 0x50
 8004060:	4613      	mov	r3, r2
 8004062:	eb42 0303 	adc.w	r3, r2, r3
 8004066:	657b      	str	r3, [r7, #84]	; 0x54
 8004068:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800406c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004070:	f7fc f91e 	bl	80002b0 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4b61      	ldr	r3, [pc, #388]	; (8004200 <UART_SetConfig+0x2d4>)
 800407a:	fba3 2302 	umull	r2, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	011c      	lsls	r4, r3, #4
 8004082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800408c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004090:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	1891      	adds	r1, r2, r2
 800409a:	64b9      	str	r1, [r7, #72]	; 0x48
 800409c:	415b      	adcs	r3, r3
 800409e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040a4:	4641      	mov	r1, r8
 80040a6:	eb12 0a01 	adds.w	sl, r2, r1
 80040aa:	4649      	mov	r1, r9
 80040ac:	eb43 0b01 	adc.w	fp, r3, r1
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040c4:	4692      	mov	sl, r2
 80040c6:	469b      	mov	fp, r3
 80040c8:	4643      	mov	r3, r8
 80040ca:	eb1a 0303 	adds.w	r3, sl, r3
 80040ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040d2:	464b      	mov	r3, r9
 80040d4:	eb4b 0303 	adc.w	r3, fp, r3
 80040d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040f0:	460b      	mov	r3, r1
 80040f2:	18db      	adds	r3, r3, r3
 80040f4:	643b      	str	r3, [r7, #64]	; 0x40
 80040f6:	4613      	mov	r3, r2
 80040f8:	eb42 0303 	adc.w	r3, r2, r3
 80040fc:	647b      	str	r3, [r7, #68]	; 0x44
 80040fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004102:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004106:	f7fc f8d3 	bl	80002b0 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4611      	mov	r1, r2
 8004110:	4b3b      	ldr	r3, [pc, #236]	; (8004200 <UART_SetConfig+0x2d4>)
 8004112:	fba3 2301 	umull	r2, r3, r3, r1
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2264      	movs	r2, #100	; 0x64
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	1acb      	subs	r3, r1, r3
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004126:	4b36      	ldr	r3, [pc, #216]	; (8004200 <UART_SetConfig+0x2d4>)
 8004128:	fba3 2302 	umull	r2, r3, r3, r2
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004134:	441c      	add	r4, r3
 8004136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004140:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004144:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	1891      	adds	r1, r2, r2
 800414e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004150:	415b      	adcs	r3, r3
 8004152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004154:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004158:	4641      	mov	r1, r8
 800415a:	1851      	adds	r1, r2, r1
 800415c:	6339      	str	r1, [r7, #48]	; 0x30
 800415e:	4649      	mov	r1, r9
 8004160:	414b      	adcs	r3, r1
 8004162:	637b      	str	r3, [r7, #52]	; 0x34
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004170:	4659      	mov	r1, fp
 8004172:	00cb      	lsls	r3, r1, #3
 8004174:	4651      	mov	r1, sl
 8004176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417a:	4651      	mov	r1, sl
 800417c:	00ca      	lsls	r2, r1, #3
 800417e:	4610      	mov	r0, r2
 8004180:	4619      	mov	r1, r3
 8004182:	4603      	mov	r3, r0
 8004184:	4642      	mov	r2, r8
 8004186:	189b      	adds	r3, r3, r2
 8004188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800418c:	464b      	mov	r3, r9
 800418e:	460a      	mov	r2, r1
 8004190:	eb42 0303 	adc.w	r3, r2, r3
 8004194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041ac:	460b      	mov	r3, r1
 80041ae:	18db      	adds	r3, r3, r3
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b2:	4613      	mov	r3, r2
 80041b4:	eb42 0303 	adc.w	r3, r2, r3
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041c2:	f7fc f875 	bl	80002b0 <__aeabi_uldivmod>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <UART_SetConfig+0x2d4>)
 80041cc:	fba3 1302 	umull	r1, r3, r3, r2
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	2164      	movs	r1, #100	; 0x64
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	3332      	adds	r3, #50	; 0x32
 80041de:	4a08      	ldr	r2, [pc, #32]	; (8004200 <UART_SetConfig+0x2d4>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	f003 0207 	and.w	r2, r3, #7
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4422      	add	r2, r4
 80041f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041f4:	e106      	b.n	8004404 <UART_SetConfig+0x4d8>
 80041f6:	bf00      	nop
 80041f8:	40011000 	.word	0x40011000
 80041fc:	40011400 	.word	0x40011400
 8004200:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004208:	2200      	movs	r2, #0
 800420a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800420e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004212:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004216:	4642      	mov	r2, r8
 8004218:	464b      	mov	r3, r9
 800421a:	1891      	adds	r1, r2, r2
 800421c:	6239      	str	r1, [r7, #32]
 800421e:	415b      	adcs	r3, r3
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
 8004222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004226:	4641      	mov	r1, r8
 8004228:	1854      	adds	r4, r2, r1
 800422a:	4649      	mov	r1, r9
 800422c:	eb43 0501 	adc.w	r5, r3, r1
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	00eb      	lsls	r3, r5, #3
 800423a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800423e:	00e2      	lsls	r2, r4, #3
 8004240:	4614      	mov	r4, r2
 8004242:	461d      	mov	r5, r3
 8004244:	4643      	mov	r3, r8
 8004246:	18e3      	adds	r3, r4, r3
 8004248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800424c:	464b      	mov	r3, r9
 800424e:	eb45 0303 	adc.w	r3, r5, r3
 8004252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004262:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004272:	4629      	mov	r1, r5
 8004274:	008b      	lsls	r3, r1, #2
 8004276:	4621      	mov	r1, r4
 8004278:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800427c:	4621      	mov	r1, r4
 800427e:	008a      	lsls	r2, r1, #2
 8004280:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004284:	f7fc f814 	bl	80002b0 <__aeabi_uldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4b60      	ldr	r3, [pc, #384]	; (8004410 <UART_SetConfig+0x4e4>)
 800428e:	fba3 2302 	umull	r2, r3, r3, r2
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	011c      	lsls	r4, r3, #4
 8004296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800429a:	2200      	movs	r2, #0
 800429c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	1891      	adds	r1, r2, r2
 80042ae:	61b9      	str	r1, [r7, #24]
 80042b0:	415b      	adcs	r3, r3
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042b8:	4641      	mov	r1, r8
 80042ba:	1851      	adds	r1, r2, r1
 80042bc:	6139      	str	r1, [r7, #16]
 80042be:	4649      	mov	r1, r9
 80042c0:	414b      	adcs	r3, r1
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042d0:	4659      	mov	r1, fp
 80042d2:	00cb      	lsls	r3, r1, #3
 80042d4:	4651      	mov	r1, sl
 80042d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042da:	4651      	mov	r1, sl
 80042dc:	00ca      	lsls	r2, r1, #3
 80042de:	4610      	mov	r0, r2
 80042e0:	4619      	mov	r1, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	4642      	mov	r2, r8
 80042e6:	189b      	adds	r3, r3, r2
 80042e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042ec:	464b      	mov	r3, r9
 80042ee:	460a      	mov	r2, r1
 80042f0:	eb42 0303 	adc.w	r3, r2, r3
 80042f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	67bb      	str	r3, [r7, #120]	; 0x78
 8004302:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004310:	4649      	mov	r1, r9
 8004312:	008b      	lsls	r3, r1, #2
 8004314:	4641      	mov	r1, r8
 8004316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800431a:	4641      	mov	r1, r8
 800431c:	008a      	lsls	r2, r1, #2
 800431e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004322:	f7fb ffc5 	bl	80002b0 <__aeabi_uldivmod>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4611      	mov	r1, r2
 800432c:	4b38      	ldr	r3, [pc, #224]	; (8004410 <UART_SetConfig+0x4e4>)
 800432e:	fba3 2301 	umull	r2, r3, r3, r1
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2264      	movs	r2, #100	; 0x64
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	1acb      	subs	r3, r1, r3
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	3332      	adds	r3, #50	; 0x32
 8004340:	4a33      	ldr	r2, [pc, #204]	; (8004410 <UART_SetConfig+0x4e4>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800434c:	441c      	add	r4, r3
 800434e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004352:	2200      	movs	r2, #0
 8004354:	673b      	str	r3, [r7, #112]	; 0x70
 8004356:	677a      	str	r2, [r7, #116]	; 0x74
 8004358:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800435c:	4642      	mov	r2, r8
 800435e:	464b      	mov	r3, r9
 8004360:	1891      	adds	r1, r2, r2
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	415b      	adcs	r3, r3
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800436c:	4641      	mov	r1, r8
 800436e:	1851      	adds	r1, r2, r1
 8004370:	6039      	str	r1, [r7, #0]
 8004372:	4649      	mov	r1, r9
 8004374:	414b      	adcs	r3, r1
 8004376:	607b      	str	r3, [r7, #4]
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004384:	4659      	mov	r1, fp
 8004386:	00cb      	lsls	r3, r1, #3
 8004388:	4651      	mov	r1, sl
 800438a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800438e:	4651      	mov	r1, sl
 8004390:	00ca      	lsls	r2, r1, #3
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	4603      	mov	r3, r0
 8004398:	4642      	mov	r2, r8
 800439a:	189b      	adds	r3, r3, r2
 800439c:	66bb      	str	r3, [r7, #104]	; 0x68
 800439e:	464b      	mov	r3, r9
 80043a0:	460a      	mov	r2, r1
 80043a2:	eb42 0303 	adc.w	r3, r2, r3
 80043a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	663b      	str	r3, [r7, #96]	; 0x60
 80043b2:	667a      	str	r2, [r7, #100]	; 0x64
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043c0:	4649      	mov	r1, r9
 80043c2:	008b      	lsls	r3, r1, #2
 80043c4:	4641      	mov	r1, r8
 80043c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ca:	4641      	mov	r1, r8
 80043cc:	008a      	lsls	r2, r1, #2
 80043ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043d2:	f7fb ff6d 	bl	80002b0 <__aeabi_uldivmod>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <UART_SetConfig+0x4e4>)
 80043dc:	fba3 1302 	umull	r1, r3, r3, r2
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	2164      	movs	r1, #100	; 0x64
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	3332      	adds	r3, #50	; 0x32
 80043ee:	4a08      	ldr	r2, [pc, #32]	; (8004410 <UART_SetConfig+0x4e4>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	f003 020f 	and.w	r2, r3, #15
 80043fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4422      	add	r2, r4
 8004402:	609a      	str	r2, [r3, #8]
}
 8004404:	bf00      	nop
 8004406:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800440a:	46bd      	mov	sp, r7
 800440c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004410:	51eb851f 	.word	0x51eb851f

08004414 <atoi>:
 8004414:	220a      	movs	r2, #10
 8004416:	2100      	movs	r1, #0
 8004418:	f000 b882 	b.w	8004520 <strtol>

0800441c <_strtol_l.constprop.0>:
 800441c:	2b01      	cmp	r3, #1
 800441e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004422:	d001      	beq.n	8004428 <_strtol_l.constprop.0+0xc>
 8004424:	2b24      	cmp	r3, #36	; 0x24
 8004426:	d906      	bls.n	8004436 <_strtol_l.constprop.0+0x1a>
 8004428:	f000 f958 	bl	80046dc <__errno>
 800442c:	2316      	movs	r3, #22
 800442e:	6003      	str	r3, [r0, #0]
 8004430:	2000      	movs	r0, #0
 8004432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004436:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800451c <_strtol_l.constprop.0+0x100>
 800443a:	460d      	mov	r5, r1
 800443c:	462e      	mov	r6, r5
 800443e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004442:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004446:	f017 0708 	ands.w	r7, r7, #8
 800444a:	d1f7      	bne.n	800443c <_strtol_l.constprop.0+0x20>
 800444c:	2c2d      	cmp	r4, #45	; 0x2d
 800444e:	d132      	bne.n	80044b6 <_strtol_l.constprop.0+0x9a>
 8004450:	782c      	ldrb	r4, [r5, #0]
 8004452:	2701      	movs	r7, #1
 8004454:	1cb5      	adds	r5, r6, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d05b      	beq.n	8004512 <_strtol_l.constprop.0+0xf6>
 800445a:	2b10      	cmp	r3, #16
 800445c:	d109      	bne.n	8004472 <_strtol_l.constprop.0+0x56>
 800445e:	2c30      	cmp	r4, #48	; 0x30
 8004460:	d107      	bne.n	8004472 <_strtol_l.constprop.0+0x56>
 8004462:	782c      	ldrb	r4, [r5, #0]
 8004464:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004468:	2c58      	cmp	r4, #88	; 0x58
 800446a:	d14d      	bne.n	8004508 <_strtol_l.constprop.0+0xec>
 800446c:	786c      	ldrb	r4, [r5, #1]
 800446e:	2310      	movs	r3, #16
 8004470:	3502      	adds	r5, #2
 8004472:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004476:	f108 38ff 	add.w	r8, r8, #4294967295
 800447a:	f04f 0e00 	mov.w	lr, #0
 800447e:	fbb8 f9f3 	udiv	r9, r8, r3
 8004482:	4676      	mov	r6, lr
 8004484:	fb03 8a19 	mls	sl, r3, r9, r8
 8004488:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800448c:	f1bc 0f09 	cmp.w	ip, #9
 8004490:	d816      	bhi.n	80044c0 <_strtol_l.constprop.0+0xa4>
 8004492:	4664      	mov	r4, ip
 8004494:	42a3      	cmp	r3, r4
 8004496:	dd24      	ble.n	80044e2 <_strtol_l.constprop.0+0xc6>
 8004498:	f1be 3fff 	cmp.w	lr, #4294967295
 800449c:	d008      	beq.n	80044b0 <_strtol_l.constprop.0+0x94>
 800449e:	45b1      	cmp	r9, r6
 80044a0:	d31c      	bcc.n	80044dc <_strtol_l.constprop.0+0xc0>
 80044a2:	d101      	bne.n	80044a8 <_strtol_l.constprop.0+0x8c>
 80044a4:	45a2      	cmp	sl, r4
 80044a6:	db19      	blt.n	80044dc <_strtol_l.constprop.0+0xc0>
 80044a8:	fb06 4603 	mla	r6, r6, r3, r4
 80044ac:	f04f 0e01 	mov.w	lr, #1
 80044b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044b4:	e7e8      	b.n	8004488 <_strtol_l.constprop.0+0x6c>
 80044b6:	2c2b      	cmp	r4, #43	; 0x2b
 80044b8:	bf04      	itt	eq
 80044ba:	782c      	ldrbeq	r4, [r5, #0]
 80044bc:	1cb5      	addeq	r5, r6, #2
 80044be:	e7ca      	b.n	8004456 <_strtol_l.constprop.0+0x3a>
 80044c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80044c4:	f1bc 0f19 	cmp.w	ip, #25
 80044c8:	d801      	bhi.n	80044ce <_strtol_l.constprop.0+0xb2>
 80044ca:	3c37      	subs	r4, #55	; 0x37
 80044cc:	e7e2      	b.n	8004494 <_strtol_l.constprop.0+0x78>
 80044ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80044d2:	f1bc 0f19 	cmp.w	ip, #25
 80044d6:	d804      	bhi.n	80044e2 <_strtol_l.constprop.0+0xc6>
 80044d8:	3c57      	subs	r4, #87	; 0x57
 80044da:	e7db      	b.n	8004494 <_strtol_l.constprop.0+0x78>
 80044dc:	f04f 3eff 	mov.w	lr, #4294967295
 80044e0:	e7e6      	b.n	80044b0 <_strtol_l.constprop.0+0x94>
 80044e2:	f1be 3fff 	cmp.w	lr, #4294967295
 80044e6:	d105      	bne.n	80044f4 <_strtol_l.constprop.0+0xd8>
 80044e8:	2322      	movs	r3, #34	; 0x22
 80044ea:	6003      	str	r3, [r0, #0]
 80044ec:	4646      	mov	r6, r8
 80044ee:	b942      	cbnz	r2, 8004502 <_strtol_l.constprop.0+0xe6>
 80044f0:	4630      	mov	r0, r6
 80044f2:	e79e      	b.n	8004432 <_strtol_l.constprop.0+0x16>
 80044f4:	b107      	cbz	r7, 80044f8 <_strtol_l.constprop.0+0xdc>
 80044f6:	4276      	negs	r6, r6
 80044f8:	2a00      	cmp	r2, #0
 80044fa:	d0f9      	beq.n	80044f0 <_strtol_l.constprop.0+0xd4>
 80044fc:	f1be 0f00 	cmp.w	lr, #0
 8004500:	d000      	beq.n	8004504 <_strtol_l.constprop.0+0xe8>
 8004502:	1e69      	subs	r1, r5, #1
 8004504:	6011      	str	r1, [r2, #0]
 8004506:	e7f3      	b.n	80044f0 <_strtol_l.constprop.0+0xd4>
 8004508:	2430      	movs	r4, #48	; 0x30
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1b1      	bne.n	8004472 <_strtol_l.constprop.0+0x56>
 800450e:	2308      	movs	r3, #8
 8004510:	e7af      	b.n	8004472 <_strtol_l.constprop.0+0x56>
 8004512:	2c30      	cmp	r4, #48	; 0x30
 8004514:	d0a5      	beq.n	8004462 <_strtol_l.constprop.0+0x46>
 8004516:	230a      	movs	r3, #10
 8004518:	e7ab      	b.n	8004472 <_strtol_l.constprop.0+0x56>
 800451a:	bf00      	nop
 800451c:	080052c9 	.word	0x080052c9

08004520 <strtol>:
 8004520:	4613      	mov	r3, r2
 8004522:	460a      	mov	r2, r1
 8004524:	4601      	mov	r1, r0
 8004526:	4802      	ldr	r0, [pc, #8]	; (8004530 <strtol+0x10>)
 8004528:	6800      	ldr	r0, [r0, #0]
 800452a:	f7ff bf77 	b.w	800441c <_strtol_l.constprop.0>
 800452e:	bf00      	nop
 8004530:	20000064 	.word	0x20000064

08004534 <_strtoul_l.constprop.0>:
 8004534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004538:	4f36      	ldr	r7, [pc, #216]	; (8004614 <_strtoul_l.constprop.0+0xe0>)
 800453a:	4686      	mov	lr, r0
 800453c:	460d      	mov	r5, r1
 800453e:	4628      	mov	r0, r5
 8004540:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004544:	5d3e      	ldrb	r6, [r7, r4]
 8004546:	f016 0608 	ands.w	r6, r6, #8
 800454a:	d1f8      	bne.n	800453e <_strtoul_l.constprop.0+0xa>
 800454c:	2c2d      	cmp	r4, #45	; 0x2d
 800454e:	d130      	bne.n	80045b2 <_strtoul_l.constprop.0+0x7e>
 8004550:	782c      	ldrb	r4, [r5, #0]
 8004552:	2601      	movs	r6, #1
 8004554:	1c85      	adds	r5, r0, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d057      	beq.n	800460a <_strtoul_l.constprop.0+0xd6>
 800455a:	2b10      	cmp	r3, #16
 800455c:	d109      	bne.n	8004572 <_strtoul_l.constprop.0+0x3e>
 800455e:	2c30      	cmp	r4, #48	; 0x30
 8004560:	d107      	bne.n	8004572 <_strtoul_l.constprop.0+0x3e>
 8004562:	7828      	ldrb	r0, [r5, #0]
 8004564:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004568:	2858      	cmp	r0, #88	; 0x58
 800456a:	d149      	bne.n	8004600 <_strtoul_l.constprop.0+0xcc>
 800456c:	786c      	ldrb	r4, [r5, #1]
 800456e:	2310      	movs	r3, #16
 8004570:	3502      	adds	r5, #2
 8004572:	f04f 38ff 	mov.w	r8, #4294967295
 8004576:	2700      	movs	r7, #0
 8004578:	fbb8 f8f3 	udiv	r8, r8, r3
 800457c:	fb03 f908 	mul.w	r9, r3, r8
 8004580:	ea6f 0909 	mvn.w	r9, r9
 8004584:	4638      	mov	r0, r7
 8004586:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800458a:	f1bc 0f09 	cmp.w	ip, #9
 800458e:	d815      	bhi.n	80045bc <_strtoul_l.constprop.0+0x88>
 8004590:	4664      	mov	r4, ip
 8004592:	42a3      	cmp	r3, r4
 8004594:	dd23      	ble.n	80045de <_strtoul_l.constprop.0+0xaa>
 8004596:	f1b7 3fff 	cmp.w	r7, #4294967295
 800459a:	d007      	beq.n	80045ac <_strtoul_l.constprop.0+0x78>
 800459c:	4580      	cmp	r8, r0
 800459e:	d31b      	bcc.n	80045d8 <_strtoul_l.constprop.0+0xa4>
 80045a0:	d101      	bne.n	80045a6 <_strtoul_l.constprop.0+0x72>
 80045a2:	45a1      	cmp	r9, r4
 80045a4:	db18      	blt.n	80045d8 <_strtoul_l.constprop.0+0xa4>
 80045a6:	fb00 4003 	mla	r0, r0, r3, r4
 80045aa:	2701      	movs	r7, #1
 80045ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045b0:	e7e9      	b.n	8004586 <_strtoul_l.constprop.0+0x52>
 80045b2:	2c2b      	cmp	r4, #43	; 0x2b
 80045b4:	bf04      	itt	eq
 80045b6:	782c      	ldrbeq	r4, [r5, #0]
 80045b8:	1c85      	addeq	r5, r0, #2
 80045ba:	e7cc      	b.n	8004556 <_strtoul_l.constprop.0+0x22>
 80045bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80045c0:	f1bc 0f19 	cmp.w	ip, #25
 80045c4:	d801      	bhi.n	80045ca <_strtoul_l.constprop.0+0x96>
 80045c6:	3c37      	subs	r4, #55	; 0x37
 80045c8:	e7e3      	b.n	8004592 <_strtoul_l.constprop.0+0x5e>
 80045ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80045ce:	f1bc 0f19 	cmp.w	ip, #25
 80045d2:	d804      	bhi.n	80045de <_strtoul_l.constprop.0+0xaa>
 80045d4:	3c57      	subs	r4, #87	; 0x57
 80045d6:	e7dc      	b.n	8004592 <_strtoul_l.constprop.0+0x5e>
 80045d8:	f04f 37ff 	mov.w	r7, #4294967295
 80045dc:	e7e6      	b.n	80045ac <_strtoul_l.constprop.0+0x78>
 80045de:	1c7b      	adds	r3, r7, #1
 80045e0:	d106      	bne.n	80045f0 <_strtoul_l.constprop.0+0xbc>
 80045e2:	2322      	movs	r3, #34	; 0x22
 80045e4:	f8ce 3000 	str.w	r3, [lr]
 80045e8:	4638      	mov	r0, r7
 80045ea:	b932      	cbnz	r2, 80045fa <_strtoul_l.constprop.0+0xc6>
 80045ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045f0:	b106      	cbz	r6, 80045f4 <_strtoul_l.constprop.0+0xc0>
 80045f2:	4240      	negs	r0, r0
 80045f4:	2a00      	cmp	r2, #0
 80045f6:	d0f9      	beq.n	80045ec <_strtoul_l.constprop.0+0xb8>
 80045f8:	b107      	cbz	r7, 80045fc <_strtoul_l.constprop.0+0xc8>
 80045fa:	1e69      	subs	r1, r5, #1
 80045fc:	6011      	str	r1, [r2, #0]
 80045fe:	e7f5      	b.n	80045ec <_strtoul_l.constprop.0+0xb8>
 8004600:	2430      	movs	r4, #48	; 0x30
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1b5      	bne.n	8004572 <_strtoul_l.constprop.0+0x3e>
 8004606:	2308      	movs	r3, #8
 8004608:	e7b3      	b.n	8004572 <_strtoul_l.constprop.0+0x3e>
 800460a:	2c30      	cmp	r4, #48	; 0x30
 800460c:	d0a9      	beq.n	8004562 <_strtoul_l.constprop.0+0x2e>
 800460e:	230a      	movs	r3, #10
 8004610:	e7af      	b.n	8004572 <_strtoul_l.constprop.0+0x3e>
 8004612:	bf00      	nop
 8004614:	080052c9 	.word	0x080052c9

08004618 <strtoul>:
 8004618:	4613      	mov	r3, r2
 800461a:	460a      	mov	r2, r1
 800461c:	4601      	mov	r1, r0
 800461e:	4802      	ldr	r0, [pc, #8]	; (8004628 <strtoul+0x10>)
 8004620:	6800      	ldr	r0, [r0, #0]
 8004622:	f7ff bf87 	b.w	8004534 <_strtoul_l.constprop.0>
 8004626:	bf00      	nop
 8004628:	20000064 	.word	0x20000064

0800462c <siprintf>:
 800462c:	b40e      	push	{r1, r2, r3}
 800462e:	b500      	push	{lr}
 8004630:	b09c      	sub	sp, #112	; 0x70
 8004632:	ab1d      	add	r3, sp, #116	; 0x74
 8004634:	9002      	str	r0, [sp, #8]
 8004636:	9006      	str	r0, [sp, #24]
 8004638:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800463c:	4809      	ldr	r0, [pc, #36]	; (8004664 <siprintf+0x38>)
 800463e:	9107      	str	r1, [sp, #28]
 8004640:	9104      	str	r1, [sp, #16]
 8004642:	4909      	ldr	r1, [pc, #36]	; (8004668 <siprintf+0x3c>)
 8004644:	f853 2b04 	ldr.w	r2, [r3], #4
 8004648:	9105      	str	r1, [sp, #20]
 800464a:	6800      	ldr	r0, [r0, #0]
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	a902      	add	r1, sp, #8
 8004650:	f000 f9c2 	bl	80049d8 <_svfiprintf_r>
 8004654:	9b02      	ldr	r3, [sp, #8]
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	b01c      	add	sp, #112	; 0x70
 800465c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004660:	b003      	add	sp, #12
 8004662:	4770      	bx	lr
 8004664:	20000064 	.word	0x20000064
 8004668:	ffff0208 	.word	0xffff0208

0800466c <memmove>:
 800466c:	4288      	cmp	r0, r1
 800466e:	b510      	push	{r4, lr}
 8004670:	eb01 0402 	add.w	r4, r1, r2
 8004674:	d902      	bls.n	800467c <memmove+0x10>
 8004676:	4284      	cmp	r4, r0
 8004678:	4623      	mov	r3, r4
 800467a:	d807      	bhi.n	800468c <memmove+0x20>
 800467c:	1e43      	subs	r3, r0, #1
 800467e:	42a1      	cmp	r1, r4
 8004680:	d008      	beq.n	8004694 <memmove+0x28>
 8004682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800468a:	e7f8      	b.n	800467e <memmove+0x12>
 800468c:	4402      	add	r2, r0
 800468e:	4601      	mov	r1, r0
 8004690:	428a      	cmp	r2, r1
 8004692:	d100      	bne.n	8004696 <memmove+0x2a>
 8004694:	bd10      	pop	{r4, pc}
 8004696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800469a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800469e:	e7f7      	b.n	8004690 <memmove+0x24>

080046a0 <memset>:
 80046a0:	4402      	add	r2, r0
 80046a2:	4603      	mov	r3, r0
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d100      	bne.n	80046aa <memset+0xa>
 80046a8:	4770      	bx	lr
 80046aa:	f803 1b01 	strb.w	r1, [r3], #1
 80046ae:	e7f9      	b.n	80046a4 <memset+0x4>

080046b0 <strstr>:
 80046b0:	780a      	ldrb	r2, [r1, #0]
 80046b2:	b570      	push	{r4, r5, r6, lr}
 80046b4:	b96a      	cbnz	r2, 80046d2 <strstr+0x22>
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d109      	bne.n	80046d0 <strstr+0x20>
 80046bc:	460c      	mov	r4, r1
 80046be:	4605      	mov	r5, r0
 80046c0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f6      	beq.n	80046b6 <strstr+0x6>
 80046c8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80046cc:	429e      	cmp	r6, r3
 80046ce:	d0f7      	beq.n	80046c0 <strstr+0x10>
 80046d0:	3001      	adds	r0, #1
 80046d2:	7803      	ldrb	r3, [r0, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1ef      	bne.n	80046b8 <strstr+0x8>
 80046d8:	4618      	mov	r0, r3
 80046da:	e7ec      	b.n	80046b6 <strstr+0x6>

080046dc <__errno>:
 80046dc:	4b01      	ldr	r3, [pc, #4]	; (80046e4 <__errno+0x8>)
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000064 	.word	0x20000064

080046e8 <__libc_init_array>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	4d0d      	ldr	r5, [pc, #52]	; (8004720 <__libc_init_array+0x38>)
 80046ec:	4c0d      	ldr	r4, [pc, #52]	; (8004724 <__libc_init_array+0x3c>)
 80046ee:	1b64      	subs	r4, r4, r5
 80046f0:	10a4      	asrs	r4, r4, #2
 80046f2:	2600      	movs	r6, #0
 80046f4:	42a6      	cmp	r6, r4
 80046f6:	d109      	bne.n	800470c <__libc_init_array+0x24>
 80046f8:	4d0b      	ldr	r5, [pc, #44]	; (8004728 <__libc_init_array+0x40>)
 80046fa:	4c0c      	ldr	r4, [pc, #48]	; (800472c <__libc_init_array+0x44>)
 80046fc:	f000 fc50 	bl	8004fa0 <_init>
 8004700:	1b64      	subs	r4, r4, r5
 8004702:	10a4      	asrs	r4, r4, #2
 8004704:	2600      	movs	r6, #0
 8004706:	42a6      	cmp	r6, r4
 8004708:	d105      	bne.n	8004716 <__libc_init_array+0x2e>
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004710:	4798      	blx	r3
 8004712:	3601      	adds	r6, #1
 8004714:	e7ee      	b.n	80046f4 <__libc_init_array+0xc>
 8004716:	f855 3b04 	ldr.w	r3, [r5], #4
 800471a:	4798      	blx	r3
 800471c:	3601      	adds	r6, #1
 800471e:	e7f2      	b.n	8004706 <__libc_init_array+0x1e>
 8004720:	08005404 	.word	0x08005404
 8004724:	08005404 	.word	0x08005404
 8004728:	08005404 	.word	0x08005404
 800472c:	08005408 	.word	0x08005408

08004730 <__retarget_lock_acquire_recursive>:
 8004730:	4770      	bx	lr

08004732 <__retarget_lock_release_recursive>:
 8004732:	4770      	bx	lr

08004734 <_free_r>:
 8004734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004736:	2900      	cmp	r1, #0
 8004738:	d044      	beq.n	80047c4 <_free_r+0x90>
 800473a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800473e:	9001      	str	r0, [sp, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f1a1 0404 	sub.w	r4, r1, #4
 8004746:	bfb8      	it	lt
 8004748:	18e4      	addlt	r4, r4, r3
 800474a:	f000 f8df 	bl	800490c <__malloc_lock>
 800474e:	4a1e      	ldr	r2, [pc, #120]	; (80047c8 <_free_r+0x94>)
 8004750:	9801      	ldr	r0, [sp, #4]
 8004752:	6813      	ldr	r3, [r2, #0]
 8004754:	b933      	cbnz	r3, 8004764 <_free_r+0x30>
 8004756:	6063      	str	r3, [r4, #4]
 8004758:	6014      	str	r4, [r2, #0]
 800475a:	b003      	add	sp, #12
 800475c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004760:	f000 b8da 	b.w	8004918 <__malloc_unlock>
 8004764:	42a3      	cmp	r3, r4
 8004766:	d908      	bls.n	800477a <_free_r+0x46>
 8004768:	6825      	ldr	r5, [r4, #0]
 800476a:	1961      	adds	r1, r4, r5
 800476c:	428b      	cmp	r3, r1
 800476e:	bf01      	itttt	eq
 8004770:	6819      	ldreq	r1, [r3, #0]
 8004772:	685b      	ldreq	r3, [r3, #4]
 8004774:	1949      	addeq	r1, r1, r5
 8004776:	6021      	streq	r1, [r4, #0]
 8004778:	e7ed      	b.n	8004756 <_free_r+0x22>
 800477a:	461a      	mov	r2, r3
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	b10b      	cbz	r3, 8004784 <_free_r+0x50>
 8004780:	42a3      	cmp	r3, r4
 8004782:	d9fa      	bls.n	800477a <_free_r+0x46>
 8004784:	6811      	ldr	r1, [r2, #0]
 8004786:	1855      	adds	r5, r2, r1
 8004788:	42a5      	cmp	r5, r4
 800478a:	d10b      	bne.n	80047a4 <_free_r+0x70>
 800478c:	6824      	ldr	r4, [r4, #0]
 800478e:	4421      	add	r1, r4
 8004790:	1854      	adds	r4, r2, r1
 8004792:	42a3      	cmp	r3, r4
 8004794:	6011      	str	r1, [r2, #0]
 8004796:	d1e0      	bne.n	800475a <_free_r+0x26>
 8004798:	681c      	ldr	r4, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	6053      	str	r3, [r2, #4]
 800479e:	440c      	add	r4, r1
 80047a0:	6014      	str	r4, [r2, #0]
 80047a2:	e7da      	b.n	800475a <_free_r+0x26>
 80047a4:	d902      	bls.n	80047ac <_free_r+0x78>
 80047a6:	230c      	movs	r3, #12
 80047a8:	6003      	str	r3, [r0, #0]
 80047aa:	e7d6      	b.n	800475a <_free_r+0x26>
 80047ac:	6825      	ldr	r5, [r4, #0]
 80047ae:	1961      	adds	r1, r4, r5
 80047b0:	428b      	cmp	r3, r1
 80047b2:	bf04      	itt	eq
 80047b4:	6819      	ldreq	r1, [r3, #0]
 80047b6:	685b      	ldreq	r3, [r3, #4]
 80047b8:	6063      	str	r3, [r4, #4]
 80047ba:	bf04      	itt	eq
 80047bc:	1949      	addeq	r1, r1, r5
 80047be:	6021      	streq	r1, [r4, #0]
 80047c0:	6054      	str	r4, [r2, #4]
 80047c2:	e7ca      	b.n	800475a <_free_r+0x26>
 80047c4:	b003      	add	sp, #12
 80047c6:	bd30      	pop	{r4, r5, pc}
 80047c8:	20008928 	.word	0x20008928

080047cc <sbrk_aligned>:
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	4e0e      	ldr	r6, [pc, #56]	; (8004808 <sbrk_aligned+0x3c>)
 80047d0:	460c      	mov	r4, r1
 80047d2:	6831      	ldr	r1, [r6, #0]
 80047d4:	4605      	mov	r5, r0
 80047d6:	b911      	cbnz	r1, 80047de <sbrk_aligned+0x12>
 80047d8:	f000 fb8c 	bl	8004ef4 <_sbrk_r>
 80047dc:	6030      	str	r0, [r6, #0]
 80047de:	4621      	mov	r1, r4
 80047e0:	4628      	mov	r0, r5
 80047e2:	f000 fb87 	bl	8004ef4 <_sbrk_r>
 80047e6:	1c43      	adds	r3, r0, #1
 80047e8:	d00a      	beq.n	8004800 <sbrk_aligned+0x34>
 80047ea:	1cc4      	adds	r4, r0, #3
 80047ec:	f024 0403 	bic.w	r4, r4, #3
 80047f0:	42a0      	cmp	r0, r4
 80047f2:	d007      	beq.n	8004804 <sbrk_aligned+0x38>
 80047f4:	1a21      	subs	r1, r4, r0
 80047f6:	4628      	mov	r0, r5
 80047f8:	f000 fb7c 	bl	8004ef4 <_sbrk_r>
 80047fc:	3001      	adds	r0, #1
 80047fe:	d101      	bne.n	8004804 <sbrk_aligned+0x38>
 8004800:	f04f 34ff 	mov.w	r4, #4294967295
 8004804:	4620      	mov	r0, r4
 8004806:	bd70      	pop	{r4, r5, r6, pc}
 8004808:	2000892c 	.word	0x2000892c

0800480c <_malloc_r>:
 800480c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004810:	1ccd      	adds	r5, r1, #3
 8004812:	f025 0503 	bic.w	r5, r5, #3
 8004816:	3508      	adds	r5, #8
 8004818:	2d0c      	cmp	r5, #12
 800481a:	bf38      	it	cc
 800481c:	250c      	movcc	r5, #12
 800481e:	2d00      	cmp	r5, #0
 8004820:	4607      	mov	r7, r0
 8004822:	db01      	blt.n	8004828 <_malloc_r+0x1c>
 8004824:	42a9      	cmp	r1, r5
 8004826:	d905      	bls.n	8004834 <_malloc_r+0x28>
 8004828:	230c      	movs	r3, #12
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	2600      	movs	r6, #0
 800482e:	4630      	mov	r0, r6
 8004830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004834:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004908 <_malloc_r+0xfc>
 8004838:	f000 f868 	bl	800490c <__malloc_lock>
 800483c:	f8d8 3000 	ldr.w	r3, [r8]
 8004840:	461c      	mov	r4, r3
 8004842:	bb5c      	cbnz	r4, 800489c <_malloc_r+0x90>
 8004844:	4629      	mov	r1, r5
 8004846:	4638      	mov	r0, r7
 8004848:	f7ff ffc0 	bl	80047cc <sbrk_aligned>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	4604      	mov	r4, r0
 8004850:	d155      	bne.n	80048fe <_malloc_r+0xf2>
 8004852:	f8d8 4000 	ldr.w	r4, [r8]
 8004856:	4626      	mov	r6, r4
 8004858:	2e00      	cmp	r6, #0
 800485a:	d145      	bne.n	80048e8 <_malloc_r+0xdc>
 800485c:	2c00      	cmp	r4, #0
 800485e:	d048      	beq.n	80048f2 <_malloc_r+0xe6>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	4631      	mov	r1, r6
 8004864:	4638      	mov	r0, r7
 8004866:	eb04 0903 	add.w	r9, r4, r3
 800486a:	f000 fb43 	bl	8004ef4 <_sbrk_r>
 800486e:	4581      	cmp	r9, r0
 8004870:	d13f      	bne.n	80048f2 <_malloc_r+0xe6>
 8004872:	6821      	ldr	r1, [r4, #0]
 8004874:	1a6d      	subs	r5, r5, r1
 8004876:	4629      	mov	r1, r5
 8004878:	4638      	mov	r0, r7
 800487a:	f7ff ffa7 	bl	80047cc <sbrk_aligned>
 800487e:	3001      	adds	r0, #1
 8004880:	d037      	beq.n	80048f2 <_malloc_r+0xe6>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	442b      	add	r3, r5
 8004886:	6023      	str	r3, [r4, #0]
 8004888:	f8d8 3000 	ldr.w	r3, [r8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d038      	beq.n	8004902 <_malloc_r+0xf6>
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	42a2      	cmp	r2, r4
 8004894:	d12b      	bne.n	80048ee <_malloc_r+0xe2>
 8004896:	2200      	movs	r2, #0
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	e00f      	b.n	80048bc <_malloc_r+0xb0>
 800489c:	6822      	ldr	r2, [r4, #0]
 800489e:	1b52      	subs	r2, r2, r5
 80048a0:	d41f      	bmi.n	80048e2 <_malloc_r+0xd6>
 80048a2:	2a0b      	cmp	r2, #11
 80048a4:	d917      	bls.n	80048d6 <_malloc_r+0xca>
 80048a6:	1961      	adds	r1, r4, r5
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	6025      	str	r5, [r4, #0]
 80048ac:	bf18      	it	ne
 80048ae:	6059      	strne	r1, [r3, #4]
 80048b0:	6863      	ldr	r3, [r4, #4]
 80048b2:	bf08      	it	eq
 80048b4:	f8c8 1000 	streq.w	r1, [r8]
 80048b8:	5162      	str	r2, [r4, r5]
 80048ba:	604b      	str	r3, [r1, #4]
 80048bc:	4638      	mov	r0, r7
 80048be:	f104 060b 	add.w	r6, r4, #11
 80048c2:	f000 f829 	bl	8004918 <__malloc_unlock>
 80048c6:	f026 0607 	bic.w	r6, r6, #7
 80048ca:	1d23      	adds	r3, r4, #4
 80048cc:	1af2      	subs	r2, r6, r3
 80048ce:	d0ae      	beq.n	800482e <_malloc_r+0x22>
 80048d0:	1b9b      	subs	r3, r3, r6
 80048d2:	50a3      	str	r3, [r4, r2]
 80048d4:	e7ab      	b.n	800482e <_malloc_r+0x22>
 80048d6:	42a3      	cmp	r3, r4
 80048d8:	6862      	ldr	r2, [r4, #4]
 80048da:	d1dd      	bne.n	8004898 <_malloc_r+0x8c>
 80048dc:	f8c8 2000 	str.w	r2, [r8]
 80048e0:	e7ec      	b.n	80048bc <_malloc_r+0xb0>
 80048e2:	4623      	mov	r3, r4
 80048e4:	6864      	ldr	r4, [r4, #4]
 80048e6:	e7ac      	b.n	8004842 <_malloc_r+0x36>
 80048e8:	4634      	mov	r4, r6
 80048ea:	6876      	ldr	r6, [r6, #4]
 80048ec:	e7b4      	b.n	8004858 <_malloc_r+0x4c>
 80048ee:	4613      	mov	r3, r2
 80048f0:	e7cc      	b.n	800488c <_malloc_r+0x80>
 80048f2:	230c      	movs	r3, #12
 80048f4:	603b      	str	r3, [r7, #0]
 80048f6:	4638      	mov	r0, r7
 80048f8:	f000 f80e 	bl	8004918 <__malloc_unlock>
 80048fc:	e797      	b.n	800482e <_malloc_r+0x22>
 80048fe:	6025      	str	r5, [r4, #0]
 8004900:	e7dc      	b.n	80048bc <_malloc_r+0xb0>
 8004902:	605b      	str	r3, [r3, #4]
 8004904:	deff      	udf	#255	; 0xff
 8004906:	bf00      	nop
 8004908:	20008928 	.word	0x20008928

0800490c <__malloc_lock>:
 800490c:	4801      	ldr	r0, [pc, #4]	; (8004914 <__malloc_lock+0x8>)
 800490e:	f7ff bf0f 	b.w	8004730 <__retarget_lock_acquire_recursive>
 8004912:	bf00      	nop
 8004914:	20008924 	.word	0x20008924

08004918 <__malloc_unlock>:
 8004918:	4801      	ldr	r0, [pc, #4]	; (8004920 <__malloc_unlock+0x8>)
 800491a:	f7ff bf0a 	b.w	8004732 <__retarget_lock_release_recursive>
 800491e:	bf00      	nop
 8004920:	20008924 	.word	0x20008924

08004924 <__ssputs_r>:
 8004924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004928:	688e      	ldr	r6, [r1, #8]
 800492a:	461f      	mov	r7, r3
 800492c:	42be      	cmp	r6, r7
 800492e:	680b      	ldr	r3, [r1, #0]
 8004930:	4682      	mov	sl, r0
 8004932:	460c      	mov	r4, r1
 8004934:	4690      	mov	r8, r2
 8004936:	d82c      	bhi.n	8004992 <__ssputs_r+0x6e>
 8004938:	898a      	ldrh	r2, [r1, #12]
 800493a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800493e:	d026      	beq.n	800498e <__ssputs_r+0x6a>
 8004940:	6965      	ldr	r5, [r4, #20]
 8004942:	6909      	ldr	r1, [r1, #16]
 8004944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004948:	eba3 0901 	sub.w	r9, r3, r1
 800494c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004950:	1c7b      	adds	r3, r7, #1
 8004952:	444b      	add	r3, r9
 8004954:	106d      	asrs	r5, r5, #1
 8004956:	429d      	cmp	r5, r3
 8004958:	bf38      	it	cc
 800495a:	461d      	movcc	r5, r3
 800495c:	0553      	lsls	r3, r2, #21
 800495e:	d527      	bpl.n	80049b0 <__ssputs_r+0x8c>
 8004960:	4629      	mov	r1, r5
 8004962:	f7ff ff53 	bl	800480c <_malloc_r>
 8004966:	4606      	mov	r6, r0
 8004968:	b360      	cbz	r0, 80049c4 <__ssputs_r+0xa0>
 800496a:	6921      	ldr	r1, [r4, #16]
 800496c:	464a      	mov	r2, r9
 800496e:	f000 fad1 	bl	8004f14 <memcpy>
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497c:	81a3      	strh	r3, [r4, #12]
 800497e:	6126      	str	r6, [r4, #16]
 8004980:	6165      	str	r5, [r4, #20]
 8004982:	444e      	add	r6, r9
 8004984:	eba5 0509 	sub.w	r5, r5, r9
 8004988:	6026      	str	r6, [r4, #0]
 800498a:	60a5      	str	r5, [r4, #8]
 800498c:	463e      	mov	r6, r7
 800498e:	42be      	cmp	r6, r7
 8004990:	d900      	bls.n	8004994 <__ssputs_r+0x70>
 8004992:	463e      	mov	r6, r7
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	4632      	mov	r2, r6
 8004998:	4641      	mov	r1, r8
 800499a:	f7ff fe67 	bl	800466c <memmove>
 800499e:	68a3      	ldr	r3, [r4, #8]
 80049a0:	1b9b      	subs	r3, r3, r6
 80049a2:	60a3      	str	r3, [r4, #8]
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	4433      	add	r3, r6
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	2000      	movs	r0, #0
 80049ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b0:	462a      	mov	r2, r5
 80049b2:	f000 fabd 	bl	8004f30 <_realloc_r>
 80049b6:	4606      	mov	r6, r0
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d1e0      	bne.n	800497e <__ssputs_r+0x5a>
 80049bc:	6921      	ldr	r1, [r4, #16]
 80049be:	4650      	mov	r0, sl
 80049c0:	f7ff feb8 	bl	8004734 <_free_r>
 80049c4:	230c      	movs	r3, #12
 80049c6:	f8ca 3000 	str.w	r3, [sl]
 80049ca:	89a3      	ldrh	r3, [r4, #12]
 80049cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d0:	81a3      	strh	r3, [r4, #12]
 80049d2:	f04f 30ff 	mov.w	r0, #4294967295
 80049d6:	e7e9      	b.n	80049ac <__ssputs_r+0x88>

080049d8 <_svfiprintf_r>:
 80049d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049dc:	4698      	mov	r8, r3
 80049de:	898b      	ldrh	r3, [r1, #12]
 80049e0:	061b      	lsls	r3, r3, #24
 80049e2:	b09d      	sub	sp, #116	; 0x74
 80049e4:	4607      	mov	r7, r0
 80049e6:	460d      	mov	r5, r1
 80049e8:	4614      	mov	r4, r2
 80049ea:	d50e      	bpl.n	8004a0a <_svfiprintf_r+0x32>
 80049ec:	690b      	ldr	r3, [r1, #16]
 80049ee:	b963      	cbnz	r3, 8004a0a <_svfiprintf_r+0x32>
 80049f0:	2140      	movs	r1, #64	; 0x40
 80049f2:	f7ff ff0b 	bl	800480c <_malloc_r>
 80049f6:	6028      	str	r0, [r5, #0]
 80049f8:	6128      	str	r0, [r5, #16]
 80049fa:	b920      	cbnz	r0, 8004a06 <_svfiprintf_r+0x2e>
 80049fc:	230c      	movs	r3, #12
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295
 8004a04:	e0d0      	b.n	8004ba8 <_svfiprintf_r+0x1d0>
 8004a06:	2340      	movs	r3, #64	; 0x40
 8004a08:	616b      	str	r3, [r5, #20]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0e:	2320      	movs	r3, #32
 8004a10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a18:	2330      	movs	r3, #48	; 0x30
 8004a1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004bc0 <_svfiprintf_r+0x1e8>
 8004a1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a22:	f04f 0901 	mov.w	r9, #1
 8004a26:	4623      	mov	r3, r4
 8004a28:	469a      	mov	sl, r3
 8004a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a2e:	b10a      	cbz	r2, 8004a34 <_svfiprintf_r+0x5c>
 8004a30:	2a25      	cmp	r2, #37	; 0x25
 8004a32:	d1f9      	bne.n	8004a28 <_svfiprintf_r+0x50>
 8004a34:	ebba 0b04 	subs.w	fp, sl, r4
 8004a38:	d00b      	beq.n	8004a52 <_svfiprintf_r+0x7a>
 8004a3a:	465b      	mov	r3, fp
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	4629      	mov	r1, r5
 8004a40:	4638      	mov	r0, r7
 8004a42:	f7ff ff6f 	bl	8004924 <__ssputs_r>
 8004a46:	3001      	adds	r0, #1
 8004a48:	f000 80a9 	beq.w	8004b9e <_svfiprintf_r+0x1c6>
 8004a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a4e:	445a      	add	r2, fp
 8004a50:	9209      	str	r2, [sp, #36]	; 0x24
 8004a52:	f89a 3000 	ldrb.w	r3, [sl]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 80a1 	beq.w	8004b9e <_svfiprintf_r+0x1c6>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a66:	f10a 0a01 	add.w	sl, sl, #1
 8004a6a:	9304      	str	r3, [sp, #16]
 8004a6c:	9307      	str	r3, [sp, #28]
 8004a6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a72:	931a      	str	r3, [sp, #104]	; 0x68
 8004a74:	4654      	mov	r4, sl
 8004a76:	2205      	movs	r2, #5
 8004a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a7c:	4850      	ldr	r0, [pc, #320]	; (8004bc0 <_svfiprintf_r+0x1e8>)
 8004a7e:	f7fb fbc7 	bl	8000210 <memchr>
 8004a82:	9a04      	ldr	r2, [sp, #16]
 8004a84:	b9d8      	cbnz	r0, 8004abe <_svfiprintf_r+0xe6>
 8004a86:	06d0      	lsls	r0, r2, #27
 8004a88:	bf44      	itt	mi
 8004a8a:	2320      	movmi	r3, #32
 8004a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a90:	0711      	lsls	r1, r2, #28
 8004a92:	bf44      	itt	mi
 8004a94:	232b      	movmi	r3, #43	; 0x2b
 8004a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004aa0:	d015      	beq.n	8004ace <_svfiprintf_r+0xf6>
 8004aa2:	9a07      	ldr	r2, [sp, #28]
 8004aa4:	4654      	mov	r4, sl
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	f04f 0c0a 	mov.w	ip, #10
 8004aac:	4621      	mov	r1, r4
 8004aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ab2:	3b30      	subs	r3, #48	; 0x30
 8004ab4:	2b09      	cmp	r3, #9
 8004ab6:	d94d      	bls.n	8004b54 <_svfiprintf_r+0x17c>
 8004ab8:	b1b0      	cbz	r0, 8004ae8 <_svfiprintf_r+0x110>
 8004aba:	9207      	str	r2, [sp, #28]
 8004abc:	e014      	b.n	8004ae8 <_svfiprintf_r+0x110>
 8004abe:	eba0 0308 	sub.w	r3, r0, r8
 8004ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	9304      	str	r3, [sp, #16]
 8004aca:	46a2      	mov	sl, r4
 8004acc:	e7d2      	b.n	8004a74 <_svfiprintf_r+0x9c>
 8004ace:	9b03      	ldr	r3, [sp, #12]
 8004ad0:	1d19      	adds	r1, r3, #4
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	9103      	str	r1, [sp, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bfbb      	ittet	lt
 8004ada:	425b      	neglt	r3, r3
 8004adc:	f042 0202 	orrlt.w	r2, r2, #2
 8004ae0:	9307      	strge	r3, [sp, #28]
 8004ae2:	9307      	strlt	r3, [sp, #28]
 8004ae4:	bfb8      	it	lt
 8004ae6:	9204      	strlt	r2, [sp, #16]
 8004ae8:	7823      	ldrb	r3, [r4, #0]
 8004aea:	2b2e      	cmp	r3, #46	; 0x2e
 8004aec:	d10c      	bne.n	8004b08 <_svfiprintf_r+0x130>
 8004aee:	7863      	ldrb	r3, [r4, #1]
 8004af0:	2b2a      	cmp	r3, #42	; 0x2a
 8004af2:	d134      	bne.n	8004b5e <_svfiprintf_r+0x186>
 8004af4:	9b03      	ldr	r3, [sp, #12]
 8004af6:	1d1a      	adds	r2, r3, #4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	9203      	str	r2, [sp, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bfb8      	it	lt
 8004b00:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b04:	3402      	adds	r4, #2
 8004b06:	9305      	str	r3, [sp, #20]
 8004b08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004bd0 <_svfiprintf_r+0x1f8>
 8004b0c:	7821      	ldrb	r1, [r4, #0]
 8004b0e:	2203      	movs	r2, #3
 8004b10:	4650      	mov	r0, sl
 8004b12:	f7fb fb7d 	bl	8000210 <memchr>
 8004b16:	b138      	cbz	r0, 8004b28 <_svfiprintf_r+0x150>
 8004b18:	9b04      	ldr	r3, [sp, #16]
 8004b1a:	eba0 000a 	sub.w	r0, r0, sl
 8004b1e:	2240      	movs	r2, #64	; 0x40
 8004b20:	4082      	lsls	r2, r0
 8004b22:	4313      	orrs	r3, r2
 8004b24:	3401      	adds	r4, #1
 8004b26:	9304      	str	r3, [sp, #16]
 8004b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b2c:	4825      	ldr	r0, [pc, #148]	; (8004bc4 <_svfiprintf_r+0x1ec>)
 8004b2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b32:	2206      	movs	r2, #6
 8004b34:	f7fb fb6c 	bl	8000210 <memchr>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d038      	beq.n	8004bae <_svfiprintf_r+0x1d6>
 8004b3c:	4b22      	ldr	r3, [pc, #136]	; (8004bc8 <_svfiprintf_r+0x1f0>)
 8004b3e:	bb1b      	cbnz	r3, 8004b88 <_svfiprintf_r+0x1b0>
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	3307      	adds	r3, #7
 8004b44:	f023 0307 	bic.w	r3, r3, #7
 8004b48:	3308      	adds	r3, #8
 8004b4a:	9303      	str	r3, [sp, #12]
 8004b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b4e:	4433      	add	r3, r6
 8004b50:	9309      	str	r3, [sp, #36]	; 0x24
 8004b52:	e768      	b.n	8004a26 <_svfiprintf_r+0x4e>
 8004b54:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b58:	460c      	mov	r4, r1
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	e7a6      	b.n	8004aac <_svfiprintf_r+0xd4>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	3401      	adds	r4, #1
 8004b62:	9305      	str	r3, [sp, #20]
 8004b64:	4619      	mov	r1, r3
 8004b66:	f04f 0c0a 	mov.w	ip, #10
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b70:	3a30      	subs	r2, #48	; 0x30
 8004b72:	2a09      	cmp	r2, #9
 8004b74:	d903      	bls.n	8004b7e <_svfiprintf_r+0x1a6>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0c6      	beq.n	8004b08 <_svfiprintf_r+0x130>
 8004b7a:	9105      	str	r1, [sp, #20]
 8004b7c:	e7c4      	b.n	8004b08 <_svfiprintf_r+0x130>
 8004b7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b82:	4604      	mov	r4, r0
 8004b84:	2301      	movs	r3, #1
 8004b86:	e7f0      	b.n	8004b6a <_svfiprintf_r+0x192>
 8004b88:	ab03      	add	r3, sp, #12
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	462a      	mov	r2, r5
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <_svfiprintf_r+0x1f4>)
 8004b90:	a904      	add	r1, sp, #16
 8004b92:	4638      	mov	r0, r7
 8004b94:	f3af 8000 	nop.w
 8004b98:	1c42      	adds	r2, r0, #1
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	d1d6      	bne.n	8004b4c <_svfiprintf_r+0x174>
 8004b9e:	89ab      	ldrh	r3, [r5, #12]
 8004ba0:	065b      	lsls	r3, r3, #25
 8004ba2:	f53f af2d 	bmi.w	8004a00 <_svfiprintf_r+0x28>
 8004ba6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ba8:	b01d      	add	sp, #116	; 0x74
 8004baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bae:	ab03      	add	r3, sp, #12
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	462a      	mov	r2, r5
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <_svfiprintf_r+0x1f4>)
 8004bb6:	a904      	add	r1, sp, #16
 8004bb8:	4638      	mov	r0, r7
 8004bba:	f000 f879 	bl	8004cb0 <_printf_i>
 8004bbe:	e7eb      	b.n	8004b98 <_svfiprintf_r+0x1c0>
 8004bc0:	080053c9 	.word	0x080053c9
 8004bc4:	080053d3 	.word	0x080053d3
 8004bc8:	00000000 	.word	0x00000000
 8004bcc:	08004925 	.word	0x08004925
 8004bd0:	080053cf 	.word	0x080053cf

08004bd4 <_printf_common>:
 8004bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	4616      	mov	r6, r2
 8004bda:	4699      	mov	r9, r3
 8004bdc:	688a      	ldr	r2, [r1, #8]
 8004bde:	690b      	ldr	r3, [r1, #16]
 8004be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004be4:	4293      	cmp	r3, r2
 8004be6:	bfb8      	it	lt
 8004be8:	4613      	movlt	r3, r2
 8004bea:	6033      	str	r3, [r6, #0]
 8004bec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bf0:	4607      	mov	r7, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	b10a      	cbz	r2, 8004bfa <_printf_common+0x26>
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	6033      	str	r3, [r6, #0]
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	0699      	lsls	r1, r3, #26
 8004bfe:	bf42      	ittt	mi
 8004c00:	6833      	ldrmi	r3, [r6, #0]
 8004c02:	3302      	addmi	r3, #2
 8004c04:	6033      	strmi	r3, [r6, #0]
 8004c06:	6825      	ldr	r5, [r4, #0]
 8004c08:	f015 0506 	ands.w	r5, r5, #6
 8004c0c:	d106      	bne.n	8004c1c <_printf_common+0x48>
 8004c0e:	f104 0a19 	add.w	sl, r4, #25
 8004c12:	68e3      	ldr	r3, [r4, #12]
 8004c14:	6832      	ldr	r2, [r6, #0]
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	42ab      	cmp	r3, r5
 8004c1a:	dc26      	bgt.n	8004c6a <_printf_common+0x96>
 8004c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c20:	1e13      	subs	r3, r2, #0
 8004c22:	6822      	ldr	r2, [r4, #0]
 8004c24:	bf18      	it	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	0692      	lsls	r2, r2, #26
 8004c2a:	d42b      	bmi.n	8004c84 <_printf_common+0xb0>
 8004c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c30:	4649      	mov	r1, r9
 8004c32:	4638      	mov	r0, r7
 8004c34:	47c0      	blx	r8
 8004c36:	3001      	adds	r0, #1
 8004c38:	d01e      	beq.n	8004c78 <_printf_common+0xa4>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	6922      	ldr	r2, [r4, #16]
 8004c3e:	f003 0306 	and.w	r3, r3, #6
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	bf02      	ittt	eq
 8004c46:	68e5      	ldreq	r5, [r4, #12]
 8004c48:	6833      	ldreq	r3, [r6, #0]
 8004c4a:	1aed      	subeq	r5, r5, r3
 8004c4c:	68a3      	ldr	r3, [r4, #8]
 8004c4e:	bf0c      	ite	eq
 8004c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c54:	2500      	movne	r5, #0
 8004c56:	4293      	cmp	r3, r2
 8004c58:	bfc4      	itt	gt
 8004c5a:	1a9b      	subgt	r3, r3, r2
 8004c5c:	18ed      	addgt	r5, r5, r3
 8004c5e:	2600      	movs	r6, #0
 8004c60:	341a      	adds	r4, #26
 8004c62:	42b5      	cmp	r5, r6
 8004c64:	d11a      	bne.n	8004c9c <_printf_common+0xc8>
 8004c66:	2000      	movs	r0, #0
 8004c68:	e008      	b.n	8004c7c <_printf_common+0xa8>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4652      	mov	r2, sl
 8004c6e:	4649      	mov	r1, r9
 8004c70:	4638      	mov	r0, r7
 8004c72:	47c0      	blx	r8
 8004c74:	3001      	adds	r0, #1
 8004c76:	d103      	bne.n	8004c80 <_printf_common+0xac>
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c80:	3501      	adds	r5, #1
 8004c82:	e7c6      	b.n	8004c12 <_printf_common+0x3e>
 8004c84:	18e1      	adds	r1, r4, r3
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	2030      	movs	r0, #48	; 0x30
 8004c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c8e:	4422      	add	r2, r4
 8004c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c98:	3302      	adds	r3, #2
 8004c9a:	e7c7      	b.n	8004c2c <_printf_common+0x58>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	4649      	mov	r1, r9
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	47c0      	blx	r8
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d0e6      	beq.n	8004c78 <_printf_common+0xa4>
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7d9      	b.n	8004c62 <_printf_common+0x8e>
	...

08004cb0 <_printf_i>:
 8004cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb4:	7e0f      	ldrb	r7, [r1, #24]
 8004cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cb8:	2f78      	cmp	r7, #120	; 0x78
 8004cba:	4691      	mov	r9, r2
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	469a      	mov	sl, r3
 8004cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cc6:	d807      	bhi.n	8004cd8 <_printf_i+0x28>
 8004cc8:	2f62      	cmp	r7, #98	; 0x62
 8004cca:	d80a      	bhi.n	8004ce2 <_printf_i+0x32>
 8004ccc:	2f00      	cmp	r7, #0
 8004cce:	f000 80d4 	beq.w	8004e7a <_printf_i+0x1ca>
 8004cd2:	2f58      	cmp	r7, #88	; 0x58
 8004cd4:	f000 80c0 	beq.w	8004e58 <_printf_i+0x1a8>
 8004cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ce0:	e03a      	b.n	8004d58 <_printf_i+0xa8>
 8004ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ce6:	2b15      	cmp	r3, #21
 8004ce8:	d8f6      	bhi.n	8004cd8 <_printf_i+0x28>
 8004cea:	a101      	add	r1, pc, #4	; (adr r1, 8004cf0 <_printf_i+0x40>)
 8004cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cf0:	08004d49 	.word	0x08004d49
 8004cf4:	08004d5d 	.word	0x08004d5d
 8004cf8:	08004cd9 	.word	0x08004cd9
 8004cfc:	08004cd9 	.word	0x08004cd9
 8004d00:	08004cd9 	.word	0x08004cd9
 8004d04:	08004cd9 	.word	0x08004cd9
 8004d08:	08004d5d 	.word	0x08004d5d
 8004d0c:	08004cd9 	.word	0x08004cd9
 8004d10:	08004cd9 	.word	0x08004cd9
 8004d14:	08004cd9 	.word	0x08004cd9
 8004d18:	08004cd9 	.word	0x08004cd9
 8004d1c:	08004e61 	.word	0x08004e61
 8004d20:	08004d89 	.word	0x08004d89
 8004d24:	08004e1b 	.word	0x08004e1b
 8004d28:	08004cd9 	.word	0x08004cd9
 8004d2c:	08004cd9 	.word	0x08004cd9
 8004d30:	08004e83 	.word	0x08004e83
 8004d34:	08004cd9 	.word	0x08004cd9
 8004d38:	08004d89 	.word	0x08004d89
 8004d3c:	08004cd9 	.word	0x08004cd9
 8004d40:	08004cd9 	.word	0x08004cd9
 8004d44:	08004e23 	.word	0x08004e23
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	1d1a      	adds	r2, r3, #4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	602a      	str	r2, [r5, #0]
 8004d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e09f      	b.n	8004e9c <_printf_i+0x1ec>
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	682b      	ldr	r3, [r5, #0]
 8004d60:	0607      	lsls	r7, r0, #24
 8004d62:	f103 0104 	add.w	r1, r3, #4
 8004d66:	6029      	str	r1, [r5, #0]
 8004d68:	d501      	bpl.n	8004d6e <_printf_i+0xbe>
 8004d6a:	681e      	ldr	r6, [r3, #0]
 8004d6c:	e003      	b.n	8004d76 <_printf_i+0xc6>
 8004d6e:	0646      	lsls	r6, r0, #25
 8004d70:	d5fb      	bpl.n	8004d6a <_printf_i+0xba>
 8004d72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d76:	2e00      	cmp	r6, #0
 8004d78:	da03      	bge.n	8004d82 <_printf_i+0xd2>
 8004d7a:	232d      	movs	r3, #45	; 0x2d
 8004d7c:	4276      	negs	r6, r6
 8004d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d82:	485a      	ldr	r0, [pc, #360]	; (8004eec <_printf_i+0x23c>)
 8004d84:	230a      	movs	r3, #10
 8004d86:	e012      	b.n	8004dae <_printf_i+0xfe>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	6820      	ldr	r0, [r4, #0]
 8004d8c:	1d19      	adds	r1, r3, #4
 8004d8e:	6029      	str	r1, [r5, #0]
 8004d90:	0605      	lsls	r5, r0, #24
 8004d92:	d501      	bpl.n	8004d98 <_printf_i+0xe8>
 8004d94:	681e      	ldr	r6, [r3, #0]
 8004d96:	e002      	b.n	8004d9e <_printf_i+0xee>
 8004d98:	0641      	lsls	r1, r0, #25
 8004d9a:	d5fb      	bpl.n	8004d94 <_printf_i+0xe4>
 8004d9c:	881e      	ldrh	r6, [r3, #0]
 8004d9e:	4853      	ldr	r0, [pc, #332]	; (8004eec <_printf_i+0x23c>)
 8004da0:	2f6f      	cmp	r7, #111	; 0x6f
 8004da2:	bf0c      	ite	eq
 8004da4:	2308      	moveq	r3, #8
 8004da6:	230a      	movne	r3, #10
 8004da8:	2100      	movs	r1, #0
 8004daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dae:	6865      	ldr	r5, [r4, #4]
 8004db0:	60a5      	str	r5, [r4, #8]
 8004db2:	2d00      	cmp	r5, #0
 8004db4:	bfa2      	ittt	ge
 8004db6:	6821      	ldrge	r1, [r4, #0]
 8004db8:	f021 0104 	bicge.w	r1, r1, #4
 8004dbc:	6021      	strge	r1, [r4, #0]
 8004dbe:	b90e      	cbnz	r6, 8004dc4 <_printf_i+0x114>
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	d04b      	beq.n	8004e5c <_printf_i+0x1ac>
 8004dc4:	4615      	mov	r5, r2
 8004dc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dca:	fb03 6711 	mls	r7, r3, r1, r6
 8004dce:	5dc7      	ldrb	r7, [r0, r7]
 8004dd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dd4:	4637      	mov	r7, r6
 8004dd6:	42bb      	cmp	r3, r7
 8004dd8:	460e      	mov	r6, r1
 8004dda:	d9f4      	bls.n	8004dc6 <_printf_i+0x116>
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d10b      	bne.n	8004df8 <_printf_i+0x148>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	07de      	lsls	r6, r3, #31
 8004de4:	d508      	bpl.n	8004df8 <_printf_i+0x148>
 8004de6:	6923      	ldr	r3, [r4, #16]
 8004de8:	6861      	ldr	r1, [r4, #4]
 8004dea:	4299      	cmp	r1, r3
 8004dec:	bfde      	ittt	le
 8004dee:	2330      	movle	r3, #48	; 0x30
 8004df0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004df4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004df8:	1b52      	subs	r2, r2, r5
 8004dfa:	6122      	str	r2, [r4, #16]
 8004dfc:	f8cd a000 	str.w	sl, [sp]
 8004e00:	464b      	mov	r3, r9
 8004e02:	aa03      	add	r2, sp, #12
 8004e04:	4621      	mov	r1, r4
 8004e06:	4640      	mov	r0, r8
 8004e08:	f7ff fee4 	bl	8004bd4 <_printf_common>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d14a      	bne.n	8004ea6 <_printf_i+0x1f6>
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	b004      	add	sp, #16
 8004e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	f043 0320 	orr.w	r3, r3, #32
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	4833      	ldr	r0, [pc, #204]	; (8004ef0 <_printf_i+0x240>)
 8004e24:	2778      	movs	r7, #120	; 0x78
 8004e26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	6829      	ldr	r1, [r5, #0]
 8004e2e:	061f      	lsls	r7, r3, #24
 8004e30:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e34:	d402      	bmi.n	8004e3c <_printf_i+0x18c>
 8004e36:	065f      	lsls	r7, r3, #25
 8004e38:	bf48      	it	mi
 8004e3a:	b2b6      	uxthmi	r6, r6
 8004e3c:	07df      	lsls	r7, r3, #31
 8004e3e:	bf48      	it	mi
 8004e40:	f043 0320 	orrmi.w	r3, r3, #32
 8004e44:	6029      	str	r1, [r5, #0]
 8004e46:	bf48      	it	mi
 8004e48:	6023      	strmi	r3, [r4, #0]
 8004e4a:	b91e      	cbnz	r6, 8004e54 <_printf_i+0x1a4>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	f023 0320 	bic.w	r3, r3, #32
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	2310      	movs	r3, #16
 8004e56:	e7a7      	b.n	8004da8 <_printf_i+0xf8>
 8004e58:	4824      	ldr	r0, [pc, #144]	; (8004eec <_printf_i+0x23c>)
 8004e5a:	e7e4      	b.n	8004e26 <_printf_i+0x176>
 8004e5c:	4615      	mov	r5, r2
 8004e5e:	e7bd      	b.n	8004ddc <_printf_i+0x12c>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	6826      	ldr	r6, [r4, #0]
 8004e64:	6961      	ldr	r1, [r4, #20]
 8004e66:	1d18      	adds	r0, r3, #4
 8004e68:	6028      	str	r0, [r5, #0]
 8004e6a:	0635      	lsls	r5, r6, #24
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	d501      	bpl.n	8004e74 <_printf_i+0x1c4>
 8004e70:	6019      	str	r1, [r3, #0]
 8004e72:	e002      	b.n	8004e7a <_printf_i+0x1ca>
 8004e74:	0670      	lsls	r0, r6, #25
 8004e76:	d5fb      	bpl.n	8004e70 <_printf_i+0x1c0>
 8004e78:	8019      	strh	r1, [r3, #0]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	6123      	str	r3, [r4, #16]
 8004e7e:	4615      	mov	r5, r2
 8004e80:	e7bc      	b.n	8004dfc <_printf_i+0x14c>
 8004e82:	682b      	ldr	r3, [r5, #0]
 8004e84:	1d1a      	adds	r2, r3, #4
 8004e86:	602a      	str	r2, [r5, #0]
 8004e88:	681d      	ldr	r5, [r3, #0]
 8004e8a:	6862      	ldr	r2, [r4, #4]
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f7fb f9be 	bl	8000210 <memchr>
 8004e94:	b108      	cbz	r0, 8004e9a <_printf_i+0x1ea>
 8004e96:	1b40      	subs	r0, r0, r5
 8004e98:	6060      	str	r0, [r4, #4]
 8004e9a:	6863      	ldr	r3, [r4, #4]
 8004e9c:	6123      	str	r3, [r4, #16]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea4:	e7aa      	b.n	8004dfc <_printf_i+0x14c>
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	462a      	mov	r2, r5
 8004eaa:	4649      	mov	r1, r9
 8004eac:	4640      	mov	r0, r8
 8004eae:	47d0      	blx	sl
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d0ad      	beq.n	8004e10 <_printf_i+0x160>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	079b      	lsls	r3, r3, #30
 8004eb8:	d413      	bmi.n	8004ee2 <_printf_i+0x232>
 8004eba:	68e0      	ldr	r0, [r4, #12]
 8004ebc:	9b03      	ldr	r3, [sp, #12]
 8004ebe:	4298      	cmp	r0, r3
 8004ec0:	bfb8      	it	lt
 8004ec2:	4618      	movlt	r0, r3
 8004ec4:	e7a6      	b.n	8004e14 <_printf_i+0x164>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	4632      	mov	r2, r6
 8004eca:	4649      	mov	r1, r9
 8004ecc:	4640      	mov	r0, r8
 8004ece:	47d0      	blx	sl
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d09d      	beq.n	8004e10 <_printf_i+0x160>
 8004ed4:	3501      	adds	r5, #1
 8004ed6:	68e3      	ldr	r3, [r4, #12]
 8004ed8:	9903      	ldr	r1, [sp, #12]
 8004eda:	1a5b      	subs	r3, r3, r1
 8004edc:	42ab      	cmp	r3, r5
 8004ede:	dcf2      	bgt.n	8004ec6 <_printf_i+0x216>
 8004ee0:	e7eb      	b.n	8004eba <_printf_i+0x20a>
 8004ee2:	2500      	movs	r5, #0
 8004ee4:	f104 0619 	add.w	r6, r4, #25
 8004ee8:	e7f5      	b.n	8004ed6 <_printf_i+0x226>
 8004eea:	bf00      	nop
 8004eec:	080053da 	.word	0x080053da
 8004ef0:	080053eb 	.word	0x080053eb

08004ef4 <_sbrk_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4d06      	ldr	r5, [pc, #24]	; (8004f10 <_sbrk_r+0x1c>)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4604      	mov	r4, r0
 8004efc:	4608      	mov	r0, r1
 8004efe:	602b      	str	r3, [r5, #0]
 8004f00:	f7fd fbda 	bl	80026b8 <_sbrk>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d102      	bne.n	8004f0e <_sbrk_r+0x1a>
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	b103      	cbz	r3, 8004f0e <_sbrk_r+0x1a>
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
 8004f10:	20008920 	.word	0x20008920

08004f14 <memcpy>:
 8004f14:	440a      	add	r2, r1
 8004f16:	4291      	cmp	r1, r2
 8004f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f1c:	d100      	bne.n	8004f20 <memcpy+0xc>
 8004f1e:	4770      	bx	lr
 8004f20:	b510      	push	{r4, lr}
 8004f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	d1f9      	bne.n	8004f22 <memcpy+0xe>
 8004f2e:	bd10      	pop	{r4, pc}

08004f30 <_realloc_r>:
 8004f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f34:	4680      	mov	r8, r0
 8004f36:	4614      	mov	r4, r2
 8004f38:	460e      	mov	r6, r1
 8004f3a:	b921      	cbnz	r1, 8004f46 <_realloc_r+0x16>
 8004f3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f40:	4611      	mov	r1, r2
 8004f42:	f7ff bc63 	b.w	800480c <_malloc_r>
 8004f46:	b92a      	cbnz	r2, 8004f54 <_realloc_r+0x24>
 8004f48:	f7ff fbf4 	bl	8004734 <_free_r>
 8004f4c:	4625      	mov	r5, r4
 8004f4e:	4628      	mov	r0, r5
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f54:	f000 f81b 	bl	8004f8e <_malloc_usable_size_r>
 8004f58:	4284      	cmp	r4, r0
 8004f5a:	4607      	mov	r7, r0
 8004f5c:	d802      	bhi.n	8004f64 <_realloc_r+0x34>
 8004f5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f62:	d812      	bhi.n	8004f8a <_realloc_r+0x5a>
 8004f64:	4621      	mov	r1, r4
 8004f66:	4640      	mov	r0, r8
 8004f68:	f7ff fc50 	bl	800480c <_malloc_r>
 8004f6c:	4605      	mov	r5, r0
 8004f6e:	2800      	cmp	r0, #0
 8004f70:	d0ed      	beq.n	8004f4e <_realloc_r+0x1e>
 8004f72:	42bc      	cmp	r4, r7
 8004f74:	4622      	mov	r2, r4
 8004f76:	4631      	mov	r1, r6
 8004f78:	bf28      	it	cs
 8004f7a:	463a      	movcs	r2, r7
 8004f7c:	f7ff ffca 	bl	8004f14 <memcpy>
 8004f80:	4631      	mov	r1, r6
 8004f82:	4640      	mov	r0, r8
 8004f84:	f7ff fbd6 	bl	8004734 <_free_r>
 8004f88:	e7e1      	b.n	8004f4e <_realloc_r+0x1e>
 8004f8a:	4635      	mov	r5, r6
 8004f8c:	e7df      	b.n	8004f4e <_realloc_r+0x1e>

08004f8e <_malloc_usable_size_r>:
 8004f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f92:	1f18      	subs	r0, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bfbc      	itt	lt
 8004f98:	580b      	ldrlt	r3, [r1, r0]
 8004f9a:	18c0      	addlt	r0, r0, r3
 8004f9c:	4770      	bx	lr
	...

08004fa0 <_init>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	bf00      	nop
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr

08004fac <_fini>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	bf00      	nop
 8004fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb2:	bc08      	pop	{r3}
 8004fb4:	469e      	mov	lr, r3
 8004fb6:	4770      	bx	lr
